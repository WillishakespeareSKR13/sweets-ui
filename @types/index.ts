/* eslint-disable spaced-comment */
/* eslint-disable no-shadow */
/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-explicit-any */

import { OperationVariables, QueryResult } from '@apollo/client';
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
import { NextComponentType, NextPage, NextPageContext } from 'next';
import { AppInitialProps } from 'next/app';
import { Router } from 'next/router';
import { ReactNode } from 'react';

export type Layout = (page: ReactNode) => ReactNode;
export type NextPageFC<L = any, P = any, IP = P> = NextPage<P, IP> & L;
export type QueryTypeChildren = { children: ReactNode };
export type QueryType = QueryResult<IQueryFilter<'me'>, OperationVariables>;
export type QueryTypeNode = {
  query: QueryType;
  role?: string | string[];
};

export type AppPropsWithLayout<L = any, P = any> = AppInitialProps & {
  Component: NextComponentType<NextPageContext, any, P> & L;
  router: Router;
  __N_SSG?: boolean | undefined;
  __N_SSP?: boolean | undefined;
};

export type IQueryFilter<T extends keyof IQuery> = Pick<IQuery, T>;
export type IMutationFilter<T extends keyof IMutation> = Pick<IMutation, T>;

export type IGraphQLResponseRoot = {
  data?: IQuery | IMutation;
  errors?: Array<IGraphQLResponseError>;
};

interface IGraphQLResponseError {
  message: string;
  locations?: Array<IGraphQLResponseErrorLocation>;
  [propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
  line: number;
  column: number;
}

//////////////////////////////////////////////////////////////////////////

export interface IQuery {
  listGroups?: IGroupCollectionSegment;
  groupById: IGroup;
  me: IMember;
  meById: IMember;
  meByIdPublic: IMember;
  referer: IMyUrl;
  projectByUrl: IProject;
  countries: Array<ICountry>;
  companies: Array<ICompany>;
  roles: Array<IRole>;
  industries: Array<IIndustry>;
  rolesByProject: Array<IProjectRole>;
  members: Array<IMember>;
  memberById?: IMember;
  deleteMyMembers: Array<IMemberProject>;
  membersByProject?: IMemberProjectCollectionSegment;
  countryByCode: ICountry;
  listUsers?: IMemberCollectionSegment;
  listUsersPublic: Array<IMember>;
  projectsInfinite?: IProjectsInfiniteConnection;
  projects: Array<IProject>;
  projectById: IProject;
  conversationMemberBy: IMemberChat;
  memberNameBy: IMemberFullName;
  userById?: IMember;
  customMemberById?: ICustomMemberDto;
  services: Array<IMicroservice>;
  fixUpdateNameService: IMessageFix;
  servicesByProject: Array<IServiceHelper>;
  endOfDay: IDateTime;
  startOfDay: IDateTime;
  listSchedules?: Array<IScheduleManager>;
  availableEvents: Array<IEvent>;
  myEvents: Array<IEvent>;
  events: Array<IEvent>;
  filteredEvents?: IEventCollectionSegment;
  currentDate: IDateTime;
  eventTypes: Array<IEventType>;
  subEventTypes: Array<ISubEventType>;
  eventById: IEvent;
  localTime: IDateTime;
  nextEvent: Array<IEvent>;
  nextEventMembers: Array<IEvent>;
  membersEvents: Array<IEvent>;
  associatedEvents: Array<IEvent>;
  conversationsByToMemberId: Array<IConversationReply>;
  conversationsByMemberId: Array<IMemberConversation>;
  resultByMemberId: Array<IQuestionDTO>;
  results: Array<IQuestionDTO>;
  answers: Array<IQuestionDTO>;
  articles?: IArticlesConnection;
  listArticles?: IArticleCollectionSegment;
  listAddresses: Array<IAddress>;
  taxonomyById: ITaxonomy;
  taxonomyBySlug: ITaxonomy;
  listProducts?: IProductCollectionSegment;
  taxonomiesByProject?: ITaxonomyCollectionSegment;
  surveysByArticleId: Array<ISurvey>;
  shopById?: IShop;
  articleById: IArticle;
  seoBySlug: ISeoDTO;
  articleBySlug: IArticle;
  productById: IProduct;
  productBySlug: IProduct;
  productByIdResolver?: IProduct;
  addressById?: IAddress;
  listService?: IServiceCollectionSegment;
  listServiceQuiz?: IServiceQuizCollectionSegment;
  listQuiz?: IQuizCollectionSegment;
  listQuizSection?: IQuizSectionCollectionSegment;
  listQuizQuestion?: IQuizQuestionCollectionSegment;
  listQuizQuestionAnswer?: IQuizQuestionAnswerCollectionSegment;
  listQuizAnswer?: IQuizAnswerCollectionSegment;
  listQuizMember?: IQuizMemberCollectionSegment;
  listQuizMemberAnswer?: IQuizMemberAnswerCollectionSegment;
  listQuizMemberDescription?: IQuizMemberDescriptionCollectionSegment;
  contactEmails: Array<IContactEmail>;
  transactions?: ITransactionCollectionSegment;
  methodPayments?: IMethodPaymentCollectionSegment;
  plan?: IPlanCollectionSegment;
  listInvoices?: IInvoiceCollectionSegment;
  invoiceById: IInvoice;
  listInvoiceAddress: Array<IInvoice>;
  listInvoiceDetailProduct: Array<IInvoiceDetail>;
  configs: Array<IConfiguration>;
  listComponents: Array<IComponent>;
  listWebsitePages: Array<IWebsitePage>;
  webSitePageById?: IWebsitePage;
  websitePageComponentById?: IWebsitePageComponent;
  websitePageBySlug?: IWebsitePage;
  verifyVideoRoom: IVideoRoom;
  videoCalls: Array<IVideoCall>;
  videoCallsByMember: Array<IVideoCall>;
  videoCallById: IVideo;
  videoCallBySessionId: IVideo;
  stadistics: Array<IStadisticsResult>;
  stadisticsQualitas: Array<IStadisticsResult>;
  listRQuoterProfilesByProjectId?: IListRQuoterProfilesByProjectIdConnection;
  listRQuoterProfilesInsurerByProjectId?: IListRQuoterProfilesInsurerByProjectIdConnection;
  homologated?: IHomologator;
  listInsurerServiceCredentials: Array<IInsurerServiceCredential>;
  listInsurerService: Array<IInsurerService>;
  listInsurerService2: Array<IInsurerService>;
  listRelations: Array<IVehiclesCarCodeRelation>;
  quotes?: IQuoteCollectionSegment;
  listRegistrations: Array<IRegistration>;
  quoteById: IQuoter;
  listQuoteServices: Array<IGenericsService>;
  listGenders: Array<IGenderDTO>;
  listCars: Array<IVehiclesCarCatalogAba>;
  listCarType: Array<ICarTypeDTO>;
  listCarBrand: Array<IListBrandDTO>;
  listCarSuBbrand: Array<IListSubBrandDTO>;
  listModel: Array<IListYearDTO>;
  car: Array<IListVersionDTO>;
  relationCars: Array<IHomologationService>;
  colony: IColoniaDTO;
  listCoverages: Array<ICoverageDTO>;
  catalogById: ICatalog;
  catalogs?: ICatalogCollectionSegment;
  catalogByYears: Array<ICatalogByYear>;
  insurers?: IInsurerCollectionSegment;
  offices?: IOfficeCollectionSegment;
  quatorProfiles?: IQuoterProfileCollectionSegment;
  quoterProfileById: IQuoterProfile;
  vehiclesCarCatalogAbas: Array<IVehiclesCarCatalogAba>;
  vehiclesCarCatalogAbasByBrand: Array<IVehiclesCarCatalogAba>;
  vehiclesCarCatalogAbasBySubBrand: Array<IVehiclesCarCatalogAba>;
  vehiclesCarCatalogAfirme: Array<IVehiclesCarCatalogAfirme>;
  vehiclesCarCatalogAfirmebyBrand: Array<IVehiclesCarCatalogAfirme>;
  vehiclesCarCatalogAfirmebySubrand: Array<IVehiclesCarCatalogAfirme>;
  vehiclesCarCatalogAig: Array<IVehiclesCarCatalogAig>;
  vehiclesCarCatalogAigByBrand: Array<IVehiclesCarCatalogAig>;
  vehiclesCarCatalogAigBySubBrand: Array<IVehiclesCarCatalogAig>;
  vehiclesCarCatalogAnas: Array<IVehiclesCarCatalogAna>;
  vehiclesCarCatalogAnasByBrand: Array<IVehiclesCarCatalogAna>;
  vehiclesCarCatalogAnasbySubbrand: Array<IVehiclesCarCatalogAna>;
  vehiclesAtlas: Array<IVehiclesCarCatalogAtla>;
  vehiclesAtlasByBrand: Array<IVehiclesCarCatalogAtla>;
  vehiclesAtlasBySubbrand: Array<IVehiclesCarCatalogAtla>;
  vehiclesAxa: Array<IVehiclesCarCatalogAxa>;
  vehiclesAxaByBrand: Array<IVehiclesCarCatalogAxa>;
  vehiclesAxaBySubbrand: Array<IVehiclesCarCatalogAxa>;
  vehiclesBanorte: Array<IVehiclesCarCatalogBanorte>;
  vehiclesBanorteByBrand: Array<IVehiclesCarCatalogBanorte>;
  vehiclesBanorteBySubbrand: Array<IVehiclesCarCatalogBanorte>;
  vehiclesGrip: Array<IVehiclesCarCatalogGnp>;
  vehiclesGripByBrand: Array<IVehiclesCarCatalogGnp>;
  vehiclesGripBySubbrand: Array<IVehiclesCarCatalogGnp>;
  vehiclesHdi: Array<IVehiclesCarCatalogHdi>;
  vehiclesHdiByBrand: Array<IVehiclesCarCatalogHdi>;
  vehiclesHdiBySubbrand: Array<IVehiclesCarCatalogHdi>;
  vehiclesMapfree: Array<IVehiclesCarCatalogMapfre>;
  vehiclesMapfreeByBrand: Array<IVehiclesCarCatalogMapfre>;
  vehiclesMapfreeBySubbrand: Array<IVehiclesCarCatalogMapfre>;
  vehiclesP: Array<IVehiclesCarCatalogP>;
  vehiclesPByBrand: Array<IVehiclesCarCatalogP>;
  vehiclesPBySubbrand: Array<IVehiclesCarCatalogP>;
  vehiclesPotosi: Array<IVehiclesCarCatalogPotosi>;
  vehiclesPotosiByBrand: Array<IVehiclesCarCatalogPotosi>;
  vehiclesPotosiBySubbrand: Array<IVehiclesCarCatalogPotosi>;
  vehiclesQualitas: Array<IVehiclesCarCatalogQualita>;
  vehiclesQualitasByBrand: Array<IVehiclesCarCatalogQualita>;
  vehiclesQualitasBySubbrand: Array<IVehiclesCarCatalogQualita>;
  vehiclesZurich: Array<IVehiclesCarCatalogZurich>;
  vehiclesZurichByBrand: Array<IVehiclesCarCatalogZurich>;
  vehiclesZurichBySubbrand: Array<IVehiclesCarCatalogZurich>;
  vehiclesCarcatalogAbaCodeYearsCarId: Array<IVehiclesCarCatalogAbaCodeYear>;
  vehiclesCarcatalogAfirmeCodeYearsCarId: Array<IVehiclesCarCatalogAfirmeCodeYear>;
  vehiclesCarcatalogAxaCodeYearsCarId: Array<IVehiclesCarCatalogAxaCodeYear>;
  vehiclesCarcatalogAtlasCodeYearsCarId: Array<IVehiclesCarCatalogAtlasCodeYear>;
  vehiclesCarcatalogBanorteCodeYearsCarId: Array<IVehiclesCarCatalogBanorteCodeYear>;
  vehiclesCarcatalogGnpCodeYearsCarId: Array<IVehiclesCarCatalogGnpCodeYear>;
  vehiclesCarcatalogHdiCodeYearsCarId: Array<IVehiclesCarCatalogHdiCodeYear>;
  vehiclesCarcatalogMapfreeCodeYearsCarId: Array<IVehiclesCarCatalogMapfreCodeYear>;
  vehiclesCarcatalogQualitasCodeYearsCarId: Array<IVehiclesCarCatalogQualitasCodeYear>;
  vehiclesCarcatalogZurichCodeYearsCarId: Array<IVehiclesCarCatalogZurichCodeYear>;
  listStaffQuote: Array<IStaffQuote>;
  listProposal: Array<IProposal>;
  listCollaborator: Array<ICollaborator>;
  listDynamicPage: Array<IDynamicPage>;
  listDynamicBlock?: IDynamicBlockCollectionSegment;
  listDynamicSection?: IDynamicSectionCollectionSegment;
  listDynamicTab?: IDynamicTabCollectionSegment;
  listDynamicSectionBlock?: IDynamicSectionBlockCollectionSegment;
  listDynamicCustomMeta?: IDynamicCustomMetaCollectionSegment;
  listDynamicCustomValue?: IDynamicCustomValueCollectionSegment;
  listCharges?: IChargeCollectionSegment;
  listClinicHistory: Array<IClinicHistory>;
  listConsult?: IEventDetailCollectionSegment;
  listFisicExam: Array<IFisicExam>;
  listMedicalBackgrounds: Array<IMedicalBackground>;
  listMedicBackgroundDetails: Array<IMedicalBackgroundDetail>;
  listClinicHistory_MedicalBackgroundDetails: Array<IClinicHistoryMedicalBackgroundDetail>;
  listMedicines: Array<IMedicine>;
  listMedicalServices: Array<IMedicalService>;
  listVaccines: Array<IVaccine>;
  listVitalSigns: Array<IVitalSign>;
  listMedicalConfigs: Array<IMedicalConfig>;
  listRegistSesions: Array<IRegistSesion>;
  listTherapy?: ITherapyCollectionSegment;
  listRecipeConfig: Array<IRecipeConfig>;
  listMedicRecipe: Array<IMedicRecipe>;
  listConsultNotes: Array<IConsultNote>;
  listPacientNote: Array<IPacientNote>;
  listDiagnostic: Array<IDiagnostic>;
  listPacientMedicalBackground: Array<IPacientMedicalBackground>;
  listBillingRequests: Array<IBillingRequest>;
  listFormats: Array<IFormat>;
  listPatientResponses: Array<IPatientVitalSignsResponse>;
  listChagesForPacient?: IEventDetailCollectionSegment;
  listPacientMedicalBackgroundById: Array<IPacientMedicalBackground>;
  listEventDetailsByMemberId: Array<IEventDetail>;
  listFisicExamsByMemberId: Array<IFisicExam>;
  listMedicalBackgroundByMemberId: Array<IMedicalBackground>;
  listMedicRecipesByMemberId: Array<IMedicRecipe>;
  listPatientNotesByMemberId: Array<IPacientNote>;
  listVitalSignsByMemberId: Array<IPatientVitalSignsResponse>;
  listVaccinesByMemberId: Array<IVaccine>;
  listDiagnosticByEventId: Array<IDiagnostic>;
  apiServices: Array<IApiService>;
  apiServiceBySecretAndProjectId?: IApiService;
  downloadFile: IDownloadFile;
  listFolders?: IListFoldersConnection;
  foldersList?: IFoldersListConnection;
  listFiles?: IFileCollectionSegment;
  listFilesByMemberId: Array<IFile>;
  sharedFilesByMemberId: Array<ISharedFile>;
  sharedFoldersByMemberId: Array<ISharedFolder>;
  _service: I_Service;
  getRoomToken?: IRoomToken;
  getRoomById?: IRoomSession;
  getRoomTokenLiveKit?: IRoomTokenLiveKit;
  listRoomRecordings?: Array<string | null>;
  getRoomRecording?: string;
  listHiring: Array<IHiring>;
  listHiringType: Array<IHiringType>;
  listShift: Array<IShift>;
  listDay: Array<IDay>;
  listEnumHiringType: Array<string>;
  hiringByMemberId: Array<IHiring | null>;
  shiftByMemberId: Array<IShift | null>;
  listDocumentCategory?: IDocumentCategoryCollectionSegment;
  listDocumentCategoryDetail: Array<IDocumentCategoryDetail>;
  listDocument?: IDocumentCollectionSegment;
  listDocumentTemplate?: IDocumentTemplateCollectionSegment;
  listTemplatePage?: ITemplatePageCollectionSegment;
  listDocumentTag: Array<IDocumentTag>;
  listDocumentScan: Array<IDocumentScan>;
  listDocumentRead?: IDocumentReadCollectionSegment;
}

export interface IGroupFilterInput {
  and?: Array<IGroupFilterInput>;
  or?: Array<IGroupFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  project?: IProjectFilterInput;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  members?: IListFilterInputTypeOfMemberFilterInput;
  groupTaxonomies?: IListFilterInputTypeOfGroupTaxonomyFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableGuidOperationFilterInput {
  eq?: IUUID;
  neq?: IUUID;
  in?: Array<IUUID>;
  nin?: Array<IUUID>;
  gt?: IUUID;
  ngt?: IUUID;
  gte?: IUUID;
  ngte?: IUUID;
  lt?: IUUID;
  nlt?: IUUID;
  lte?: IUUID;
  nlte?: IUUID;
}

export type IUUID = any;

export interface IProjectFilterInput {
  and?: Array<IProjectFilterInput>;
  or?: Array<IProjectFilterInput>;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  logo?: IStringOperationFilterInput;
  tagLine?: IStringOperationFilterInput;
  isReady?: IBooleanOperationFilterInput;
  url?: IStringOperationFilterInput;
  industryId?: IComparableNullableOfGuidOperationFilterInput;
  industry?: IIndustryFilterInput;
  companyId?: IComparableGuidOperationFilterInput;
  company?: ICompanyFilterInput;
  projectRoles?: IListFilterInputTypeOfProjectRoleFilterInput;
  memberProjects?: IListFilterInputTypeOfMemberProjectFilterInput;
  groups?: IListFilterInputTypeOfGroupFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IStringOperationFilterInput {
  and?: Array<IStringOperationFilterInput>;
  or?: Array<IStringOperationFilterInput>;
  eq?: string;
  neq?: string;
  contains?: string;
  ncontains?: string;
  in?: Array<string | null>;
  nin?: Array<string | null>;
  startsWith?: string;
  nstartsWith?: string;
  endsWith?: string;
  nendsWith?: string;
}

export interface IBooleanOperationFilterInput {
  eq?: boolean;
  neq?: boolean;
}

export interface IComparableNullableOfGuidOperationFilterInput {
  eq?: IUUID;
  neq?: IUUID;
  in?: Array<IUUID | null>;
  nin?: Array<IUUID | null>;
  gt?: IUUID;
  ngt?: IUUID;
  gte?: IUUID;
  ngte?: IUUID;
  lt?: IUUID;
  nlt?: IUUID;
  lte?: IUUID;
  nlte?: IUUID;
}

export interface IIndustryFilterInput {
  and?: Array<IIndustryFilterInput>;
  or?: Array<IIndustryFilterInput>;
  name?: IStringOperationFilterInput;
  slug?: IStringOperationFilterInput;
  projects?: IListFilterInputTypeOfProjectFilterInput;
  companies?: IListFilterInputTypeOfCompanyFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfProjectFilterInput {
  all?: IProjectFilterInput;
  none?: IProjectFilterInput;
  some?: IProjectFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfCompanyFilterInput {
  all?: ICompanyFilterInput;
  none?: ICompanyFilterInput;
  some?: ICompanyFilterInput;
  any?: boolean;
}

export interface ICompanyFilterInput {
  and?: Array<ICompanyFilterInput>;
  or?: Array<ICompanyFilterInput>;
  name?: IStringOperationFilterInput;
  numberEmployees?: IComparableInt32OperationFilterInput;
  countryId?: IComparableGuidOperationFilterInput;
  country?: ICountryFilterInput;
  photo?: IStringOperationFilterInput;
  tagLine?: IStringOperationFilterInput;
  industryId?: IComparableNullableOfGuidOperationFilterInput;
  industry?: IIndustryFilterInput;
  memberCompanies?: IListFilterInputTypeOfMemberCompanyFilterInput;
  projects?: IListFilterInputTypeOfProjectFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableInt32OperationFilterInput {
  eq?: number;
  neq?: number;
  in?: Array<number>;
  nin?: Array<number>;
  gt?: number;
  ngt?: number;
  gte?: number;
  ngte?: number;
  lt?: number;
  nlt?: number;
  lte?: number;
  nlte?: number;
}

export interface ICountryFilterInput {
  and?: Array<ICountryFilterInput>;
  or?: Array<ICountryFilterInput>;
  name?: IStringOperationFilterInput;
  code?: IStringOperationFilterInput;
  currencyId?: IComparableGuidOperationFilterInput;
  currency?: ICurrencyFilterInput;
  profile?: IListFilterInputTypeOfProfileFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface ICurrencyFilterInput {
  and?: Array<ICurrencyFilterInput>;
  or?: Array<ICurrencyFilterInput>;
  name?: IStringOperationFilterInput;
  symbol?: IStringOperationFilterInput;
  code?: IStringOperationFilterInput;
  exchangeRate?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableDateTimeOperationFilterInput {
  eq?: IDateTime;
  neq?: IDateTime;
  in?: Array<IDateTime>;
  nin?: Array<IDateTime>;
  gt?: IDateTime;
  ngt?: IDateTime;
  gte?: IDateTime;
  ngte?: IDateTime;
  lt?: IDateTime;
  nlt?: IDateTime;
  lte?: IDateTime;
  nlte?: IDateTime;
}

/**
 * The `DateTime` scalar represents an ISO-8601 compliant date time type.
 */
export type IDateTime = any;

export interface IListFilterInputTypeOfProfileFilterInput {
  all?: IProfileFilterInput;
  none?: IProfileFilterInput;
  some?: IProfileFilterInput;
  any?: boolean;
}

export interface IProfileFilterInput {
  and?: Array<IProfileFilterInput>;
  or?: Array<IProfileFilterInput>;
  firstName?: IStringOperationFilterInput;
  lastName?: IStringOperationFilterInput;
  photo?: IStringOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  member?: IMemberFilterInput;
  countryId?: IComparableGuidOperationFilterInput;
  country?: ICountryFilterInput;
  phone?: IStringOperationFilterInput;
  cURP?: IStringOperationFilterInput;
  rFC?: IStringOperationFilterInput;
  nSS?: IStringOperationFilterInput;
  infonavitCredit?: IStringOperationFilterInput;
  nationality?: IStringOperationFilterInput;
  age?: IComparableInt32OperationFilterInput;
  gender?: INullableOfGenderOperationFilterInput;
  dateOfBirth?: IComparableNullableOfDateTimeOperationFilterInput;
  maritalStatus?: INullableOfMaritalStatusOperationFilterInput;
  biography?: IStringOperationFilterInput;
  siteLogo?: IStringOperationFilterInput;
  siteUrl?: IStringOperationFilterInput;
  quatorProfileId?: IComparableNullableOfGuidOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMemberFilterInput {
  and?: Array<IMemberFilterInput>;
  or?: Array<IMemberFilterInput>;
  email?: IStringOperationFilterInput;
  recoverToken?: IStringOperationFilterInput;
  recoverRegister?: IComparableDateTimeOperationFilterInput;
  isActive?: IBooleanOperationFilterInput;
  firstTime?: IBooleanOperationFilterInput;
  loginCount?: IComparableInt32OperationFilterInput;
  rFC?: IStringOperationFilterInput;
  businessName?: IStringOperationFilterInput;
  memberCompanies?: IListFilterInputTypeOfMemberCompanyFilterInput;
  memberRoles?: IListFilterInputTypeOfMemberRoleFilterInput;
  memberProjects?: IListFilterInputTypeOfMemberProjectFilterInput;
  profile?: IProfileFilterInput;
  lastLogin?: IComparableNullableOfDateTimeOperationFilterInput;
  groups?: IListFilterInputTypeOfGroupFilterInput;
  taxonomies?: IListFilterInputTypeOfMemberTaxonomyFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfMemberCompanyFilterInput {
  all?: IMemberCompanyFilterInput;
  none?: IMemberCompanyFilterInput;
  some?: IMemberCompanyFilterInput;
  any?: boolean;
}

export interface IMemberCompanyFilterInput {
  and?: Array<IMemberCompanyFilterInput>;
  or?: Array<IMemberCompanyFilterInput>;
  companyId?: IComparableGuidOperationFilterInput;
  company?: ICompanyFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  member?: IMemberFilterInput;
  isDefault?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfMemberRoleFilterInput {
  all?: IMemberRoleFilterInput;
  none?: IMemberRoleFilterInput;
  some?: IMemberRoleFilterInput;
  any?: boolean;
}

export interface IMemberRoleFilterInput {
  and?: Array<IMemberRoleFilterInput>;
  or?: Array<IMemberRoleFilterInput>;
  companyId?: IComparableGuidOperationFilterInput;
  company?: ICompanyFilterInput;
  roleId?: IComparableGuidOperationFilterInput;
  role?: IRoleFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  member?: IMemberFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IRoleFilterInput {
  and?: Array<IRoleFilterInput>;
  or?: Array<IRoleFilterInput>;
  name?: IStringOperationFilterInput;
  codeName?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  memberRoles?: IListFilterInputTypeOfMemberRoleFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfMemberProjectFilterInput {
  all?: IMemberProjectFilterInput;
  none?: IMemberProjectFilterInput;
  some?: IMemberProjectFilterInput;
  any?: boolean;
}

export interface IMemberProjectFilterInput {
  and?: Array<IMemberProjectFilterInput>;
  or?: Array<IMemberProjectFilterInput>;
  memberId?: IComparableGuidOperationFilterInput;
  member?: IMemberFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  project?: IProjectFilterInput;
  memberProjectRoleProject?: IMemberProjectRoleProjectFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMemberProjectRoleProjectFilterInput {
  and?: Array<IMemberProjectRoleProjectFilterInput>;
  or?: Array<IMemberProjectRoleProjectFilterInput>;
  memberProjectId?: IComparableGuidOperationFilterInput;
  memberProject?: IMemberProjectFilterInput;
  projectRoleId?: IComparableGuidOperationFilterInput;
  projectRole?: IProjectRoleFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IProjectRoleFilterInput {
  and?: Array<IProjectRoleFilterInput>;
  or?: Array<IProjectRoleFilterInput>;
  name?: IStringOperationFilterInput;
  codeName?: IStringOperationFilterInput;
  label?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  isActive?: IBooleanOperationFilterInput;
  permission?: IPermissionFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  project?: IProjectFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IPermissionFilterInput {
  and?: Array<IPermissionFilterInput>;
  or?: Array<IPermissionFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  project?: IProjectFilterInput;
  projectRoleId?: IComparableGuidOperationFilterInput;
  projectRole?: IProjectRoleFilterInput;
  rules?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableNullableOfDateTimeOperationFilterInput {
  eq?: IDateTime;
  neq?: IDateTime;
  in?: Array<IDateTime | null>;
  nin?: Array<IDateTime | null>;
  gt?: IDateTime;
  ngt?: IDateTime;
  gte?: IDateTime;
  ngte?: IDateTime;
  lt?: IDateTime;
  nlt?: IDateTime;
  lte?: IDateTime;
  nlte?: IDateTime;
}

export interface IListFilterInputTypeOfGroupFilterInput {
  all?: IGroupFilterInput;
  none?: IGroupFilterInput;
  some?: IGroupFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfMemberTaxonomyFilterInput {
  all?: IMemberTaxonomyFilterInput;
  none?: IMemberTaxonomyFilterInput;
  some?: IMemberTaxonomyFilterInput;
  any?: boolean;
}

export interface IMemberTaxonomyFilterInput {
  and?: Array<IMemberTaxonomyFilterInput>;
  or?: Array<IMemberTaxonomyFilterInput>;
  memberId?: IComparableGuidOperationFilterInput;
  member?: IMemberFilterInput;
  taxonomyId?: IComparableGuidOperationFilterInput;
}

export interface INullableOfGenderOperationFilterInput {
  eq?: IGender;
  neq?: IGender;
  in?: Array<IGender | null>;
  nin?: Array<IGender | null>;
}

export const enum IGender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
  UNKNOWN = 'UNKNOWN',
}

export interface INullableOfMaritalStatusOperationFilterInput {
  eq?: IMaritalStatus;
  neq?: IMaritalStatus;
  in?: Array<IMaritalStatus | null>;
  nin?: Array<IMaritalStatus | null>;
}

export const enum IMaritalStatus {
  DIVORCED = 'DIVORCED',
  MARRIED = 'MARRIED',
  SINGLE = 'SINGLE',
  SEPARATED = 'SEPARATED',
  WIDOWED = 'WIDOWED',
  UNKNOWN = 'UNKNOWN',
}

export interface IListFilterInputTypeOfProjectRoleFilterInput {
  all?: IProjectRoleFilterInput;
  none?: IProjectRoleFilterInput;
  some?: IProjectRoleFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfMemberFilterInput {
  all?: IMemberFilterInput;
  none?: IMemberFilterInput;
  some?: IMemberFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfGroupTaxonomyFilterInput {
  all?: IGroupTaxonomyFilterInput;
  none?: IGroupTaxonomyFilterInput;
  some?: IGroupTaxonomyFilterInput;
  any?: boolean;
}

export interface IGroupTaxonomyFilterInput {
  and?: Array<IGroupTaxonomyFilterInput>;
  or?: Array<IGroupTaxonomyFilterInput>;
  taxonomyId?: IComparableGuidOperationFilterInput;
  groupId?: IComparableGuidOperationFilterInput;
  group?: IGroupFilterInput;
}

export interface IGroupSortInput {
  projectId?: ISortEnumType;
  project?: IProjectSortInput;
  name?: ISortEnumType;
  description?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export const enum ISortEnumType {
  ASC = 'ASC',
  DESC = 'DESC',
}

export interface IProjectSortInput {
  name?: ISortEnumType;
  description?: ISortEnumType;
  logo?: ISortEnumType;
  tagLine?: ISortEnumType;
  isReady?: ISortEnumType;
  url?: ISortEnumType;
  industryId?: ISortEnumType;
  industry?: IIndustrySortInput;
  companyId?: ISortEnumType;
  company?: ICompanySortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IIndustrySortInput {
  name?: ISortEnumType;
  slug?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ICompanySortInput {
  name?: ISortEnumType;
  numberEmployees?: ISortEnumType;
  countryId?: ISortEnumType;
  country?: ICountrySortInput;
  photo?: ISortEnumType;
  tagLine?: ISortEnumType;
  industryId?: ISortEnumType;
  industry?: IIndustrySortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ICountrySortInput {
  name?: ISortEnumType;
  code?: ISortEnumType;
  currencyId?: ISortEnumType;
  currency?: ICurrencySortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ICurrencySortInput {
  name?: ISortEnumType;
  symbol?: ISortEnumType;
  code?: ISortEnumType;
  exchangeRate?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IGroupCollectionSegment {
  items?: Array<IGroup>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IGroup {
  projectId: IUUID;
  project: IProject;
  name: string;
  description: string;
  members?: Array<IMember>;
  groupTaxonomies?: Array<IGroupTaxonomy>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IProject {
  name: string;
  description: string;
  logo: string;
  tagLine: string;
  isReady: boolean;
  url: string;
  industryId?: IUUID;
  industry?: IIndustry;
  companyId: IUUID;
  company: ICompany;
  projectRoles: Array<IProjectRole>;
  memberProjects: Array<IMemberProject>;
  groups: Array<IGroup>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  services?: Array<IServiceHelper | null>;
  shop?: IShop;
  site?: Array<IConfiguration | null>;
}

export interface IIndustry {
  name: string;
  slug: string;
  projects: Array<IProject>;
  companies: Array<ICompany>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICompany {
  name: string;
  numberEmployees: number;
  countryId: IUUID;
  country: ICountry;
  photo: string;
  tagLine: string;
  industryId?: IUUID;
  industry: IIndustry;
  memberCompanies: Array<IMemberCompany>;
  projects: Array<IProject>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICountry {
  name: string;
  code: string;
  currencyId: IUUID;
  currency: ICurrency;
  profile: Array<IProfile>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICurrency {
  name: string;
  symbol: string;
  code: string;
  exchangeRate: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IProfile {
  firstName: string;
  lastName: string;
  photo: string;
  memberId: IUUID;
  member: IMember;
  countryId: IUUID;
  country: ICountry;
  phone?: string;
  cURP?: string;
  rFC?: string;
  nSS?: string;
  infonavitCredit?: string;
  nationality?: string;
  age: number;
  gender?: IGender;
  dateOfBirth?: IDateTime;
  maritalStatus?: IMaritalStatus;
  biography?: string;
  siteLogo?: string;
  siteUrl?: string;
  quatorProfileId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMember {
  email: string;
  recoverToken: string;
  recoverRegister: IDateTime;
  isActive: boolean;
  firstTime: boolean;
  loginCount: number;
  rFC: string;
  businessName: string;
  memberCompanies?: Array<IMemberCompany>;
  memberRoles?: Array<IMemberRole>;
  memberProjects?: Array<IMemberProject>;
  profile?: IProfile;
  lastLogin?: IDateTime;
  groups?: Array<IGroup>;
  taxonomies?: Array<IMemberTaxonomy>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  listEventDetails?: Array<IEventDetail | null>;
  listFisicExams?: Array<IFisicExam | null>;
  listMedicalBackgrounds?: Array<IMedicalBackground | null>;
  listMedicRecipes?: Array<IMedicRecipe | null>;
  listPatientNotes?: Array<IPacientNote | null>;
  listVitalSigns?: Array<IVitalSign | null>;
  listVaccines?: Array<IVaccine | null>;
  files?: Array<IFile | null>;
  sharedFiles?: Array<ISharedFile | null>;
  sharedFolders?: Array<ISharedFolder | null>;
  hiring?: Array<IHiring | null>;
  shift?: Array<IShift | null>;
}

export interface IMemberCompany {
  companyId: IUUID;
  company: ICompany;
  memberId: IUUID;
  member: IMember;
  isDefault: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMemberRole {
  companyId: IUUID;
  company: ICompany;
  roleId: IUUID;
  role: IRole;
  memberId: IUUID;
  member: IMember;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IRole {
  name: string;
  codeName: string;
  description: string;
  memberRoles: Array<IMemberRole>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMemberProject {
  memberId: IUUID;
  member: IMember;
  projectId: IUUID;
  project: IProject;
  memberProjectRoleProject?: IMemberProjectRoleProject;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMemberProjectRoleProject {
  memberProjectId: IUUID;
  memberProject: IMemberProject;
  projectRoleId: IUUID;
  projectRole: IProjectRole;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IProjectRole {
  name: string;
  codeName: string;
  label?: string;
  description?: string;
  isActive: boolean;
  permission?: IPermission;
  projectId: IUUID;
  project: IProject;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IPermission {
  projectId: IUUID;
  project: IProject;
  projectRoleId: IUUID;
  projectRole: IProjectRole;
  rules: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMemberTaxonomy {
  memberId: IUUID;
  member: IMember;
  taxonomyId: IUUID;
}

export interface IEventDetail {
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  subTotal: IDecimal;
  descuento: IDecimal;
  tax: IDecimal;
  total: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

/**
 * The built-in `Decimal` scalar type.
 */
export type IDecimal = any;

export interface IFisicExam {
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  title?: string;
  content: string;
  isVisible: boolean;
  position?: number;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IMedicalBackground {
  format?: IFormat;
  projectId: IUUID;
  formatId?: IUUID;
  label?: string;
  isVisible: boolean;
  position: number;
  pacientMedicalBackground?: IPacientMedicalBackground;
  medicalBackgroundDetails: Array<IMedicalBackgroundDetail>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IFormat {
  projectId: IUUID;
  memberId: IUUID;
  eventTypeId: IUUID;
  nameFormat?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IPacientMedicalBackground {
  medicalBackgroundDetail?: IMedicalBackgroundDetail;
  medicalBackgroundDetailId: IUUID;
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  text?: string;
  isResponse?: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMedicalBackgroundDetail {
  medicalBackground?: IMedicalBackground;
  clinicHistoryMedicalBackgroundDetails?: Array<IClinicHistoryMedicalBackgroundDetail>;
  projectId: IUUID;
  medicalBackgroundId: IUUID;
  label: string;
  backgroundTypeOption?: IBackgroundTypesOptions;
  isOption?: boolean;
  isVisible?: boolean;
  position: number;
  pacientMedicalBackgrounds?: Array<IPacientMedicalBackground>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IClinicHistoryMedicalBackgroundDetail {
  medicalBackgroundDetail?: IMedicalBackgroundDetail;
  medicalBackgroundDetailId: IUUID;
  backgroundType: IBackgroundTypesOptions;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export const enum IBackgroundTypesOptions {
  INPUTTEXT = 'INPUTTEXT',
  CHECKBOX = 'CHECKBOX',
  RADIOINPUT = 'RADIOINPUT',
  TEXTEDITOR = 'TEXTEDITOR',
}

export interface IPacientMedicalBackgroundFilterInput {
  and?: Array<IPacientMedicalBackgroundFilterInput>;
  or?: Array<IPacientMedicalBackgroundFilterInput>;
  medicalBackgroundDetailId?: IComparableGuidOperationFilterInput;
  medicalBackgroundDetail?: IMedicalBackgroundDetailFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  text?: IStringOperationFilterInput;
  isResponse?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMedicalBackgroundDetailFilterInput {
  and?: Array<IMedicalBackgroundDetailFilterInput>;
  or?: Array<IMedicalBackgroundDetailFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  medicalBackgroundId?: IComparableGuidOperationFilterInput;
  medicalBackground?: IMedicalBackgroundFilterInput;
  label?: IStringOperationFilterInput;
  backgroundTypeOption?: INullableOfBackgroundTypesOptionsOperationFilterInput;
  isOption?: IBooleanOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  clinicHistoryMedicalBackgroundDetails?: IListFilterInputTypeOfClinicHistoryMedicalBackgroundDetailFilterInput;
  pacientMedicalBackgrounds?: IListFilterInputTypeOfPacientMedicalBackgroundFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMedicalBackgroundFilterInput {
  and?: Array<IMedicalBackgroundFilterInput>;
  or?: Array<IMedicalBackgroundFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  formatId?: IComparableNullableOfGuidOperationFilterInput;
  format?: IFormatFilterInput;
  label?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  pacientMedicalBackground?: IPacientMedicalBackgroundFilterInput;
  medicalBackgroundDetails?: IListFilterInputTypeOfMedicalBackgroundDetailFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IFormatFilterInput {
  and?: Array<IFormatFilterInput>;
  or?: Array<IFormatFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  eventTypeId?: IComparableGuidOperationFilterInput;
  nameFormat?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfMedicalBackgroundDetailFilterInput {
  all?: IMedicalBackgroundDetailFilterInput;
  none?: IMedicalBackgroundDetailFilterInput;
  some?: IMedicalBackgroundDetailFilterInput;
  any?: boolean;
}

export interface INullableOfBackgroundTypesOptionsOperationFilterInput {
  eq?: IBackgroundTypesOptions;
  neq?: IBackgroundTypesOptions;
  in?: Array<IBackgroundTypesOptions | null>;
  nin?: Array<IBackgroundTypesOptions | null>;
}

export interface IListFilterInputTypeOfClinicHistoryMedicalBackgroundDetailFilterInput {
  all?: IClinicHistoryMedicalBackgroundDetailFilterInput;
  none?: IClinicHistoryMedicalBackgroundDetailFilterInput;
  some?: IClinicHistoryMedicalBackgroundDetailFilterInput;
  any?: boolean;
}

export interface IClinicHistoryMedicalBackgroundDetailFilterInput {
  and?: Array<IClinicHistoryMedicalBackgroundDetailFilterInput>;
  or?: Array<IClinicHistoryMedicalBackgroundDetailFilterInput>;
  medicalBackgroundDetailId?: IComparableGuidOperationFilterInput;
  medicalBackgroundDetail?: IMedicalBackgroundDetailFilterInput;
  backgroundType?: IBackgroundTypesOptionsOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IBackgroundTypesOptionsOperationFilterInput {
  eq?: IBackgroundTypesOptions;
  neq?: IBackgroundTypesOptions;
  in?: Array<IBackgroundTypesOptions>;
  nin?: Array<IBackgroundTypesOptions>;
}

export interface IListFilterInputTypeOfPacientMedicalBackgroundFilterInput {
  all?: IPacientMedicalBackgroundFilterInput;
  none?: IPacientMedicalBackgroundFilterInput;
  some?: IPacientMedicalBackgroundFilterInput;
  any?: boolean;
}

export interface IMedicRecipe {
  projectId: IUUID;
  memberId: IUUID;
  profesionalCell: string;
  speciality: string;
  institute: string;
  electronicSing: string;
  isCorrect: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IPacientNote {
  memberId: IUUID;
  projectId: IUUID;
  eventId: IUUID;
  note: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IVitalSign {
  projectId: IUUID;
  labelNameVt?: string;
  isVisible?: boolean;
  position?: number;
  patientVitalSignsResponse?: IPatientVitalSignsResponse;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IPatientVitalSignsResponse {
  vitalSignId: IUUID;
  vitalSign?: IVitalSign;
  eventId: IUUID;
  memberId: IUUID;
  value?: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVaccine {
  projectId: IUUID;
  memberId: IUUID;
  nameVac: string;
  dateAplicationVac: IDateTime;
  nextVac?: IDateTime;
  notesVac?: string;
  position?: number;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IFile {
  folderId: IUUID;
  folder?: IFolder;
  memberId: IUUID;
  isProfile?: boolean;
  token?: string;
  name?: string;
  description?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface IFolder {
  projectId: IUUID;
  memberId: IUUID;
  label: string;
  background: string;
  parentId?: IUUID;
  isPersonal?: boolean;
  parent?: IFolder;
  subFolders?: Array<IFolder>;
  files?: Array<IFile>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ISharedFile {
  fileId: IUUID;
  file?: IFile;
  memberId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ISharedFolder {
  folderId: IUUID;
  folder?: IFolder;
  memberId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IHiring {
  hiringType: IHiringType;
  projectRoleId: IUUID;
  memberId: IUUID;
  dateStart?: IDateTime;
  dateEnd?: IDateTime;
  description?: string;
  amount: IDecimal;
  amountWritted?: string;
  amountPerHour?: IDecimal;
  benefits?: IEnumBenefits;
  enumHiringType?: IEnumHiringType;
  hiringTypeId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IHiringType {
  hirings: Array<IHiring>;
  projectId: IUUID;
  name: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export const enum IEnumBenefits {
  ANOTHER = 'ANOTHER',
  LAW_BENEFITS = 'LAW_BENEFITS',
}

export const enum IEnumHiringType {
  DETERMINATED = 'DETERMINATED',
  UNDETERMINATED = 'UNDETERMINATED',
  TRIAL = 'TRIAL',
  TRAINING = 'TRAINING',
  SEASON = 'SEASON',
}

export interface IShift {
  day: IDay;
  projectId: IUUID;
  memberId: IUUID;
  timeStart: ITimeSpan;
  timeEnd: ITimeSpan;
  dayId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDay {
  shifts: Array<IShift>;
  name: string;
  codeDay: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

/**
 * The `TimeSpan` scalar represents an ISO-8601 compliant duration type.
 */
export type ITimeSpan = any;

export interface IServiceHelper {
  id: IUUID;
  name: string;
  label?: string;
  isActive: boolean;
  codeName: string;
  image?: string;
  description?: string;
  priority: number;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  projectMicroservices: Array<IProjectMicroservice>;
  functions: Array<IFunction>;
}

export interface IProjectMicroservice {
  microserviceId: IUUID;
  microservice?: IMicroservice;
  isActive: boolean;
  label?: string;
  projectId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMicroservice {
  name: string;
  codeName: string;
  image: string;
  description: string;
  priority: number;
  isPublic: boolean;
  projectMicroservices: Array<IProjectMicroservice>;
  functions: Array<IFunction>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IFunction {
  name: string;
  codeName: string;
  functionType: IFunctionType;
  microserviceId: IUUID;
  microservice: IMicroservice;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export const enum IFunctionType {
  WRITE = 'WRITE',
  READER = 'READER',
  CUSTOM = 'CUSTOM',
  DISABLE = 'DISABLE',
}

export interface IShop {
  projectId: IUUID;
  shopType: IShopType;
  profileUrl: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export const enum IShopType {
  IXULABS = 'IXULABS',
  MERCADOLIBRE = 'MERCADOLIBRE',
}

export interface IConfiguration {
  projectId: IUUID;
  key: string;
  value: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IGroupTaxonomy {
  taxonomyId: IUUID;
  groupId: IUUID;
  group: IGroup;
  taxonomy?: ITaxonomy;
}

export interface ITaxonomy {
  projectId: IUUID;
  name: string;
  slug: string;
  description?: string;
  termGroup: string;
  photo?: string;
  tagLine?: string;
  tagLine2?: string;
  parentId?: IUUID;
  parent?: ITaxonomy;
  subCategories: Array<ITaxonomy>;
  isPublic: boolean;
  articles?: Array<IArticle>;
  groupArticles?: Array<IArticle>;
  products?: Array<IProduct>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IArticle {
  projectId: IUUID;
  memberId: IUUID;
  title: string;
  photo: string;
  slug: string;
  resume: string;
  content: string;
  active: boolean;
  views: number;
  status: string;
  releaseDate: IDateTime;
  seoTitle: string;
  seoDescription: string;
  seoKeywords: string;
  structuredMarking: string;
  imageAlt: string;
  seoArticle?: string;
  typeContent?: ITypeContent;
  embedContent?: string;
  groupId?: IUUID;
  group?: ITaxonomy;
  subCategories?: Array<ITaxonomy>;
  categories?: Array<ITaxonomy>;
  tags?: Array<ITaxonomy>;
  surveys: Array<ISurvey>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  author?: string;
}

export const enum ITypeContent {
  ARTICLE = 'ARTICLE',
  PODCAST = 'PODCAST',
  VIDEO = 'VIDEO',
}

export interface ISurvey {
  title: string;
  description: string;
  isActive: boolean;
  thankYouMessage: string;
  articles: Array<IArticle>;
  questions: Array<IQuestion>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuestion {
  surveyId: IUUID;
  survey: ISurvey;
  title: string;
  type: IQuestionType;
  image: string;
  isRequired: boolean;
  position: number;
  allowsFileUpload: boolean;
  options: Array<IOption>;
  answers?: Array<IAnswer>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export const enum IQuestionType {
  SINGLE = 'SINGLE',
  OPEN = 'OPEN',
  MULTIPLE = 'MULTIPLE',
}

export interface IOption {
  questionId: IUUID;
  question: IQuestion;
  title: string;
  position: number;
  count: number;
  answers?: Array<IAnswer>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IAnswer {
  memberId: IUUID;
  questionId: IUUID;
  question: IQuestion;
  optionId?: IUUID;
  option?: IOption;
  uploadFile?: string;
  responseText: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: string;
}

export interface IProduct {
  projectId: IUUID;
  memberId: IUUID;
  title: string;
  photo: string;
  slug: string;
  sku: string;
  price: IDecimal;
  offerPrice: IDecimal;
  stock: number;
  active: boolean;
  shippingType: string;
  shippingPrice: IDecimal;
  description: string;
  publishDate: IDateTime;
  views: number;
  status: IProductStatus;
  seoProduct: string;
  subCategories?: Array<ITaxonomy>;
  categories?: Array<ITaxonomy>;
  details: Array<IProductDetail>;
  images: Array<IImage>;
  shopType: IShopType;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export const enum IProductStatus {
  DRAFT = 'DRAFT',
  PUBLISHED = 'PUBLISHED',
  INACTIVE = 'INACTIVE',
  PROGRAMMED = 'PROGRAMMED',
}

export interface IProductDetail {
  productId: IUUID;
  product: IProduct;
  key: string;
  value: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IImage {
  projectId: IUUID;
  original: string;
  title: string;
  products: Array<IProduct>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

/**
 * Information about the offset pagination.
 */
export interface ICollectionSegmentInfo {
  /**
   * Indicates whether more items exist following the set defined by the clients arguments.
   */
  hasNextPage: boolean;

  /**
   * Indicates whether more items exist prior the set defined by the clients arguments.
   */
  hasPreviousPage: boolean;
}

export interface IMyUrl {
  url: string;
}

export interface IMemberProjectSortInput {
  memberId?: ISortEnumType;
  member?: IMemberSortInput;
  projectId?: ISortEnumType;
  project?: IProjectSortInput;
  memberProjectRoleProject?: IMemberProjectRoleProjectSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMemberSortInput {
  email?: ISortEnumType;
  recoverToken?: ISortEnumType;
  recoverRegister?: ISortEnumType;
  isActive?: ISortEnumType;
  firstTime?: ISortEnumType;
  loginCount?: ISortEnumType;
  rFC?: ISortEnumType;
  businessName?: ISortEnumType;
  profile?: IProfileSortInput;
  lastLogin?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IProfileSortInput {
  firstName?: ISortEnumType;
  lastName?: ISortEnumType;
  photo?: ISortEnumType;
  memberId?: ISortEnumType;
  member?: IMemberSortInput;
  countryId?: ISortEnumType;
  country?: ICountrySortInput;
  phone?: ISortEnumType;
  cURP?: ISortEnumType;
  rFC?: ISortEnumType;
  nSS?: ISortEnumType;
  infonavitCredit?: ISortEnumType;
  nationality?: ISortEnumType;
  age?: ISortEnumType;
  gender?: ISortEnumType;
  dateOfBirth?: ISortEnumType;
  maritalStatus?: ISortEnumType;
  biography?: ISortEnumType;
  siteLogo?: ISortEnumType;
  siteUrl?: ISortEnumType;
  quatorProfileId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMemberProjectRoleProjectSortInput {
  memberProjectId?: ISortEnumType;
  memberProject?: IMemberProjectSortInput;
  projectRoleId?: ISortEnumType;
  projectRole?: IProjectRoleSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IProjectRoleSortInput {
  name?: ISortEnumType;
  codeName?: ISortEnumType;
  label?: ISortEnumType;
  description?: ISortEnumType;
  isActive?: ISortEnumType;
  permission?: IPermissionSortInput;
  projectId?: ISortEnumType;
  project?: IProjectSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPermissionSortInput {
  projectId?: ISortEnumType;
  project?: IProjectSortInput;
  projectRoleId?: ISortEnumType;
  projectRole?: IProjectRoleSortInput;
  rules?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMemberProjectCollectionSegment {
  items?: Array<IMemberProject>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IMemberCollectionSegment {
  items?: Array<IMember>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

/**
 * A connection to a list of items.
 */
export interface IProjectsInfiniteConnection {
  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges?: Array<IProjectsInfiniteEdge>;

  /**
   * A flattened list of the nodes.
   */
  nodes?: Array<IProject>;
  totalCount: number;
}

/**
 * Information about pagination in a connection.
 */
export interface IPageInfo {
  /**
   * Indicates whether more edges exist following the set defined by the clients arguments.
   */
  hasNextPage: boolean;

  /**
   * Indicates whether more edges exist prior the set defined by the clients arguments.
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor?: string;

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor?: string;
}

/**
 * An edge in a connection.
 */
export interface IProjectsInfiniteEdge {
  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IProject;
}

export interface IMemberChat {
  email: string;
  name: string;
  lastName: string;
  photo: string;
}

export interface IMemberFullName {
  fullName?: string;
}

export interface ICustomMemberDto {
  roleName?: string;
  roleCode?: string;
  photo?: string;
  email?: string;
  fullName?: string;
  id: IUUID;
  birthday?: IDateTime;
}

export interface IMessageFix {
  value: string;
}

export interface IScheduleManager {
  projectId: IUUID;
  memberId: IUUID;
  eventTypeId: IUUID;
  eventType?: IEventType;
  schedules?: Array<ISchedule>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IEventType {
  projectId: IUUID;
  name: string;
  price?: IDecimal;
  subEventTypes?: Array<ISubEventType>;
  image?: string;
  description?: string;
  events: Array<IEvent>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ISubEventType {
  name: string;
  price: IDecimal;
  eventTypes?: Array<IEventType>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IEvent {
  projectId: IUUID;
  memberId: IUUID;
  title?: string;
  location?: string;
  color?: string;
  description: string;
  file: string;
  roomId?: string;
  eventDate: IDateTime;
  finishDate?: IDateTime;
  eventMode?: IEventMode;
  eventSessionId?: IUUID;
  eventSession?: IEventSession;
  eventMembers?: Array<IEventMember>;
  sendDetails: boolean;
  sendRemember: boolean;
  totalPrice?: IDecimal;
  discount?: IDecimal;
  visibility?: IEventVisibility;
  eventCharges?: Array<IEventCharge>;
  eventTypeId?: IUUID;
  eventType?: IEventType;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  listDiagnostic?: Array<IDiagnostic | null>;
}

export const enum IEventMode {
  ONLINE = 'ONLINE',
  FACE_TO_FACE = 'FACE_TO_FACE',
}

export interface IEventSession {
  projectId: IUUID;
  title?: string;
  image?: string;
  price: IDecimal;
  description?: string;
  duration: number;
  eventMode?: IEventMode;
  event?: IEvent;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IEventMember {
  eventId: IUUID;
  event: IEvent;
  memberId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: ICustomMemberDto;
}

export const enum IEventVisibility {
  PUBLIC = 'PUBLIC',
  PRIVATE = 'PRIVATE',
}

export interface IEventCharge {
  eventId: IUUID;
  event?: IEvent;
  price?: IDecimal;
  description?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDiagnostic {
  medicines?: Array<IMedicine>;
  eventId: IUUID;
  projectId: IUUID;
  memberId: IUUID;
  content?: string;
  isVisible: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMedicine {
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  medicineName: string;
  take: string;
  frecuency: string;
  duration: string;
  isVisible: boolean;
  position: number;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ISchedule {
  scheduleManagerId: IUUID;
  scheduleManager?: IScheduleManager;
  day: string;
  turn?: Array<ITurn>;
  weekDay: number;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ITurn {
  scheduleId: IUUID;
  schedule?: ISchedule;
  timeEnd: ITimeSpan;
  timeStart: ITimeSpan;
  timeStartString: string;
  timeEndString: string;
  isActive?: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IEventFilterInput {
  and?: Array<IEventFilterInput>;
  or?: Array<IEventFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  title?: IStringOperationFilterInput;
  location?: IStringOperationFilterInput;
  color?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  file?: IStringOperationFilterInput;
  roomId?: IStringOperationFilterInput;
  eventDate?: IComparableDateTimeOperationFilterInput;
  finishDate?: IComparableNullableOfDateTimeOperationFilterInput;
  eventMode?: INullableOfEventModeOperationFilterInput;
  eventSessionId?: IComparableNullableOfGuidOperationFilterInput;
  eventSession?: IEventSessionFilterInput;
  eventMembers?: IListFilterInputTypeOfEventMemberFilterInput;
  sendDetails?: IBooleanOperationFilterInput;
  sendRemember?: IBooleanOperationFilterInput;
  totalPrice?: IComparableNullableOfDecimalOperationFilterInput;
  discount?: IComparableNullableOfDecimalOperationFilterInput;
  visibility?: INullableOfEventVisibilityOperationFilterInput;
  eventCharges?: IListFilterInputTypeOfEventChargeFilterInput;
  eventTypeId?: IComparableNullableOfGuidOperationFilterInput;
  eventType?: IEventTypeFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface INullableOfEventModeOperationFilterInput {
  eq?: IEventMode;
  neq?: IEventMode;
  in?: Array<IEventMode | null>;
  nin?: Array<IEventMode | null>;
}

export interface IEventSessionFilterInput {
  and?: Array<IEventSessionFilterInput>;
  or?: Array<IEventSessionFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  title?: IStringOperationFilterInput;
  image?: IStringOperationFilterInput;
  price?: IComparableDecimalOperationFilterInput;
  description?: IStringOperationFilterInput;
  duration?: IComparableInt32OperationFilterInput;
  eventMode?: INullableOfEventModeOperationFilterInput;
  event?: IEventFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableDecimalOperationFilterInput {
  eq?: IDecimal;
  neq?: IDecimal;
  in?: Array<IDecimal>;
  nin?: Array<IDecimal>;
  gt?: IDecimal;
  ngt?: IDecimal;
  gte?: IDecimal;
  ngte?: IDecimal;
  lt?: IDecimal;
  nlt?: IDecimal;
  lte?: IDecimal;
  nlte?: IDecimal;
}

export interface IListFilterInputTypeOfEventMemberFilterInput {
  all?: IEventMemberFilterInput;
  none?: IEventMemberFilterInput;
  some?: IEventMemberFilterInput;
  any?: boolean;
}

export interface IEventMemberFilterInput {
  and?: Array<IEventMemberFilterInput>;
  or?: Array<IEventMemberFilterInput>;
  eventId?: IComparableGuidOperationFilterInput;
  event?: IEventFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableNullableOfDecimalOperationFilterInput {
  eq?: IDecimal;
  neq?: IDecimal;
  in?: Array<IDecimal | null>;
  nin?: Array<IDecimal | null>;
  gt?: IDecimal;
  ngt?: IDecimal;
  gte?: IDecimal;
  ngte?: IDecimal;
  lt?: IDecimal;
  nlt?: IDecimal;
  lte?: IDecimal;
  nlte?: IDecimal;
}

export interface INullableOfEventVisibilityOperationFilterInput {
  eq?: IEventVisibility;
  neq?: IEventVisibility;
  in?: Array<IEventVisibility | null>;
  nin?: Array<IEventVisibility | null>;
}

export interface IListFilterInputTypeOfEventChargeFilterInput {
  all?: IEventChargeFilterInput;
  none?: IEventChargeFilterInput;
  some?: IEventChargeFilterInput;
  any?: boolean;
}

export interface IEventChargeFilterInput {
  and?: Array<IEventChargeFilterInput>;
  or?: Array<IEventChargeFilterInput>;
  eventId?: IComparableGuidOperationFilterInput;
  event?: IEventFilterInput;
  price?: IComparableNullableOfDecimalOperationFilterInput;
  description?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IEventTypeFilterInput {
  and?: Array<IEventTypeFilterInput>;
  or?: Array<IEventTypeFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  price?: IComparableNullableOfDecimalOperationFilterInput;
  subEventTypes?: IListFilterInputTypeOfSubEventTypeFilterInput;
  image?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  events?: IListFilterInputTypeOfEventFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfSubEventTypeFilterInput {
  all?: ISubEventTypeFilterInput;
  none?: ISubEventTypeFilterInput;
  some?: ISubEventTypeFilterInput;
  any?: boolean;
}

export interface ISubEventTypeFilterInput {
  and?: Array<ISubEventTypeFilterInput>;
  or?: Array<ISubEventTypeFilterInput>;
  name?: IStringOperationFilterInput;
  price?: IComparableDecimalOperationFilterInput;
  eventTypes?: IListFilterInputTypeOfEventTypeFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfEventTypeFilterInput {
  all?: IEventTypeFilterInput;
  none?: IEventTypeFilterInput;
  some?: IEventTypeFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfEventFilterInput {
  all?: IEventFilterInput;
  none?: IEventFilterInput;
  some?: IEventFilterInput;
  any?: boolean;
}

export interface IEventSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  title?: ISortEnumType;
  location?: ISortEnumType;
  color?: ISortEnumType;
  description?: ISortEnumType;
  file?: ISortEnumType;
  roomId?: ISortEnumType;
  eventDate?: ISortEnumType;
  finishDate?: ISortEnumType;
  eventMode?: ISortEnumType;
  eventSessionId?: ISortEnumType;
  eventSession?: IEventSessionSortInput;
  sendDetails?: ISortEnumType;
  sendRemember?: ISortEnumType;
  totalPrice?: ISortEnumType;
  discount?: ISortEnumType;
  visibility?: ISortEnumType;
  eventTypeId?: ISortEnumType;
  eventType?: IEventTypeSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IEventSessionSortInput {
  projectId?: ISortEnumType;
  title?: ISortEnumType;
  image?: ISortEnumType;
  price?: ISortEnumType;
  description?: ISortEnumType;
  duration?: ISortEnumType;
  eventMode?: ISortEnumType;
  event?: IEventSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IEventTypeSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  price?: ISortEnumType;
  image?: ISortEnumType;
  description?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IEventCollectionSegment {
  items?: Array<IEvent>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IConversationReply {
  memberId: IUUID;
  reply: string;
  registerDate: IDateTime;
  status: string;
  conversationId: IUUID;
  conversation: IConversation;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMemberChat;
}

export interface IConversation {
  projectId: IUUID;
  memberOne: IUUID;
  memberTwo: IUUID;
  registerDate: IDateTime;
  status: string;
  replies: Array<IConversationReply>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMemberConversation {
  memberId: IUUID;
  conversationId: IUUID;
  member?: IMemberChat;
}

export interface IQuestionDTO {
  title: string;
  type: IQuestionType;
  image: string;
  options?: Array<IOption>;
  answers?: Array<IAnswer>;
}

export interface IArticleFilterInput {
  and?: Array<IArticleFilterInput>;
  or?: Array<IArticleFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  title?: IStringOperationFilterInput;
  photo?: IStringOperationFilterInput;
  slug?: IStringOperationFilterInput;
  resume?: IStringOperationFilterInput;
  content?: IStringOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  views?: IComparableInt32OperationFilterInput;
  status?: IStringOperationFilterInput;
  releaseDate?: IComparableDateTimeOperationFilterInput;
  seoTitle?: IStringOperationFilterInput;
  seoDescription?: IStringOperationFilterInput;
  seoKeywords?: IStringOperationFilterInput;
  structuredMarking?: IStringOperationFilterInput;
  imageAlt?: IStringOperationFilterInput;
  seoArticle?: IStringOperationFilterInput;
  typeContent?: INullableOfTypeContentOperationFilterInput;
  embedContent?: IStringOperationFilterInput;
  groupId?: IComparableNullableOfGuidOperationFilterInput;
  group?: ITaxonomyFilterInput;
  subCategories?: IListFilterInputTypeOfTaxonomyFilterInput;
  categories?: IListFilterInputTypeOfTaxonomyFilterInput;
  tags?: IListFilterInputTypeOfTaxonomyFilterInput;
  surveys?: IListFilterInputTypeOfSurveyFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface INullableOfTypeContentOperationFilterInput {
  eq?: ITypeContent;
  neq?: ITypeContent;
  in?: Array<ITypeContent | null>;
  nin?: Array<ITypeContent | null>;
}

export interface ITaxonomyFilterInput {
  and?: Array<ITaxonomyFilterInput>;
  or?: Array<ITaxonomyFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  slug?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  termGroup?: IStringOperationFilterInput;
  photo?: IStringOperationFilterInput;
  tagLine?: IStringOperationFilterInput;
  tagLine2?: IStringOperationFilterInput;
  parentId?: IComparableNullableOfGuidOperationFilterInput;
  parent?: ITaxonomyFilterInput;
  subCategories?: IListFilterInputTypeOfTaxonomyFilterInput;
  isPublic?: IBooleanOperationFilterInput;
  articles?: IListFilterInputTypeOfArticleFilterInput;
  groupArticles?: IListFilterInputTypeOfArticleFilterInput;
  products?: IListFilterInputTypeOfProductFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfTaxonomyFilterInput {
  all?: ITaxonomyFilterInput;
  none?: ITaxonomyFilterInput;
  some?: ITaxonomyFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfArticleFilterInput {
  all?: IArticleFilterInput;
  none?: IArticleFilterInput;
  some?: IArticleFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfProductFilterInput {
  all?: IProductFilterInput;
  none?: IProductFilterInput;
  some?: IProductFilterInput;
  any?: boolean;
}

export interface IProductFilterInput {
  and?: Array<IProductFilterInput>;
  or?: Array<IProductFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  title?: IStringOperationFilterInput;
  photo?: IStringOperationFilterInput;
  slug?: IStringOperationFilterInput;
  sku?: IStringOperationFilterInput;
  price?: IComparableDecimalOperationFilterInput;
  offerPrice?: IComparableDecimalOperationFilterInput;
  stock?: IComparableInt32OperationFilterInput;
  active?: IBooleanOperationFilterInput;
  shippingType?: IStringOperationFilterInput;
  shippingPrice?: IComparableDecimalOperationFilterInput;
  description?: IStringOperationFilterInput;
  publishDate?: IComparableDateTimeOperationFilterInput;
  views?: IComparableInt32OperationFilterInput;
  status?: IProductStatusOperationFilterInput;
  seoProduct?: IStringOperationFilterInput;
  subCategories?: IListFilterInputTypeOfTaxonomyFilterInput;
  categories?: IListFilterInputTypeOfTaxonomyFilterInput;
  details?: IListFilterInputTypeOfProductDetailFilterInput;
  images?: IListFilterInputTypeOfImageFilterInput;
  shopType?: IShopTypeOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IProductStatusOperationFilterInput {
  eq?: IProductStatus;
  neq?: IProductStatus;
  in?: Array<IProductStatus>;
  nin?: Array<IProductStatus>;
}

export interface IListFilterInputTypeOfProductDetailFilterInput {
  all?: IProductDetailFilterInput;
  none?: IProductDetailFilterInput;
  some?: IProductDetailFilterInput;
  any?: boolean;
}

export interface IProductDetailFilterInput {
  and?: Array<IProductDetailFilterInput>;
  or?: Array<IProductDetailFilterInput>;
  productId?: IComparableGuidOperationFilterInput;
  product?: IProductFilterInput;
  key?: IStringOperationFilterInput;
  value?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfImageFilterInput {
  all?: IImageFilterInput;
  none?: IImageFilterInput;
  some?: IImageFilterInput;
  any?: boolean;
}

export interface IImageFilterInput {
  and?: Array<IImageFilterInput>;
  or?: Array<IImageFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  original?: IStringOperationFilterInput;
  title?: IStringOperationFilterInput;
  products?: IListFilterInputTypeOfProductFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IShopTypeOperationFilterInput {
  eq?: IShopType;
  neq?: IShopType;
  in?: Array<IShopType>;
  nin?: Array<IShopType>;
}

export interface IListFilterInputTypeOfSurveyFilterInput {
  all?: ISurveyFilterInput;
  none?: ISurveyFilterInput;
  some?: ISurveyFilterInput;
  any?: boolean;
}

export interface ISurveyFilterInput {
  and?: Array<ISurveyFilterInput>;
  or?: Array<ISurveyFilterInput>;
  title?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  isActive?: IBooleanOperationFilterInput;
  thankYouMessage?: IStringOperationFilterInput;
  articles?: IListFilterInputTypeOfArticleFilterInput;
  questions?: IListFilterInputTypeOfQuestionFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuestionFilterInput {
  all?: IQuestionFilterInput;
  none?: IQuestionFilterInput;
  some?: IQuestionFilterInput;
  any?: boolean;
}

export interface IQuestionFilterInput {
  and?: Array<IQuestionFilterInput>;
  or?: Array<IQuestionFilterInput>;
  surveyId?: IComparableGuidOperationFilterInput;
  survey?: ISurveyFilterInput;
  title?: IStringOperationFilterInput;
  type?: IQuestionTypeOperationFilterInput;
  image?: IStringOperationFilterInput;
  isRequired?: IBooleanOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  allowsFileUpload?: IBooleanOperationFilterInput;
  options?: IListFilterInputTypeOfOptionFilterInput;
  answers?: IListFilterInputTypeOfAnswerFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IQuestionTypeOperationFilterInput {
  eq?: IQuiz_QuestionType;
  neq?: IQuiz_QuestionType;
  in?: Array<IQuiz_QuestionType>;
  nin?: Array<IQuiz_QuestionType>;
}

export const enum IQuiz_QuestionType {
  MULTIPLE = 'MULTIPLE',
  OPEN = 'OPEN',
}

export interface IListFilterInputTypeOfOptionFilterInput {
  all?: IOptionFilterInput;
  none?: IOptionFilterInput;
  some?: IOptionFilterInput;
  any?: boolean;
}

export interface IOptionFilterInput {
  and?: Array<IOptionFilterInput>;
  or?: Array<IOptionFilterInput>;
  questionId?: IComparableGuidOperationFilterInput;
  question?: IQuestionFilterInput;
  title?: IStringOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  count?: IComparableInt32OperationFilterInput;
  answers?: IListFilterInputTypeOfAnswerFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfAnswerFilterInput {
  all?: IAnswerFilterInput;
  none?: IAnswerFilterInput;
  some?: IAnswerFilterInput;
  any?: boolean;
}

export interface IAnswerFilterInput {
  and?: Array<IAnswerFilterInput>;
  or?: Array<IAnswerFilterInput>;
  memberId?: IComparableGuidOperationFilterInput;
  questionId?: IComparableGuidOperationFilterInput;
  question?: IQuestionFilterInput;
  optionId?: IComparableNullableOfGuidOperationFilterInput;
  option?: IOptionFilterInput;
  uploadFile?: IStringOperationFilterInput;
  responseText?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IArticleSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  title?: ISortEnumType;
  photo?: ISortEnumType;
  slug?: ISortEnumType;
  resume?: ISortEnumType;
  content?: ISortEnumType;
  active?: ISortEnumType;
  views?: ISortEnumType;
  status?: ISortEnumType;
  releaseDate?: ISortEnumType;
  seoTitle?: ISortEnumType;
  seoDescription?: ISortEnumType;
  seoKeywords?: ISortEnumType;
  structuredMarking?: ISortEnumType;
  imageAlt?: ISortEnumType;
  seoArticle?: ISortEnumType;
  typeContent?: ISortEnumType;
  embedContent?: ISortEnumType;
  groupId?: ISortEnumType;
  group?: ITaxonomySortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ITaxonomySortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  slug?: ISortEnumType;
  description?: ISortEnumType;
  termGroup?: ISortEnumType;
  photo?: ISortEnumType;
  tagLine?: ISortEnumType;
  tagLine2?: ISortEnumType;
  parentId?: ISortEnumType;
  parent?: ITaxonomySortInput;
  isPublic?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

/**
 * A connection to a list of items.
 */
export interface IArticlesConnection {
  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges?: Array<IArticlesEdge>;

  /**
   * A flattened list of the nodes.
   */
  nodes?: Array<IArticle>;
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IArticlesEdge {
  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IArticle;
}

export interface IArticleCollectionSegment {
  items?: Array<IArticle>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IAddress {
  projectId: IUUID;
  memberId: IUUID;
  rFC: string;
  businessName: string;
  addressType: string;
  firstName: string;
  lastName: string;
  countryName: string;
  state: string;
  city: string;
  subUrb: string;
  zipCode: string;
  addressLine1: string;
  addressLine2: string;
  phone: string;
  addressDetails: string;
  isPrincipal: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IProductSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  title?: ISortEnumType;
  photo?: ISortEnumType;
  slug?: ISortEnumType;
  sku?: ISortEnumType;
  price?: ISortEnumType;
  offerPrice?: ISortEnumType;
  stock?: ISortEnumType;
  active?: ISortEnumType;
  shippingType?: ISortEnumType;
  shippingPrice?: ISortEnumType;
  description?: ISortEnumType;
  publishDate?: ISortEnumType;
  views?: ISortEnumType;
  status?: ISortEnumType;
  seoProduct?: ISortEnumType;
  shopType?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IProductCollectionSegment {
  items?: Array<IProduct>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface ITaxonomyCollectionSegment {
  items?: Array<ITaxonomy>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface ISeoDTO {
  seo?: string;
}

export interface IServiceFilterInput {
  and?: Array<IServiceFilterInput>;
  or?: Array<IServiceFilterInput>;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  serviceQuizes?: IListFilterInputTypeOfServiceQuizFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfServiceQuizFilterInput {
  all?: IServiceQuizFilterInput;
  none?: IServiceQuizFilterInput;
  some?: IServiceQuizFilterInput;
  any?: boolean;
}

export interface IServiceQuizFilterInput {
  and?: Array<IServiceQuizFilterInput>;
  or?: Array<IServiceQuizFilterInput>;
  serviceId?: IComparableGuidOperationFilterInput;
  quizId?: IComparableGuidOperationFilterInput;
  service?: IServiceFilterInput;
  quiz?: IQuizFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IQuizFilterInput {
  and?: Array<IQuizFilterInput>;
  or?: Array<IQuizFilterInput>;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  serviceQuizes?: IListFilterInputTypeOfServiceQuizFilterInput;
  quizSections?: IListFilterInputTypeOfQuizSectionFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuizSectionFilterInput {
  all?: IQuizSectionFilterInput;
  none?: IQuizSectionFilterInput;
  some?: IQuizSectionFilterInput;
  any?: boolean;
}

export interface IQuizSectionFilterInput {
  and?: Array<IQuizSectionFilterInput>;
  or?: Array<IQuizSectionFilterInput>;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  quizId?: IComparableGuidOperationFilterInput;
  quiz?: IQuizFilterInput;
  quizQuestions?: IListFilterInputTypeOfQuizQuestionFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuizQuestionFilterInput {
  all?: IQuizQuestionFilterInput;
  none?: IQuizQuestionFilterInput;
  some?: IQuizQuestionFilterInput;
  any?: boolean;
}

export interface IQuizQuestionFilterInput {
  and?: Array<IQuizQuestionFilterInput>;
  or?: Array<IQuizQuestionFilterInput>;
  question?: IStringOperationFilterInput;
  questionType?: IQuestionTypeOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  quizSectionId?: IComparableGuidOperationFilterInput;
  quizSection?: IQuizSectionFilterInput;
  quizQuestionAnswers?: IListFilterInputTypeOfQuizQuestionAnswerFilterInput;
  quizMembers?: IListFilterInputTypeOfQuizMemberFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuizQuestionAnswerFilterInput {
  all?: IQuizQuestionAnswerFilterInput;
  none?: IQuizQuestionAnswerFilterInput;
  some?: IQuizQuestionAnswerFilterInput;
  any?: boolean;
}

export interface IQuizQuestionAnswerFilterInput {
  and?: Array<IQuizQuestionAnswerFilterInput>;
  or?: Array<IQuizQuestionAnswerFilterInput>;
  quizQuestionId?: IComparableGuidOperationFilterInput;
  quizAnswerId?: IComparableGuidOperationFilterInput;
  quizQuestion?: IQuizQuestionFilterInput;
  quizAnswer?: IQuizAnswerFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IQuizAnswerFilterInput {
  and?: Array<IQuizAnswerFilterInput>;
  or?: Array<IQuizAnswerFilterInput>;
  description?: IStringOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  quizQuestionAnswers?: IListFilterInputTypeOfQuizQuestionAnswerFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuizMemberFilterInput {
  all?: IQuizMemberFilterInput;
  none?: IQuizMemberFilterInput;
  some?: IQuizMemberFilterInput;
  any?: boolean;
}

export interface IQuizMemberFilterInput {
  and?: Array<IQuizMemberFilterInput>;
  or?: Array<IQuizMemberFilterInput>;
  quizQuestionId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  quizQuestion?: IQuizQuestionFilterInput;
  quizMemberAnswers?: IListFilterInputTypeOfQuizMemberAnswerFilterInput;
  quizMemberDescriptions?: IListFilterInputTypeOfQuizMemberDescriptionFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuizMemberAnswerFilterInput {
  all?: IQuizMemberAnswerFilterInput;
  none?: IQuizMemberAnswerFilterInput;
  some?: IQuizMemberAnswerFilterInput;
  any?: boolean;
}

export interface IQuizMemberAnswerFilterInput {
  and?: Array<IQuizMemberAnswerFilterInput>;
  or?: Array<IQuizMemberAnswerFilterInput>;
  quizMemberId?: IComparableGuidOperationFilterInput;
  quizAnswerId?: IComparableGuidOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  quizAnswer?: IQuizAnswerFilterInput;
  quizMember?: IQuizMemberFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuizMemberDescriptionFilterInput {
  all?: IQuizMemberDescriptionFilterInput;
  none?: IQuizMemberDescriptionFilterInput;
  some?: IQuizMemberDescriptionFilterInput;
  any?: boolean;
}

export interface IQuizMemberDescriptionFilterInput {
  and?: Array<IQuizMemberDescriptionFilterInput>;
  or?: Array<IQuizMemberDescriptionFilterInput>;
  quizMemberId?: IComparableGuidOperationFilterInput;
  description?: IStringOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  quizMember?: IQuizMemberFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IServiceSortInput {
  name?: ISortEnumType;
  description?: ISortEnumType;
  projectId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IServiceCollectionSegment {
  items?: Array<IService>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IService {
  serviceQuizes: Array<IServiceQuiz>;
  name: string;
  description?: string;
  projectId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IServiceQuiz {
  quiz: IService;
  service: IQuiz;
  serviceId: IUUID;
  quizId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuiz {
  serviceQuizes: Array<IServiceQuiz>;
  quizSections: Array<IQuizSection>;
  name: string;
  description?: string;
  projectId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizSection {
  quizQuestions: Array<IQuizQuestion>;
  quiz: IQuiz;
  name: string;
  description?: string;
  quizId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizQuestion {
  quizSection: IQuizSection;
  quizQuestionAnswers: Array<IQuizQuestionAnswer>;
  quizMembers: Array<IQuizMember>;
  question: string;
  questionType: IQuiz_QuestionType;
  active: boolean;
  memberId: IUUID;
  quizSectionId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizQuestionAnswer {
  quizAnswer: IQuizAnswer;
  quizQuestion: IQuizQuestion;
  quizQuestionId: IUUID;
  quizAnswerId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizAnswer {
  quizQuestionAnswers: Array<IQuizQuestionAnswer>;
  description: string;
  active: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizMember {
  quizMemberDescriptions: Array<IQuizMemberDescription>;
  quizMemberAnswers: Array<IQuizMemberAnswer>;
  quizQuestion: IQuizQuestion;
  quizQuestionId: IUUID;
  memberId: IUUID;
  active: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizMemberDescription {
  quizMember: IQuizMember;
  quizMemberId: IUUID;
  description: string;
  active: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuizMemberAnswer {
  quizMember: IQuizMember;
  quizAnswer: IQuizAnswer;
  quizMemberId: IUUID;
  quizAnswerId: IUUID;
  active: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IServiceQuizSortInput {
  serviceId?: ISortEnumType;
  quizId?: ISortEnumType;
  service?: IServiceSortInput;
  quiz?: IQuizSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizSortInput {
  name?: ISortEnumType;
  description?: ISortEnumType;
  projectId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IServiceQuizCollectionSegment {
  items?: Array<IServiceQuiz>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizCollectionSegment {
  items?: Array<IQuiz>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizSectionSortInput {
  name?: ISortEnumType;
  description?: ISortEnumType;
  quizId?: ISortEnumType;
  quiz?: IQuizSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizSectionCollectionSegment {
  items?: Array<IQuizSection>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizQuestionSortInput {
  question?: ISortEnumType;
  questionType?: ISortEnumType;
  active?: ISortEnumType;
  memberId?: ISortEnumType;
  quizSectionId?: ISortEnumType;
  quizSection?: IQuizSectionSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizQuestionCollectionSegment {
  items?: Array<IQuizQuestion>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizQuestionAnswerSortInput {
  quizQuestionId?: ISortEnumType;
  quizAnswerId?: ISortEnumType;
  quizQuestion?: IQuizQuestionSortInput;
  quizAnswer?: IQuizAnswerSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizAnswerSortInput {
  description?: ISortEnumType;
  active?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizQuestionAnswerCollectionSegment {
  items?: Array<IQuizQuestionAnswer>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizAnswerCollectionSegment {
  items?: Array<IQuizAnswer>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizMemberSortInput {
  quizQuestionId?: ISortEnumType;
  memberId?: ISortEnumType;
  active?: ISortEnumType;
  quizQuestion?: IQuizQuestionSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizMemberCollectionSegment {
  items?: Array<IQuizMember>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizMemberAnswerSortInput {
  quizMemberId?: ISortEnumType;
  quizAnswerId?: ISortEnumType;
  active?: ISortEnumType;
  quizAnswer?: IQuizAnswerSortInput;
  quizMember?: IQuizMemberSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizMemberAnswerCollectionSegment {
  items?: Array<IQuizMemberAnswer>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuizMemberDescriptionSortInput {
  quizMemberId?: ISortEnumType;
  description?: ISortEnumType;
  active?: ISortEnumType;
  quizMember?: IQuizMemberSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IQuizMemberDescriptionCollectionSegment {
  items?: Array<IQuizMemberDescription>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IContactEmail {
  fullName: string;
  email: string;
  sendGridKey: string;
  fromEmail: string;
  fromName: string;
  sendGridTemplateId?: string;
  description: string;
  projectId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ITransactionFilterInput {
  and?: Array<ITransactionFilterInput>;
  or?: Array<ITransactionFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  transactionNumber?: IStringOperationFilterInput;
  transactionRequest?: IStringOperationFilterInput;
  transactionToken?: IStringOperationFilterInput;
  transactionType?: ITransactionTypeOperationFilterInput;
  transactionStatus?: ITransactionStatusOperationFilterInput;
  amount?: IComparableDecimalOperationFilterInput;
  trasactionResponse?: IStringOperationFilterInput;
  invoiceId?: IComparableGuidOperationFilterInput;
  invoice?: IInvoiceFilterInput;
  methodPaymentId?: IComparableGuidOperationFilterInput;
  methodPayment?: IMethodPaymentFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface ITransactionTypeOperationFilterInput {
  eq?: ITransactionType;
  neq?: ITransactionType;
  in?: Array<ITransactionType>;
  nin?: Array<ITransactionType>;
}

export const enum ITransactionType {
  DIRECT = 'DIRECT',
  TO_ACCOUNT = 'TO_ACCOUNT',
  SUBSCRIPTION = 'SUBSCRIPTION',
}

export interface ITransactionStatusOperationFilterInput {
  eq?: ITransactionStatus;
  neq?: ITransactionStatus;
  in?: Array<ITransactionStatus>;
  nin?: Array<ITransactionStatus>;
}

export const enum ITransactionStatus {
  PAID = 'PAID',
  PENDING = 'PENDING',
  ERROR = 'ERROR',
  CANCEL = 'CANCEL',
}

export interface IInvoiceFilterInput {
  and?: Array<IInvoiceFilterInput>;
  or?: Array<IInvoiceFilterInput>;
  invoiceNumber?: IStringOperationFilterInput;
  invoiceStatus?: IInvoiceStatusOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  invoiceDate?: IComparableDateTimeOperationFilterInput;
  observations?: IStringOperationFilterInput;
  subTotal?: IComparableDecimalOperationFilterInput;
  shippingSale?: IComparableDecimalOperationFilterInput;
  discount?: IComparableDecimalOperationFilterInput;
  total?: IComparableDecimalOperationFilterInput;
  addressId?: IComparableGuidOperationFilterInput;
  details?: IListFilterInputTypeOfInvoiceDetailFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IInvoiceStatusOperationFilterInput {
  eq?: IInvoiceStatus;
  neq?: IInvoiceStatus;
  in?: Array<IInvoiceStatus>;
  nin?: Array<IInvoiceStatus>;
}

export const enum IInvoiceStatus {
  PENDING = 'PENDING',
  PAID = 'PAID',
  CANCELLED = 'CANCELLED',
}

export interface IListFilterInputTypeOfInvoiceDetailFilterInput {
  all?: IInvoiceDetailFilterInput;
  none?: IInvoiceDetailFilterInput;
  some?: IInvoiceDetailFilterInput;
  any?: boolean;
}

export interface IInvoiceDetailFilterInput {
  and?: Array<IInvoiceDetailFilterInput>;
  or?: Array<IInvoiceDetailFilterInput>;
  invoiceId?: IComparableGuidOperationFilterInput;
  invoice?: IInvoiceFilterInput;
  productId?: IComparableGuidOperationFilterInput;
  quantity?: IComparableInt32OperationFilterInput;
  salePrice?: IComparableDecimalOperationFilterInput;
  totalPrice?: IComparableDecimalOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMethodPaymentFilterInput {
  and?: Array<IMethodPaymentFilterInput>;
  or?: Array<IMethodPaymentFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  alias?: IStringOperationFilterInput;
  privateKey?: IStringOperationFilterInput;
  publicKey?: IStringOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  servicePayment?: INullableOfServicePaymentOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface INullableOfServicePaymentOperationFilterInput {
  eq?: IServicePayment;
  neq?: IServicePayment;
  in?: Array<IServicePayment | null>;
  nin?: Array<IServicePayment | null>;
}

export const enum IServicePayment {
  MEXPAGO = 'MEXPAGO',
  PAYPAL = 'PAYPAL',
  STRIPE = 'STRIPE',
  CONEKTA = 'CONEKTA',
  FLAP = 'FLAP',
}

export interface ITransactionSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  transactionNumber?: ISortEnumType;
  transactionRequest?: ISortEnumType;
  transactionToken?: ISortEnumType;
  transactionType?: ISortEnumType;
  transactionStatus?: ISortEnumType;
  amount?: ISortEnumType;
  trasactionResponse?: ISortEnumType;
  invoiceId?: ISortEnumType;
  invoice?: IInvoiceSortInput;
  methodPaymentId?: ISortEnumType;
  methodPayment?: IMethodPaymentSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IInvoiceSortInput {
  invoiceNumber?: ISortEnumType;
  invoiceStatus?: ISortEnumType;
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  invoiceDate?: ISortEnumType;
  observations?: ISortEnumType;
  subTotal?: ISortEnumType;
  shippingSale?: ISortEnumType;
  discount?: ISortEnumType;
  total?: ISortEnumType;
  addressId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMethodPaymentSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  alias?: ISortEnumType;
  privateKey?: ISortEnumType;
  publicKey?: ISortEnumType;
  active?: ISortEnumType;
  servicePayment?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ITransactionCollectionSegment {
  items?: Array<ITransaction>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface ITransaction {
  projectId: IUUID;
  memberId: IUUID;
  transactionNumber: string;
  transactionRequest: string;
  transactionToken: string;
  transactionType: ITransactionType;
  transactionStatus: ITransactionStatus;
  amount: IDecimal;
  trasactionResponse: string;
  invoiceId: IUUID;
  invoice?: IInvoice;
  methodPaymentId: IUUID;
  methodPayment?: IMethodPayment;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IInvoice {
  invoiceNumber: string;
  invoiceStatus: IInvoiceStatus;
  projectId: IUUID;
  memberId: IUUID;
  invoiceDate: IDateTime;
  observations: string;
  subTotal: IDecimal;
  shippingSale: IDecimal;
  discount: IDecimal;
  total: IDecimal;
  addressId: IUUID;
  details?: Array<IInvoiceDetail>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  address?: IAddress;
}

export interface IInvoiceDetail {
  invoiceId: IUUID;
  invoice: IInvoice;
  productId: IUUID;
  quantity: number;
  salePrice: IDecimal;
  totalPrice: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMethodPayment {
  projectId: IUUID;
  memberId: IUUID;
  alias: string;
  privateKey: string;
  publicKey: string;
  active: boolean;
  servicePayment?: IServicePayment;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMethodPaymentCollectionSegment {
  items?: Array<IMethodPayment>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IPlanFilterInput {
  and?: Array<IPlanFilterInput>;
  or?: Array<IPlanFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  description?: IStringOperationFilterInput;
  code?: IStringOperationFilterInput;
  codeStripe?: IStringOperationFilterInput;
  status?: IBooleanOperationFilterInput;
  amount?: IComparableDecimalOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IPlanSortInput {
  projectId?: ISortEnumType;
  description?: ISortEnumType;
  code?: ISortEnumType;
  codeStripe?: ISortEnumType;
  status?: ISortEnumType;
  amount?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPlanCollectionSegment {
  items?: Array<IPlan>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IPlan {
  projectId: IUUID;
  description?: string;
  code?: string;
  codeStripe: string;
  status: boolean;
  amount: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IInvoiceCollectionSegment {
  items?: Array<IInvoice>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IComponent {
  keyName: string;
  services: string;
  description: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IWebsitePageSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  url?: ISortEnumType;
  seoWebSitePage?: ISortEnumType;
  description?: ISortEnumType;
  isActive?: ISortEnumType;
  scriptHead?: ISortEnumType;
  scriptFooter?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IWebsitePage {
  projectId: IUUID;
  name?: string;
  url?: string;
  seoWebSitePage?: string;
  description?: string;
  isActive?: boolean;
  scriptHead?: string;
  scriptFooter?: string;
  position: number;
  websitePageComponents?: Array<IWebsitePageComponent>;
  websitePageSeos?: Array<IWebsitePageSeo>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IWebsitePageComponent {
  websitePageId: IUUID;
  websitePage?: IWebsitePage;
  keyName?: string;
  props?: string;
  position: number;
  parentId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IWebsitePageSeo {
  websitePageId: IUUID;
  websitePage?: IWebsitePage;
  title?: string;
  description?: string;
  keywords?: string;
  canonicalUrl?: string;
  robots?: string;
  googlebot?: string;
  author?: string;
  language?: string;
  twitterCard?: string;
  twitterSite?: string;
  twitterCreator?: string;
  twitterTitle?: string;
  twitterDescription?: string;
  twitterUrl?: string;
  twitterImageAlt?: string;
  twitterImageTitle?: string;
  twitterImageWidth?: string;
  twitterImageHeight?: string;
  twitterImage?: string;
  openGraphTitle?: string;
  openGraphDescription?: string;
  openGraphUrl?: string;
  openGraphImageAlt?: string;
  openGraphImageTitle?: string;
  openGraphImageWidth?: string;
  openGraphImageHeight?: string;
  openGraphImage?: string;
  openGraphType?: string;
  openGraphSiteName?: string;
  openGraphFacebookAppId?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVideoRoom {
  projectId: IUUID;
  sessionId?: string;
  sessionName?: string;
  url?: string;
  creatorName?: string;
  creatorEmail?: string;
  videoRoomMembers?: Array<IVideoRoomMember>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVideoRoomMember {
  videoRoomId: IUUID;
  videoRoom?: IVideoRoom;
  fullName?: string;
  email?: string;
  photo?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVideoCall {
  projectId: IUUID;
  memberId: IUUID;
  sessionId: string;
  sessionName: string;
  url?: string;
  members: Array<IVideoCallMember>;
  services: Array<IVideoCallService>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVideoCallMember {
  videoCallId: IUUID;
  videoCall: IVideoCall;
  memberId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVideoCallService {
  videoCallId: IUUID;
  videoCall: IVideoCall;
  serviceCode: string;
  viewAdmin: boolean;
  viewUser: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVideo {
  sessionId: string;
  token: string;
  videoCall: IVideoCall;
}

export interface IStadisticsResult {
  name: string;
  hg: string;
  percentaje: string;
  color?: string;
}

export interface IQuoterProfileFilterInput {
  and?: Array<IQuoterProfileFilterInput>;
  or?: Array<IQuoterProfileFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  officeId?: IComparableGuidOperationFilterInput;
  office?: IOfficeFilterInput;
  quoterProfileInsurers?: IListFilterInputTypeOfQuoterProfileInsurerFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IOfficeFilterInput {
  and?: Array<IOfficeFilterInput>;
  or?: Array<IOfficeFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfQuoterProfileInsurerFilterInput {
  all?: IQuoterProfileInsurerFilterInput;
  none?: IQuoterProfileInsurerFilterInput;
  some?: IQuoterProfileInsurerFilterInput;
  any?: boolean;
}

export interface IQuoterProfileInsurerFilterInput {
  and?: Array<IQuoterProfileInsurerFilterInput>;
  or?: Array<IQuoterProfileInsurerFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  quoterProfileId?: IComparableGuidOperationFilterInput;
  quoterProfile?: IQuoterProfileFilterInput;
  insurerId?: IComparableGuidOperationFilterInput;
  insurer?: IInsurerFilterInput;
  percentageBase?: IComparableDecimalOperationFilterInput;
  percentageMax?: IComparableDecimalOperationFilterInput;
  portalAgentQuote?: IBooleanOperationFilterInput;
  portalAgentEmits?: IBooleanOperationFilterInput;
  portalPublicQuote?: IBooleanOperationFilterInput;
  portalPublicEmits?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IInsurerFilterInput {
  and?: Array<IInsurerFilterInput>;
  or?: Array<IInsurerFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  insurerServiceId?: IComparableNullableOfGuidOperationFilterInput;
  insurerService?: IInsurerServiceFilterInput;
  name?: IStringOperationFilterInput;
  percentageMax?: IComparableNullableOfDecimalOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IInsurerServiceFilterInput {
  and?: Array<IInsurerServiceFilterInput>;
  or?: Array<IInsurerServiceFilterInput>;
  name?: IStringOperationFilterInput;
  codeName?: IStringOperationFilterInput;
  script?: IStringOperationFilterInput;
  template?: IStringOperationFilterInput;
  autos?: IBooleanOperationFilterInput;
  type?: IStringOperationFilterInput;
  module?: IStringOperationFilterInput;
  priority?: IComparableInt32OperationFilterInput;
  color?: IStringOperationFilterInput;
  logo?: IStringOperationFilterInput;
  insurerServiceCredentials?: IListFilterInputTypeOfInsurerServiceCredentialFilterInput;
  insurerServiceEnvironments?: IListFilterInputTypeOfInsurerServiceEnvironmentFilterInput;
  insurers?: IListFilterInputTypeOfInsurerFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfInsurerServiceCredentialFilterInput {
  all?: IInsurerServiceCredentialFilterInput;
  none?: IInsurerServiceCredentialFilterInput;
  some?: IInsurerServiceCredentialFilterInput;
  any?: boolean;
}

export interface IInsurerServiceCredentialFilterInput {
  and?: Array<IInsurerServiceCredentialFilterInput>;
  or?: Array<IInsurerServiceCredentialFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  insurerServiceId?: IComparableGuidOperationFilterInput;
  insurerService?: IInsurerServiceFilterInput;
  conduit?: IStringOperationFilterInput;
  username?: IStringOperationFilterInput;
  password?: IStringOperationFilterInput;
  rate?: IStringOperationFilterInput;
  agent?: IStringOperationFilterInput;
  group?: IStringOperationFilterInput;
  deal?: IStringOperationFilterInput;
  office?: IStringOperationFilterInput;
  cprogram?: IStringOperationFilterInput;
  default?: IBooleanOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  extra?: IStringOperationFilterInput;
  discount?: IComparableNullableOfInt32OperationFilterInput;
  owner?: IStringOperationFilterInput;
  environment?: INullableOfServiceEnvironmentOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableNullableOfInt32OperationFilterInput {
  eq?: number;
  neq?: number;
  in?: Array<number | null>;
  nin?: Array<number | null>;
  gt?: number;
  ngt?: number;
  gte?: number;
  ngte?: number;
  lt?: number;
  nlt?: number;
  lte?: number;
  nlte?: number;
}

export interface INullableOfServiceEnvironmentOperationFilterInput {
  eq?: IServiceEnvironment;
  neq?: IServiceEnvironment;
  in?: Array<IServiceEnvironment | null>;
  nin?: Array<IServiceEnvironment | null>;
}

export const enum IServiceEnvironment {
  PRODUCTION = 'PRODUCTION',
  DEVELOPMENT = 'DEVELOPMENT',
  TESTING = 'TESTING',
}

export interface IListFilterInputTypeOfInsurerServiceEnvironmentFilterInput {
  all?: IInsurerServiceEnvironmentFilterInput;
  none?: IInsurerServiceEnvironmentFilterInput;
  some?: IInsurerServiceEnvironmentFilterInput;
  any?: boolean;
}

export interface IInsurerServiceEnvironmentFilterInput {
  and?: Array<IInsurerServiceEnvironmentFilterInput>;
  or?: Array<IInsurerServiceEnvironmentFilterInput>;
  insurerServiceId?: IComparableGuidOperationFilterInput;
  insurerService?: IInsurerServiceFilterInput;
  environment?: INullableOfServiceEnvironmentOperationFilterInput;
  reference?: IStringOperationFilterInput;
  endPoint?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfInsurerFilterInput {
  all?: IInsurerFilterInput;
  none?: IInsurerFilterInput;
  some?: IInsurerFilterInput;
  any?: boolean;
}

export interface IQuoterProfileSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  officeId?: ISortEnumType;
  office?: IOfficeSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IOfficeSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  description?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

/**
 * A connection to a list of items.
 */
export interface IListRQuoterProfilesByProjectIdConnection {
  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges?: Array<IListRQuoterProfilesByProjectIdEdge>;

  /**
   * A flattened list of the nodes.
   */
  nodes?: Array<IQuoterProfile>;
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IListRQuoterProfilesByProjectIdEdge {
  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IQuoterProfile;
}

export interface IQuoterProfile {
  projectId: IUUID;
  name: string;
  officeId: IUUID;
  office?: IOffice;
  quoterProfileInsurers?: Array<IQuoterProfileInsurer>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IOffice {
  projectId: IUUID;
  name?: string;
  description?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuoterProfileInsurer {
  projectId: IUUID;
  quoterProfileId: IUUID;
  quoterProfile?: IQuoterProfile;
  insurerId: IUUID;
  insurer?: IInsurer;
  percentageBase: IDecimal;
  percentageMax: IDecimal;
  portalAgentQuote: boolean;
  portalAgentEmits: boolean;
  portalPublicQuote: boolean;
  portalPublicEmits: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IInsurer {
  projectId: IUUID;
  insurerServiceId?: IUUID;
  insurerService?: IInsurerService;
  name: string;
  percentageMax?: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IInsurerService {
  name: string;
  codeName?: string;
  script?: string;
  template?: string;
  autos: boolean;
  type?: string;
  module?: string;
  priority: number;
  color?: string;
  logo?: string;
  insurerServiceCredentials?: Array<IInsurerServiceCredential>;
  insurerServiceEnvironments?: Array<IInsurerServiceEnvironment>;
  insurers?: Array<IInsurer>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IInsurerServiceCredential {
  projectId: IUUID;
  insurerServiceId: IUUID;
  insurerService?: IInsurerService;
  conduit?: string;
  username?: string;
  password?: string;
  rate?: string;
  agent?: string;
  group?: string;
  deal?: string;
  office?: string;
  cprogram?: string;
  default: boolean;
  active: boolean;
  extra?: string;
  discount?: number;
  owner?: string;
  environment?: IServiceEnvironment;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IInsurerServiceEnvironment {
  insurerServiceId: IUUID;
  insurerService?: IInsurerService;
  environment?: IServiceEnvironment;
  reference?: string;
  endPoint?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuoterProfileInsurerSortInput {
  projectId?: ISortEnumType;
  quoterProfileId?: ISortEnumType;
  quoterProfile?: IQuoterProfileSortInput;
  insurerId?: ISortEnumType;
  insurer?: IInsurerSortInput;
  percentageBase?: ISortEnumType;
  percentageMax?: ISortEnumType;
  portalAgentQuote?: ISortEnumType;
  portalAgentEmits?: ISortEnumType;
  portalPublicQuote?: ISortEnumType;
  portalPublicEmits?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IInsurerSortInput {
  projectId?: ISortEnumType;
  insurerServiceId?: ISortEnumType;
  insurerService?: IInsurerServiceSortInput;
  name?: ISortEnumType;
  percentageMax?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IInsurerServiceSortInput {
  name?: ISortEnumType;
  codeName?: ISortEnumType;
  script?: ISortEnumType;
  template?: ISortEnumType;
  autos?: ISortEnumType;
  type?: ISortEnumType;
  module?: ISortEnumType;
  priority?: ISortEnumType;
  color?: ISortEnumType;
  logo?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

/**
 * A connection to a list of items.
 */
export interface IListRQuoterProfilesInsurerByProjectIdConnection {
  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges?: Array<IListRQuoterProfilesInsurerByProjectIdEdge>;

  /**
   * A flattened list of the nodes.
   */
  nodes?: Array<IQuoterProfileInsurer>;
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IListRQuoterProfilesInsurerByProjectIdEdge {
  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IQuoterProfileInsurer;
}

export interface IHomologator {
  abaCodeId?: string;
  afirmeCodeId?: string;
  aigCodeId?: string;
  anaCodeId?: string;
  atlasCodeId?: string;
  axaCodeId?: string;
  banorteCodeId?: string;
  gnpCodeId?: string;
  hdiCodeId?: string;
  potosiCodeId?: string;
  psCodeId?: string;
  qualitasCodeId?: string;
  zurichCodeId?: string;
  mapfreCodeId?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVehiclesCarCodeRelation {
  id: number;
  abaCodeId?: number;
  afirmeCodeId?: number;
  aigCodeId?: number;
  anaCodeId?: number;
  atlasCodeId?: number;
  axaCodeId?: number;
  banorteCodeId?: number;
  gnpCodeId?: number;
  hdiCodeId?: number;
  potosiCodeId?: number;
  psCodeId?: number;
  qualitasCodeId?: number;
  zurichCodeId?: number;
  mapfreCodeId?: number;
  abaCode?: IVehiclesCarCatalogAba;
  afirmeCode?: IVehiclesCarCatalogAfirme;
  aigCode?: IVehiclesCarCatalogAig;
  anaCode?: IVehiclesCarCatalogAna;
  atlasCode?: IVehiclesCarCatalogAtla;
  axaCode?: IVehiclesCarCatalogAxa;
  banorteCode?: IVehiclesCarCatalogBanorte;
  gnpCode?: IVehiclesCarCatalogGnp;
  hdiCode?: IVehiclesCarCatalogHdi;
  mapfreCode?: IVehiclesCarCatalogMapfre;
  potosiCode?: IVehiclesCarCatalogPotosi;
  psCode?: IVehiclesCarCatalogP;
  qualitasCode?: IVehiclesCarCatalogQualita;
  zurichCode?: IVehiclesCarCatalogZurich;
}

export interface IVehiclesCarCatalogAba {
  id: number;
  brand: string;
  description: string;
  subbrand: string;
  occupants: ILong;
  type: string;
  vehiclesCarCatalogAbaCodeYears: Array<IVehiclesCarCatalogAbaCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

/**
 * The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
 */
export type ILong = any;

export interface IVehiclesCarCatalogAbaCodeYear {
  id: number;
  year: ILong;
  cveveh: string;
  carId: number;
  car: IVehiclesCarCatalogAba;
}

export interface IVehiclesCarCatalogAfirme {
  id: number;
  brand?: string;
  subbrand?: string;
  description?: string;
  vehiclesCarCatalogAfirmeCodeYears: Array<IVehiclesCarCatalogAfirmeCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogAfirmeCodeYear {
  id: number;
  year: ILong;
  cAfirme: string;
  carId: number;
  car: IVehiclesCarCatalogAfirme;
}

export interface IVehiclesCarCatalogAig {
  id: number;
  brand: string;
  year: number;
  description: string;
  subbrand: string;
  vehiclesCarcoderelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogAna {
  id: number;
  subbrand: string;
  description: string;
  brand: string;
  vehiclesCarCatalogAnaCodeYears: Array<IVehiclesCarCatalogAnaCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogAnaCodeYear {
  id: number;
  year: ILong;
  cAna: string;
  carId: number;
  car: IVehiclesCarCatalogAna;
}

export interface IVehiclesCarCatalogAtla {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  vehiclesCarCatalogAtlasCodeYears: Array<IVehiclesCarCatalogAtlasCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogAtlasCodeYear {
  id: number;
  year: ILong;
  cAtlas: string;
  carId: number;
  car: IVehiclesCarCatalogAtla;
}

export interface IVehiclesCarCatalogAxa {
  id: number;
  brand?: string;
  subbrand?: string;
  descriptionLinea?: string;
  description?: string;
  camis?: string;
  categoria: string;
  segmento?: string;
  brandId: string;
  versionId: number;
  versionIdSec: number;
  categoriaId: number;
  lineaId: number;
  vehiclesCarCatalogAxaCodeYears: Array<IVehiclesCarCatalogAxaCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogAxaCodeYear {
  id: number;
  year: ILong;
  cAxa: string;
  carId: number;
  car: IVehiclesCarCatalogAxa;
}

export interface IVehiclesCarCatalogBanorte {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  vehiclesCarCatalogBanorteCodeYears: Array<IVehiclesCarCatalogBanorteCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogBanorteCodeYear {
  id: number;
  year: ILong;
  cBanorte: string;
  carId: number;
  car: IVehiclesCarCatalogBanorte;
}

export interface IVehiclesCarCatalogGnp {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  vehiclesCarCatalogGnpCodeYears: Array<IVehiclesCarCatalogGnpCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogGnpCodeYear {
  id: number;
  year: ILong;
  cGnp: string;
  carId: number;
  car: IVehiclesCarCatalogGnp;
}

export interface IVehiclesCarCatalogHdi {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  vehiclesCarCatalogHdiCodeYears: Array<IVehiclesCarCatalogHdiCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogHdiCodeYear {
  id: number;
  year: ILong;
  cHdi: string;
  carId: number;
  car: IVehiclesCarCatalogHdi;
}

export interface IVehiclesCarCatalogMapfre {
  id: number;
  brand: string;
  description: string;
  subbrand: string;
  vehiclesCarCatalogMapfreCodeYears: Array<IVehiclesCarCatalogMapfreCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogMapfreCodeYear {
  id: number;
  year: ILong;
  cMapfre: string;
  brand: string;
  carId: number;
  car: IVehiclesCarCatalogMapfre;
}

export interface IVehiclesCarCatalogPotosi {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  cPotosi: string;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogP {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  cPs: string;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogQualita {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  brandCode?: string;
  vehiclesCarCatalogQualitasCodeYears: Array<IVehiclesCarCatalogQualitasCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogQualitasCodeYear {
  id: number;
  year: ILong;
  cQualitas: string;
  carId: number;
  car: IVehiclesCarCatalogQualita;
}

export interface IVehiclesCarCatalogZurich {
  id: number;
  brand: string;
  subbrand: string;
  description: string;
  vehiclesCarCatalogZurichCodeYears: Array<IVehiclesCarCatalogZurichCodeYear>;
  vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}

export interface IVehiclesCarCatalogZurichCodeYear {
  id: number;
  year: ILong;
  carId: number;
  cZurich: string;
  car: IVehiclesCarCatalogZurich;
}

export interface IQuoteFilterInput {
  and?: Array<IQuoteFilterInput>;
  or?: Array<IQuoteFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  firstName?: IStringOperationFilterInput;
  lastName?: IStringOperationFilterInput;
  phone?: IStringOperationFilterInput;
  email?: IStringOperationFilterInput;
  address?: IStringOperationFilterInput;
  hiredSame?: IBooleanOperationFilterInput;
  hiredFirstName?: IStringOperationFilterInput;
  hiredLastName?: IStringOperationFilterInput;
  hiredPhone?: IStringOperationFilterInput;
  hiredEmail?: IStringOperationFilterInput;
  hiredAddress?: IStringOperationFilterInput;
  frecuency?: IComparableNullableOfInt32OperationFilterInput;
  packageName?: IStringOperationFilterInput;
  gender?: INullableOfQuoteGenderOperationFilterInput;
  zipCode?: IStringOperationFilterInput;
  dateOfBirth?: IComparableNullableOfDateTimeOperationFilterInput;
  carCode?: IStringOperationFilterInput;
  startValidity?: IComparableNullableOfDateTimeOperationFilterInput;
  endValidity?: IComparableNullableOfDateTimeOperationFilterInput;
  year?: IComparableNullableOfInt32OperationFilterInput;
  discount?: IComparableNullableOfInt32OperationFilterInput;
  coverage?: IStringOperationFilterInput;
  primalTotal?: IStringOperationFilterInput;
  deductible?: IStringOperationFilterInput;
  typeFrecuency?: IStringOperationFilterInput;
  firstPay?: IStringOperationFilterInput;
  secondPay?: IStringOperationFilterInput;
  status?: INullableOfQuoteStatusOperationFilterInput;
  plaque?: IStringOperationFilterInput;
  compensationValue?: IStringOperationFilterInput;
  serialNumber?: IStringOperationFilterInput;
  car?: ICarQuotationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  colony?: IStringOperationFilterInput;
  town?: IStringOperationFilterInput;
  state?: IStringOperationFilterInput;
  stateId?: IStringOperationFilterInput;
  brand?: IStringOperationFilterInput;
  subBrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface INullableOfQuoteGenderOperationFilterInput {
  eq?: IQuoteGender;
  neq?: IQuoteGender;
  in?: Array<IQuoteGender | null>;
  nin?: Array<IQuoteGender | null>;
}

export const enum IQuoteGender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
  UNKNOWN = 'UNKNOWN',
}

export interface INullableOfQuoteStatusOperationFilterInput {
  eq?: IQuoteStatus;
  neq?: IQuoteStatus;
  in?: Array<IQuoteStatus | null>;
  nin?: Array<IQuoteStatus | null>;
}

export const enum IQuoteStatus {
  HIRE = 'HIRE',
  PENDING = 'PENDING',
  ISSUED = 'ISSUED',
}

export interface ICarQuotationFilterInput {
  and?: Array<ICarQuotationFilterInput>;
  or?: Array<ICarQuotationFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
}

export interface IQuoteSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  firstName?: ISortEnumType;
  lastName?: ISortEnumType;
  phone?: ISortEnumType;
  email?: ISortEnumType;
  address?: ISortEnumType;
  hiredSame?: ISortEnumType;
  hiredFirstName?: ISortEnumType;
  hiredLastName?: ISortEnumType;
  hiredPhone?: ISortEnumType;
  hiredEmail?: ISortEnumType;
  hiredAddress?: ISortEnumType;
  frecuency?: ISortEnumType;
  packageName?: ISortEnumType;
  gender?: ISortEnumType;
  zipCode?: ISortEnumType;
  dateOfBirth?: ISortEnumType;
  carCode?: ISortEnumType;
  startValidity?: ISortEnumType;
  endValidity?: ISortEnumType;
  year?: ISortEnumType;
  discount?: ISortEnumType;
  coverage?: ISortEnumType;
  primalTotal?: ISortEnumType;
  deductible?: ISortEnumType;
  typeFrecuency?: ISortEnumType;
  firstPay?: ISortEnumType;
  secondPay?: ISortEnumType;
  status?: ISortEnumType;
  plaque?: ISortEnumType;
  compensationValue?: ISortEnumType;
  serialNumber?: ISortEnumType;
  car?: ICarQuotationSortInput;
  carId?: ISortEnumType;
  colony?: ISortEnumType;
  town?: ISortEnumType;
  state?: ISortEnumType;
  stateId?: ISortEnumType;
  brand?: ISortEnumType;
  subBrand?: ISortEnumType;
  description?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ICarQuotationSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  description?: ISortEnumType;
  subbrand?: ISortEnumType;
}

export interface IQuoteCollectionSegment {
  items?: Array<IQuote>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuote {
  car: ICarQuotation;
  projectId: IUUID;
  memberId: IUUID;
  firstName?: string;
  lastName?: string;
  phone?: string;
  email?: string;
  address?: string;
  hiredSame?: boolean;
  hiredFirstName?: string;
  hiredLastName?: string;
  hiredPhone?: string;
  hiredEmail?: string;
  hiredAddress?: string;
  frecuency?: number;
  packageName?: string;
  gender?: IQuoteGender;
  zipCode?: string;
  dateOfBirth?: IDateTime;
  carCode?: string;
  startValidity?: IDateTime;
  endValidity?: IDateTime;
  year?: number;
  discount?: number;
  coverage?: string;
  primalTotal?: string;
  deductible?: string;
  typeFrecuency?: string;
  firstPay?: string;
  secondPay?: string;
  status?: IQuoteStatus;
  plaque?: string;
  compensationValue?: string;
  serialNumber?: string;
  carId: number;
  colony?: string;
  town?: string;
  state?: string;
  stateId?: string;
  brand?: string;
  subBrand?: string;
  description?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
  member?: IMember;
}

export interface ICarQuotation {
  id: number;
  brand?: string;
  description?: string;
  subbrand?: string;
}

export interface IRegistrationFilterInput {
  and?: Array<IRegistrationFilterInput>;
  or?: Array<IRegistrationFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  email?: IStringOperationFilterInput;
  state?: IStringOperationFilterInput;
  city?: IStringOperationFilterInput;
  tradename?: IStringOperationFilterInput;
  company?: IStringOperationFilterInput;
  interests?: IListBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListBooleanOperationFilterInput {
  all?: IBooleanOperationFilterInput;
  none?: IBooleanOperationFilterInput;
  some?: IBooleanOperationFilterInput;
  any?: boolean;
}

export interface IRegistrationSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  email?: ISortEnumType;
  state?: ISortEnumType;
  city?: ISortEnumType;
  tradename?: ISortEnumType;
  company?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IRegistration {
  projectId: IUUID;
  name: string;
  email: string;
  state?: string;
  city?: string;
  tradename?: string;
  company?: string;
  interests?: Array<boolean>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IQuoter {
  quote?: IQuote;
  services?: Array<IInsurerService>;
}

export interface IGenericsService {
  registerUser: IServiceProcessPayload;
  runEmision: IServiceProcessPayload;
  printPolice: IServiceProcessPayload;
  id: number;
  name: string;
  script: string;
  template?: string;
  autos: boolean;
  type: string;
  module?: string;
  priority: number;
  color?: string;
  logo?: string;
  cotizacionCredentials: Array<ICotizacionCredential>;
  cotizacionPackages: Array<ICotizacionPackage>;
  cotizacionQuotes: Array<ICotizacionQuote>;
  coveragesCoverages: Array<ICoveragesCoverage>;
}

export interface IServiceProcessPayload {
  name: string;
  error: string;
  success: boolean;
  result: string;
}

export interface ICotizacionCredential {
  id: number;
  conduit?: string;
  username?: string;
  password?: string;
  rate?: string;
  agent?: string;
  group?: string;
  deal?: string;
  office?: string;
  cprogram?: string;
  default: boolean;
  active: boolean;
  extra?: string;
  serviceId?: number;
  discount?: number;
  owner?: string;
  production: boolean;
  service?: IGenericsService;
}

export interface ICotizacionPackage {
  id: number;
  sumassured?: string;
  deductible?: string;
  isbase: boolean;
  isactive: boolean;
  peroccupant: boolean;
  coverageId?: number;
  packageId?: number;
  serviceId: number;
  deductibleoptions?: Array<string>;
  sumassuredoptions?: Array<string>;
  priority: number;
  coverage?: ICoveragesCoverage;
  package?: ICoveragesPackagesList;
  service: IGenericsService;
}

export interface ICoveragesCoverage {
  id: number;
  code?: string;
  name: string;
  description?: string;
  insuranceId?: number;
  abbreviation?: string;
  insurance?: IGenericsService;
  cotizacionPackages: Array<ICotizacionPackage>;
}

export interface ICoveragesPackagesList {
  id: number;
  name: string;
  description?: string;
  ramo: number;
  active: boolean;
  cotizacionPackages: Array<ICotizacionPackage>;
}

export interface ICotizacionQuote {
  issued: boolean;
  id: number;
  createdAt?: IDateTime;
  updatedAt?: IDateTime;
  paymentfrequency: string;
  startvigency?: IDate;
  endvigency?: IDate;
  cardescription?: string;
  totalamount?: IDecimal;
  surcharge?: IDecimal;
  folioquote?: string;
  police?: string;
  derecho?: IDecimal;
  pdf?: string;
  receiptpdf?: string;
  package?: string;
  iva?: IDecimal;
  netAmount?: IDecimal;
  selected: boolean;
  carCompanyCode?: string;
  carFormId?: number;
  serviceId?: number;
  status: number;
  extra?: string;
  carForm?: ICotizacionCarForm;
  service?: IGenericsService;
  cotizacionQuoteCoverages: Array<ICotizacionQuoteCoverage>;
  cotizacionQuotePayForms: Array<ICotizacionQuotePayForm>;
}

/**
 * The `Date` scalar represents an ISO-8601 compliant date type.
 */
export type IDate = any;

export interface ICotizacionCarForm {
  id: number;
  createdAt?: IDateTime;
  updatedAt?: IDateTime;
  cardescription: string;
  carId: string;
  year?: number;
  code?: string;
  serialNumber: string;
  engineNumber: string;
  paymentMethod: string;
  plates: string;
  owner?: number;
  clientId?: number;
  origin: string;
  client?: IClientsClient;
  cotizacionQuotes: Array<ICotizacionQuote>;
}

export interface IClientsClient {
  id: number;
  createdAt?: IDateTime;
  updatedAt?: IDateTime;
  firstname: string;
  lastname: string;
  age?: number;
  email?: string;
  phone: string;
  taxpayerid: string;
  secondlastname: string;
  birthdate?: IDate;
  civilStatus: string;
  gender: string;
  clientsAddresses: Array<IClientsAddress>;
  cotizacionCarForms: Array<ICotizacionCarForm>;
}

export interface IClientsAddress {
  id: number;
  city: string;
  state: string;
  zipcode: string;
  clientId?: number;
  suburb: string;
  internalnumber?: string;
  number: string;
  street: string;
  country: string;
  client?: IClientsClient;
}

export interface ICotizacionQuoteCoverage {
  id: number;
  createdAt?: IDateTime;
  updatedAt?: IDateTime;
  name?: string;
  cobId?: string;
  sumassured?: string;
  deductible?: string;
  total?: string;
  neto?: string;
  quoteId?: number;
  priority: number;
  quote?: ICotizacionQuote;
}

export interface ICotizacionQuotePayForm {
  id: number;
  netamount?: IDecimal;
  firstinstalment?: IDecimal;
  model: string;
  iva?: string;
  subsecuentinstalments?: IDecimal;
  rpf?: IDecimal;
  totalamount?: IDecimal;
  startvigency?: string;
  endvigency?: string;
  quoteId?: number;
  quantity: number;
  quote?: ICotizacionQuote;
}

export interface IGenderDTO {
  name: string;
}

export interface ICarTypeDTO {
  name: string;
}

export interface IListBrandDTO {
  name: string;
  insurer: string;
}

export interface IListSubBrandDTO {
  name: string;
  insurer: string;
}

export interface IListYearDTO {
  year: ILong;
  insurer: string;
}

export interface IListVersionDTO {
  carId: string;
  version: string;
  cveveh: string;
  insurer: string;
}

export interface IHomologationService {
  homologated: boolean;
  name: string;
  codeName: string;
  homologateDescription?: string;
  color: string;
  logo: string;
}

export interface IColoniaDTO {
  colonias?: Array<string>;
  estado?: IEstadoDTO;
  municipio?: string;
  munid?: string;
}

export interface IEstadoDTO {
  name?: string;
  value?: number;
}

export interface ICoverageDTO {
  servicename: string;
  type: string;
  obligatory: Array<ICotizacionPackage>;
  optional: Array<ICotizacionPackage>;
}

export interface ICatalog {
  brand: string;
  description: string;
  subBrand: string;
  catalogType: string;
  oldId: number;
  years: Array<ICatalogByYear>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICatalogByYear {
  year: number;
  cveveh: string;
  catalogId: IUUID;
  catalog?: ICatalog;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICatalogFilterInput {
  and?: Array<ICatalogFilterInput>;
  or?: Array<ICatalogFilterInput>;
  brand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  subBrand?: IStringOperationFilterInput;
  catalogType?: IStringOperationFilterInput;
  oldId?: IComparableInt32OperationFilterInput;
  years?: IListFilterInputTypeOfCatalogByYearFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfCatalogByYearFilterInput {
  all?: ICatalogByYearFilterInput;
  none?: ICatalogByYearFilterInput;
  some?: ICatalogByYearFilterInput;
  any?: boolean;
}

export interface ICatalogByYearFilterInput {
  and?: Array<ICatalogByYearFilterInput>;
  or?: Array<ICatalogByYearFilterInput>;
  year?: IComparableInt32OperationFilterInput;
  cveveh?: IStringOperationFilterInput;
  catalogId?: IComparableGuidOperationFilterInput;
  catalog?: ICatalogFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface ICatalogSortInput {
  brand?: ISortEnumType;
  description?: ISortEnumType;
  subBrand?: ISortEnumType;
  catalogType?: ISortEnumType;
  oldId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ICatalogCollectionSegment {
  items?: Array<ICatalog>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IInsurerCollectionSegment {
  items?: Array<IInsurer>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IOfficeCollectionSegment {
  items?: Array<IOffice>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IQuoterProfileCollectionSegment {
  items?: Array<IQuoterProfile>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IVehiclesCarCatalogAbaFilterInput {
  and?: Array<IVehiclesCarCatalogAbaFilterInput>;
  or?: Array<IVehiclesCarCatalogAbaFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  occupants?: IComparableInt64OperationFilterInput;
  type?: IStringOperationFilterInput;
  vehiclesCarCatalogAbaCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAbaCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IComparableInt64OperationFilterInput {
  eq?: ILong;
  neq?: ILong;
  in?: Array<ILong>;
  nin?: Array<ILong>;
  gt?: ILong;
  ngt?: ILong;
  gte?: ILong;
  ngte?: ILong;
  lt?: ILong;
  nlt?: ILong;
  lte?: ILong;
  nlte?: ILong;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogAbaCodeYearFilterInput {
  all?: IVehiclesCarCatalogAbaCodeYearFilterInput;
  none?: IVehiclesCarCatalogAbaCodeYearFilterInput;
  some?: IVehiclesCarCatalogAbaCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogAbaCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogAbaCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogAbaCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cveveh?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogAbaFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput {
  all?: IVehiclesCarCodeRelationFilterInput;
  none?: IVehiclesCarCodeRelationFilterInput;
  some?: IVehiclesCarCodeRelationFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCodeRelationFilterInput {
  and?: Array<IVehiclesCarCodeRelationFilterInput>;
  or?: Array<IVehiclesCarCodeRelationFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  abaCodeId?: IComparableNullableOfInt32OperationFilterInput;
  afirmeCodeId?: IComparableNullableOfInt32OperationFilterInput;
  aigCodeId?: IComparableNullableOfInt32OperationFilterInput;
  anaCodeId?: IComparableNullableOfInt32OperationFilterInput;
  atlasCodeId?: IComparableNullableOfInt32OperationFilterInput;
  axaCodeId?: IComparableNullableOfInt32OperationFilterInput;
  banorteCodeId?: IComparableNullableOfInt32OperationFilterInput;
  gnpCodeId?: IComparableNullableOfInt32OperationFilterInput;
  hdiCodeId?: IComparableNullableOfInt32OperationFilterInput;
  potosiCodeId?: IComparableNullableOfInt32OperationFilterInput;
  psCodeId?: IComparableNullableOfInt32OperationFilterInput;
  qualitasCodeId?: IComparableNullableOfInt32OperationFilterInput;
  zurichCodeId?: IComparableNullableOfInt32OperationFilterInput;
  mapfreCodeId?: IComparableNullableOfInt32OperationFilterInput;
  abaCode?: IVehiclesCarCatalogAbaFilterInput;
  afirmeCode?: IVehiclesCarCatalogAfirmeFilterInput;
  aigCode?: IVehiclesCarCatalogAigFilterInput;
  anaCode?: IVehiclesCarCatalogAnaFilterInput;
  atlasCode?: IVehiclesCarCatalogAtlaFilterInput;
  axaCode?: IVehiclesCarCatalogAxaFilterInput;
  banorteCode?: IVehiclesCarCatalogBanorteFilterInput;
  gnpCode?: IVehiclesCarCatalogGnpFilterInput;
  hdiCode?: IVehiclesCarCatalogHdiFilterInput;
  mapfreCode?: IVehiclesCarCatalogMapfreFilterInput;
  potosiCode?: IVehiclesCarCatalogPotosiFilterInput;
  psCode?: IVehiclesCarCatalogPFilterInput;
  qualitasCode?: IVehiclesCarCatalogQualitaFilterInput;
  zurichCode?: IVehiclesCarCatalogZurichFilterInput;
}

export interface IVehiclesCarCatalogAfirmeFilterInput {
  and?: Array<IVehiclesCarCatalogAfirmeFilterInput>;
  or?: Array<IVehiclesCarCatalogAfirmeFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  vehiclesCarCatalogAfirmeCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAfirmeCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogAfirmeCodeYearFilterInput {
  all?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
  none?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
  some?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogAfirmeCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogAfirmeCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogAfirmeCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cAfirme?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogAfirmeFilterInput;
}

export interface IVehiclesCarCatalogAigFilterInput {
  and?: Array<IVehiclesCarCatalogAigFilterInput>;
  or?: Array<IVehiclesCarCatalogAigFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  year?: IComparableInt32OperationFilterInput;
  description?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  vehiclesCarcoderelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IVehiclesCarCatalogAnaFilterInput {
  and?: Array<IVehiclesCarCatalogAnaFilterInput>;
  or?: Array<IVehiclesCarCatalogAnaFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  brand?: IStringOperationFilterInput;
  vehiclesCarCatalogAnaCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAnaCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogAnaCodeYearFilterInput {
  all?: IVehiclesCarCatalogAnaCodeYearFilterInput;
  none?: IVehiclesCarCatalogAnaCodeYearFilterInput;
  some?: IVehiclesCarCatalogAnaCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogAnaCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogAnaCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogAnaCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cAna?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogAnaFilterInput;
}

export interface IVehiclesCarCatalogAtlaFilterInput {
  and?: Array<IVehiclesCarCatalogAtlaFilterInput>;
  or?: Array<IVehiclesCarCatalogAtlaFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  vehiclesCarCatalogAtlasCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAtlasCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogAtlasCodeYearFilterInput {
  all?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
  none?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
  some?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogAtlasCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogAtlasCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogAtlasCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cAtlas?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogAtlaFilterInput;
}

export interface IVehiclesCarCatalogAxaFilterInput {
  and?: Array<IVehiclesCarCatalogAxaFilterInput>;
  or?: Array<IVehiclesCarCatalogAxaFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  descriptionLinea?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  camis?: IStringOperationFilterInput;
  categoria?: IStringOperationFilterInput;
  segmento?: IStringOperationFilterInput;
  brandId?: IStringOperationFilterInput;
  versionId?: IComparableInt32OperationFilterInput;
  versionIdSec?: IComparableInt32OperationFilterInput;
  categoriaId?: IComparableInt32OperationFilterInput;
  lineaId?: IComparableInt32OperationFilterInput;
  vehiclesCarCatalogAxaCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAxaCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogAxaCodeYearFilterInput {
  all?: IVehiclesCarCatalogAxaCodeYearFilterInput;
  none?: IVehiclesCarCatalogAxaCodeYearFilterInput;
  some?: IVehiclesCarCatalogAxaCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogAxaCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogAxaCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogAxaCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cAxa?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogAxaFilterInput;
}

export interface IVehiclesCarCatalogBanorteFilterInput {
  and?: Array<IVehiclesCarCatalogBanorteFilterInput>;
  or?: Array<IVehiclesCarCatalogBanorteFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  vehiclesCarCatalogBanorteCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogBanorteCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogBanorteCodeYearFilterInput {
  all?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
  none?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
  some?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogBanorteCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogBanorteCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogBanorteCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cBanorte?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogBanorteFilterInput;
}

export interface IVehiclesCarCatalogGnpFilterInput {
  and?: Array<IVehiclesCarCatalogGnpFilterInput>;
  or?: Array<IVehiclesCarCatalogGnpFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  vehiclesCarCatalogGnpCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogGnpCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogGnpCodeYearFilterInput {
  all?: IVehiclesCarCatalogGnpCodeYearFilterInput;
  none?: IVehiclesCarCatalogGnpCodeYearFilterInput;
  some?: IVehiclesCarCatalogGnpCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogGnpCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogGnpCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogGnpCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cGnp?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogGnpFilterInput;
}

export interface IVehiclesCarCatalogHdiFilterInput {
  and?: Array<IVehiclesCarCatalogHdiFilterInput>;
  or?: Array<IVehiclesCarCatalogHdiFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  vehiclesCarCatalogHdiCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogHdiCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogHdiCodeYearFilterInput {
  all?: IVehiclesCarCatalogHdiCodeYearFilterInput;
  none?: IVehiclesCarCatalogHdiCodeYearFilterInput;
  some?: IVehiclesCarCatalogHdiCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogHdiCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogHdiCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogHdiCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cHdi?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogHdiFilterInput;
}

export interface IVehiclesCarCatalogMapfreFilterInput {
  and?: Array<IVehiclesCarCatalogMapfreFilterInput>;
  or?: Array<IVehiclesCarCatalogMapfreFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  vehiclesCarCatalogMapfreCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogMapfreCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogMapfreCodeYearFilterInput {
  all?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
  none?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
  some?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogMapfreCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogMapfreCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogMapfreCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cMapfre?: IStringOperationFilterInput;
  brand?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogMapfreFilterInput;
}

export interface IVehiclesCarCatalogPotosiFilterInput {
  and?: Array<IVehiclesCarCatalogPotosiFilterInput>;
  or?: Array<IVehiclesCarCatalogPotosiFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  cPotosi?: IStringOperationFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IVehiclesCarCatalogPFilterInput {
  and?: Array<IVehiclesCarCatalogPFilterInput>;
  or?: Array<IVehiclesCarCatalogPFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  cPs?: IStringOperationFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IVehiclesCarCatalogQualitaFilterInput {
  and?: Array<IVehiclesCarCatalogQualitaFilterInput>;
  or?: Array<IVehiclesCarCatalogQualitaFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  brandCode?: IStringOperationFilterInput;
  vehiclesCarCatalogQualitasCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogQualitasCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogQualitasCodeYearFilterInput {
  all?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
  none?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
  some?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogQualitasCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogQualitasCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogQualitasCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  cQualitas?: IStringOperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  car?: IVehiclesCarCatalogQualitaFilterInput;
}

export interface IVehiclesCarCatalogZurichFilterInput {
  and?: Array<IVehiclesCarCatalogZurichFilterInput>;
  or?: Array<IVehiclesCarCatalogZurichFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  brand?: IStringOperationFilterInput;
  subbrand?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  vehiclesCarCatalogZurichCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogZurichCodeYearFilterInput;
  vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}

export interface IListFilterInputTypeOfVehiclesCarCatalogZurichCodeYearFilterInput {
  all?: IVehiclesCarCatalogZurichCodeYearFilterInput;
  none?: IVehiclesCarCatalogZurichCodeYearFilterInput;
  some?: IVehiclesCarCatalogZurichCodeYearFilterInput;
  any?: boolean;
}

export interface IVehiclesCarCatalogZurichCodeYearFilterInput {
  and?: Array<IVehiclesCarCatalogZurichCodeYearFilterInput>;
  or?: Array<IVehiclesCarCatalogZurichCodeYearFilterInput>;
  id?: IComparableInt32OperationFilterInput;
  year?: IComparableInt64OperationFilterInput;
  carId?: IComparableInt32OperationFilterInput;
  cZurich?: IStringOperationFilterInput;
  car?: IVehiclesCarCatalogZurichFilterInput;
}

export interface IVehiclesCarCatalogAbaSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  description?: ISortEnumType;
  subbrand?: ISortEnumType;
  occupants?: ISortEnumType;
  type?: ISortEnumType;
}

export interface IVehiclesCarCatalogAfirmeSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
}

export interface IVehiclesCarCatalogAigSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  year?: ISortEnumType;
  description?: ISortEnumType;
  subbrand?: ISortEnumType;
}

export interface IVehiclesCarCatalogAnaSortInput {
  id?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
  brand?: ISortEnumType;
}

export interface IVehiclesCarCatalogAtlaSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
}

export interface IVehiclesCarCatalogAxaSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  descriptionLinea?: ISortEnumType;
  description?: ISortEnumType;
  camis?: ISortEnumType;
  categoria?: ISortEnumType;
  segmento?: ISortEnumType;
  brandId?: ISortEnumType;
  versionId?: ISortEnumType;
  versionIdSec?: ISortEnumType;
  categoriaId?: ISortEnumType;
  lineaId?: ISortEnumType;
}

export interface IVehiclesCarCatalogBanorteSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
}

export interface IVehiclesCarCatalogGnpSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
}

export interface IVehiclesCarCatalogHdiSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
}

export interface IVehiclesCarCatalogMapfreSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  description?: ISortEnumType;
  subbrand?: ISortEnumType;
}

export interface IVehiclesCarCatalogPSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
  cPs?: ISortEnumType;
}

export interface IVehiclesCarCatalogPotosiSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
  cPotosi?: ISortEnumType;
}

export interface IVehiclesCarCatalogQualitaSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
  brandCode?: ISortEnumType;
}

export interface IVehiclesCarCatalogZurichSortInput {
  id?: ISortEnumType;
  brand?: ISortEnumType;
  subbrand?: ISortEnumType;
  description?: ISortEnumType;
}

export interface IVehiclesCarCatalogAbaCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cveveh?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogAbaSortInput;
}

export interface IVehiclesCarCatalogAfirmeCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cAfirme?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogAfirmeSortInput;
}

export interface IVehiclesCarCatalogAxaCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cAxa?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogAxaSortInput;
}

export interface IVehiclesCarCatalogAtlasCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cAtlas?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogAtlaSortInput;
}

export interface IVehiclesCarCatalogBanorteCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cBanorte?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogBanorteSortInput;
}

export interface IVehiclesCarCatalogGnpCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cGnp?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogGnpSortInput;
}

export interface IVehiclesCarCatalogHdiCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cHdi?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogHdiSortInput;
}

export interface IVehiclesCarCatalogMapfreCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cMapfre?: ISortEnumType;
  brand?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogMapfreSortInput;
}

export interface IVehiclesCarCatalogQualitasCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  cQualitas?: ISortEnumType;
  carId?: ISortEnumType;
  car?: IVehiclesCarCatalogQualitaSortInput;
}

export interface IVehiclesCarCatalogZurichCodeYearSortInput {
  id?: ISortEnumType;
  year?: ISortEnumType;
  carId?: ISortEnumType;
  cZurich?: ISortEnumType;
  car?: IVehiclesCarCatalogZurichSortInput;
}

export interface IStaffQuoteFilterInput {
  and?: Array<IStaffQuoteFilterInput>;
  or?: Array<IStaffQuoteFilterInput>;
  solicitorId?: IComparableGuidOperationFilterInput;
  serviceId?: IComparableGuidOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  status?: INullableOfEnumQuoteStatusOperationFilterInput;
  collaborators?: IListFilterInputTypeOfCollaboratorFilterInput;
  proposals?: IListFilterInputTypeOfProposalFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface INullableOfEnumQuoteStatusOperationFilterInput {
  eq?: IEnumQuoteStatus;
  neq?: IEnumQuoteStatus;
  in?: Array<IEnumQuoteStatus | null>;
  nin?: Array<IEnumQuoteStatus | null>;
}

export const enum IEnumQuoteStatus {
  CANCELED = 'CANCELED',
  APPROVED = 'APPROVED',
  APPROVED_BY_CUSTOMER = 'APPROVED_BY_CUSTOMER',
}

export interface IListFilterInputTypeOfCollaboratorFilterInput {
  all?: ICollaboratorFilterInput;
  none?: ICollaboratorFilterInput;
  some?: ICollaboratorFilterInput;
  any?: boolean;
}

export interface ICollaboratorFilterInput {
  and?: Array<ICollaboratorFilterInput>;
  or?: Array<ICollaboratorFilterInput>;
  memberId?: IComparableGuidOperationFilterInput;
  projectRoleId?: IComparableGuidOperationFilterInput;
  staffQuoteId?: IComparableGuidOperationFilterInput;
  estimatedTime?: IComparableNullableOfTimeSpanOperationFilterInput;
  amount?: IComparableNullableOfDecimalOperationFilterInput;
  staffQuote?: IStaffQuoteFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableNullableOfTimeSpanOperationFilterInput {
  eq?: ITimeSpan;
  neq?: ITimeSpan;
  in?: Array<ITimeSpan | null>;
  nin?: Array<ITimeSpan | null>;
  gt?: ITimeSpan;
  ngt?: ITimeSpan;
  gte?: ITimeSpan;
  ngte?: ITimeSpan;
  lt?: ITimeSpan;
  nlt?: ITimeSpan;
  lte?: ITimeSpan;
  nlte?: ITimeSpan;
}

export interface IListFilterInputTypeOfProposalFilterInput {
  all?: IProposalFilterInput;
  none?: IProposalFilterInput;
  some?: IProposalFilterInput;
  any?: boolean;
}

export interface IProposalFilterInput {
  and?: Array<IProposalFilterInput>;
  or?: Array<IProposalFilterInput>;
  staffQuoteId?: IComparableGuidOperationFilterInput;
  methodology?: IStringOperationFilterInput;
  status?: INullableOfEnumQuoteStatusOperationFilterInput;
  staffQuote?: IStaffQuoteFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IStaffQuoteSortInput {
  solicitorId?: ISortEnumType;
  serviceId?: ISortEnumType;
  projectId?: ISortEnumType;
  status?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IStaffQuote {
  proposals: Array<IProposal>;
  collaborators: Array<ICollaborator>;
  solicitorId: IUUID;
  serviceId: IUUID;
  projectId: IUUID;
  status?: IEnumQuoteStatus;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IProposal {
  staffQuote: IStaffQuote;
  staffQuoteId: IUUID;
  methodology?: string;
  status?: IEnumQuoteStatus;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICollaborator {
  staffQuote: IStaffQuote;
  memberId: IUUID;
  projectRoleId: IUUID;
  staffQuoteId: IUUID;
  estimatedTime?: ITimeSpan;
  amount?: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IProposalSortInput {
  staffQuoteId?: ISortEnumType;
  methodology?: ISortEnumType;
  status?: ISortEnumType;
  staffQuote?: IStaffQuoteSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ICollaboratorSortInput {
  memberId?: ISortEnumType;
  projectRoleId?: ISortEnumType;
  staffQuoteId?: ISortEnumType;
  estimatedTime?: ISortEnumType;
  amount?: ISortEnumType;
  staffQuote?: IStaffQuoteSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicPageFilterInput {
  and?: Array<IDynamicPageFilterInput>;
  or?: Array<IDynamicPageFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  label?: IStringOperationFilterInput;
  dynamicSections?: IListFilterInputTypeOfDynamicSectionFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDynamicSectionFilterInput {
  all?: IDynamicSectionFilterInput;
  none?: IDynamicSectionFilterInput;
  some?: IDynamicSectionFilterInput;
  any?: boolean;
}

export interface IDynamicSectionFilterInput {
  and?: Array<IDynamicSectionFilterInput>;
  or?: Array<IDynamicSectionFilterInput>;
  position?: IComparableInt32OperationFilterInput;
  isPrimary?: IBooleanOperationFilterInput;
  dynamicPageId?: IComparableGuidOperationFilterInput;
  dynamicPage?: IDynamicPageFilterInput;
  dynamicTabs?: IListFilterInputTypeOfDynamicTabFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDynamicTabFilterInput {
  all?: IDynamicTabFilterInput;
  none?: IDynamicTabFilterInput;
  some?: IDynamicTabFilterInput;
  any?: boolean;
}

export interface IDynamicTabFilterInput {
  and?: Array<IDynamicTabFilterInput>;
  or?: Array<IDynamicTabFilterInput>;
  name?: IStringOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  dynamicSectionId?: IComparableGuidOperationFilterInput;
  dynamicSection?: IDynamicSectionFilterInput;
  dynamicSectionBlocks?: IListFilterInputTypeOfDynamicSectionBlockFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDynamicSectionBlockFilterInput {
  all?: IDynamicSectionBlockFilterInput;
  none?: IDynamicSectionBlockFilterInput;
  some?: IDynamicSectionBlockFilterInput;
  any?: boolean;
}

export interface IDynamicSectionBlockFilterInput {
  and?: Array<IDynamicSectionBlockFilterInput>;
  or?: Array<IDynamicSectionBlockFilterInput>;
  label?: IStringOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  style?: IStringOperationFilterInput;
  dynamicBlockId?: IComparableGuidOperationFilterInput;
  dynamicTabId?: IComparableGuidOperationFilterInput;
  dynamicTab?: IDynamicTabFilterInput;
  dynamicBlock?: IDynamicBlockFilterInput;
  dynamicCustomMetas?: IListFilterInputTypeOfDynamicCustomMetaFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IDynamicBlockFilterInput {
  and?: Array<IDynamicBlockFilterInput>;
  or?: Array<IDynamicBlockFilterInput>;
  codeName?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  services?: IStringOperationFilterInput;
  components?: IStringOperationFilterInput;
  style?: IStringOperationFilterInput;
  dynamicSectionBlocks?: IListFilterInputTypeOfDynamicSectionBlockFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDynamicCustomMetaFilterInput {
  all?: IDynamicCustomMetaFilterInput;
  none?: IDynamicCustomMetaFilterInput;
  some?: IDynamicCustomMetaFilterInput;
  any?: boolean;
}

export interface IDynamicCustomMetaFilterInput {
  and?: Array<IDynamicCustomMetaFilterInput>;
  or?: Array<IDynamicCustomMetaFilterInput>;
  metaKey?: IStringOperationFilterInput;
  metaType?: IMetaTypeOperationFilterInput;
  label?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  dynamicSectionBlockId?: IComparableGuidOperationFilterInput;
  dynamicSectionBlocks?: IDynamicSectionBlockFilterInput;
  dynamicCustomValues?: IListFilterInputTypeOfDynamicCustomValueFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMetaTypeOperationFilterInput {
  eq?: IMetaType;
  neq?: IMetaType;
  in?: Array<IMetaType>;
  nin?: Array<IMetaType>;
}

export const enum IMetaType {
  INT = 'INT',
  STRING = 'STRING',
  FLOAT = 'FLOAT',
  BOOLEAN = 'BOOLEAN',
}

export interface IListFilterInputTypeOfDynamicCustomValueFilterInput {
  all?: IDynamicCustomValueFilterInput;
  none?: IDynamicCustomValueFilterInput;
  some?: IDynamicCustomValueFilterInput;
  any?: boolean;
}

export interface IDynamicCustomValueFilterInput {
  and?: Array<IDynamicCustomValueFilterInput>;
  or?: Array<IDynamicCustomValueFilterInput>;
  memberId?: IComparableGuidOperationFilterInput;
  dynamicCustomMetaId?: IComparableGuidOperationFilterInput;
  dynamicCustomMetas?: IDynamicCustomMetaFilterInput;
  value?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IDynamicPageSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  label?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicPage {
  dynamicSections: Array<IDynamicSection>;
  projectId: IUUID;
  name: string;
  label: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicSection {
  dynamicPage: IDynamicPage;
  dynamicTabs: Array<IDynamicTab>;
  position: number;
  isPrimary: boolean;
  dynamicPageId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicTab {
  dynamicSection: IDynamicSection;
  dynamicSectionBlocks: Array<IDynamicSectionBlock>;
  name: string;
  position: number;
  dynamicSectionId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicSectionBlock {
  dynamicTab: IDynamicTab;
  dynamicBlock: IDynamicBlock;
  dynamicCustomMetas: Array<IDynamicCustomMeta>;
  label: string;
  position: number;
  style?: string;
  dynamicBlockId: IUUID;
  dynamicTabId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicBlock {
  dynamicSectionBlocks: Array<IDynamicSectionBlock>;
  codeName: string;
  description?: string;
  services?: string;
  components?: string;
  style?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicCustomMeta {
  dynamicSectionBlocks: IDynamicSectionBlock;
  dynamicCustomValues: Array<IDynamicCustomValue>;
  metaKey: string;
  metaType: IMetaType;
  label: string;
  description?: string;
  position: number;
  dynamicSectionBlockId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicCustomValue {
  dynamicCustomMetas: IDynamicCustomMeta;
  memberId: IUUID;
  dynamicCustomMetaId: IUUID;
  value: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDynamicBlockSortInput {
  codeName?: ISortEnumType;
  description?: ISortEnumType;
  services?: ISortEnumType;
  components?: ISortEnumType;
  style?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicBlockCollectionSegment {
  items?: Array<IDynamicBlock>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
}

export interface IDynamicSectionSortInput {
  position?: ISortEnumType;
  isPrimary?: ISortEnumType;
  dynamicPageId?: ISortEnumType;
  dynamicPage?: IDynamicPageSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicSectionCollectionSegment {
  items?: Array<IDynamicSection>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
}

export interface IDynamicTabSortInput {
  name?: ISortEnumType;
  position?: ISortEnumType;
  dynamicSectionId?: ISortEnumType;
  dynamicSection?: IDynamicSectionSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicTabCollectionSegment {
  items?: Array<IDynamicTab>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
}

export interface IDynamicSectionBlockSortInput {
  label?: ISortEnumType;
  position?: ISortEnumType;
  style?: ISortEnumType;
  dynamicBlockId?: ISortEnumType;
  dynamicTabId?: ISortEnumType;
  dynamicTab?: IDynamicTabSortInput;
  dynamicBlock?: IDynamicBlockSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicSectionBlockCollectionSegment {
  items?: Array<IDynamicSectionBlock>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
}

export interface IDynamicCustomMetaSortInput {
  metaKey?: ISortEnumType;
  metaType?: ISortEnumType;
  label?: ISortEnumType;
  description?: ISortEnumType;
  position?: ISortEnumType;
  dynamicSectionBlockId?: ISortEnumType;
  dynamicSectionBlocks?: IDynamicSectionBlockSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicCustomMetaCollectionSegment {
  items?: Array<IDynamicCustomMeta>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
}

export interface IDynamicCustomValueSortInput {
  memberId?: ISortEnumType;
  dynamicCustomMetaId?: ISortEnumType;
  dynamicCustomMetas?: IDynamicCustomMetaSortInput;
  value?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDynamicCustomValueCollectionSegment {
  items?: Array<IDynamicCustomValue>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
}

export interface IChargeFilterInput {
  and?: Array<IChargeFilterInput>;
  or?: Array<IChargeFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  total?: IComparableDecimalOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IChargeSortInput {
  projectId?: ISortEnumType;
  eventId?: ISortEnumType;
  memberId?: ISortEnumType;
  total?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IChargeCollectionSegment {
  items?: Array<ICharge>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface ICharge {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  total: IDecimal;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IClinicHistoryFilterInput {
  and?: Array<IClinicHistoryFilterInput>;
  or?: Array<IClinicHistoryFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  notes?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableNullableOfInt32OperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IClinicHistorySortInput {
  projectId?: ISortEnumType;
  eventId?: ISortEnumType;
  memberId?: ISortEnumType;
  notes?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IClinicHistory {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  notes: string;
  isVisible?: boolean;
  position?: number;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IEventDetailFilterInput {
  and?: Array<IEventDetailFilterInput>;
  or?: Array<IEventDetailFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  subTotal?: IComparableDecimalOperationFilterInput;
  descuento?: IComparableDecimalOperationFilterInput;
  tax?: IComparableDecimalOperationFilterInput;
  total?: IComparableDecimalOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IEventDetailSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  eventId?: ISortEnumType;
  subTotal?: ISortEnumType;
  descuento?: ISortEnumType;
  tax?: ISortEnumType;
  total?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IEventDetailCollectionSegment {
  items?: Array<IEventDetail>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IFisicExamFilterInput {
  and?: Array<IFisicExamFilterInput>;
  or?: Array<IFisicExamFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  title?: IStringOperationFilterInput;
  content?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableNullableOfInt32OperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IFisicExamSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  eventId?: ISortEnumType;
  title?: ISortEnumType;
  content?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicalBackgroundSortInput {
  projectId?: ISortEnumType;
  formatId?: ISortEnumType;
  format?: IFormatSortInput;
  label?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  pacientMedicalBackground?: IPacientMedicalBackgroundSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IFormatSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  eventTypeId?: ISortEnumType;
  nameFormat?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPacientMedicalBackgroundSortInput {
  medicalBackgroundDetailId?: ISortEnumType;
  medicalBackgroundDetail?: IMedicalBackgroundDetailSortInput;
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  eventId?: ISortEnumType;
  text?: ISortEnumType;
  isResponse?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicalBackgroundDetailSortInput {
  projectId?: ISortEnumType;
  medicalBackgroundId?: ISortEnumType;
  medicalBackground?: IMedicalBackgroundSortInput;
  label?: ISortEnumType;
  backgroundTypeOption?: ISortEnumType;
  isOption?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IClinicHistoryMedicalBackgroundDetailSortInput {
  medicalBackgroundDetailId?: ISortEnumType;
  medicalBackgroundDetail?: IMedicalBackgroundDetailSortInput;
  backgroundType?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicineFilterInput {
  and?: Array<IMedicineFilterInput>;
  or?: Array<IMedicineFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  medicineName?: IStringOperationFilterInput;
  take?: IStringOperationFilterInput;
  frecuency?: IStringOperationFilterInput;
  duration?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableInt32OperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMedicineSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  eventId?: ISortEnumType;
  medicineName?: ISortEnumType;
  take?: ISortEnumType;
  frecuency?: ISortEnumType;
  duration?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicalServiceFilterInput {
  and?: Array<IMedicalServiceFilterInput>;
  or?: Array<IMedicalServiceFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  state?: IBooleanOperationFilterInput;
  name?: IStringOperationFilterInput;
  mode?: IServiceOptionOperationFilterInput;
  cost?: IComparableDecimalOperationFilterInput;
  imgRoute?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IServiceOptionOperationFilterInput {
  eq?: IServiceOption;
  neq?: IServiceOption;
  in?: Array<IServiceOption>;
  nin?: Array<IServiceOption>;
}

export const enum IServiceOption {
  PRESENCIAL = 'PRESENCIAL',
  ONLINE = 'ONLINE',
}

export interface IMedicalServiceSortInput {
  projectId?: ISortEnumType;
  state?: ISortEnumType;
  name?: ISortEnumType;
  mode?: ISortEnumType;
  cost?: ISortEnumType;
  imgRoute?: ISortEnumType;
  description?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicalService {
  projectId: IUUID;
  state: boolean;
  name: string;
  mode: IServiceOption;
  cost: IDecimal;
  imgRoute: string;
  description: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IVaccineFilterInput {
  and?: Array<IVaccineFilterInput>;
  or?: Array<IVaccineFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  nameVac?: IStringOperationFilterInput;
  dateAplicationVac?: IComparableDateTimeOperationFilterInput;
  nextVac?: IComparableNullableOfDateTimeOperationFilterInput;
  notesVac?: IStringOperationFilterInput;
  position?: IComparableNullableOfInt32OperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IVaccineSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  nameVac?: ISortEnumType;
  dateAplicationVac?: ISortEnumType;
  nextVac?: ISortEnumType;
  notesVac?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IVitalSignFilterInput {
  and?: Array<IVitalSignFilterInput>;
  or?: Array<IVitalSignFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  labelNameVt?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableNullableOfInt32OperationFilterInput;
  patientVitalSignsResponse?: IPatientVitalSignsResponseFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IPatientVitalSignsResponseFilterInput {
  and?: Array<IPatientVitalSignsResponseFilterInput>;
  or?: Array<IPatientVitalSignsResponseFilterInput>;
  vitalSignId?: IComparableGuidOperationFilterInput;
  vitalSign?: IVitalSignFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  value?: IComparableNullableOfDecimalOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IVitalSignSortInput {
  projectId?: ISortEnumType;
  labelNameVt?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  patientVitalSignsResponse?: IPatientVitalSignsResponseSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPatientVitalSignsResponseSortInput {
  vitalSignId?: ISortEnumType;
  vitalSign?: IVitalSignSortInput;
  eventId?: ISortEnumType;
  memberId?: ISortEnumType;
  value?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicalConfigFilterInput {
  and?: Array<IMedicalConfigFilterInput>;
  or?: Array<IMedicalConfigFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  patologis?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMedicalConfigSortInput {
  projectId?: ISortEnumType;
  patologis?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicalConfig {
  projectId: IUUID;
  patologis: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IRegistSesionFilterInput {
  and?: Array<IRegistSesionFilterInput>;
  or?: Array<IRegistSesionFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  therapyId?: IComparableGuidOperationFilterInput;
  therapy?: ITherapyFilterInput;
  title?: IStringOperationFilterInput;
  namePacient?: IStringOperationFilterInput;
  terapist?: IStringOperationFilterInput;
  dateSesion?: IComparableDateTimeOperationFilterInput;
  comments?: IStringOperationFilterInput;
  electronicsign?: IStringOperationFilterInput;
  legalType?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface ITherapyFilterInput {
  and?: Array<ITherapyFilterInput>;
  or?: Array<ITherapyFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  numSesion?: IComparableDecimalOperationFilterInput;
  content?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  position?: IComparableNullableOfInt32OperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IRegistSesionSortInput {
  projectId?: ISortEnumType;
  therapyId?: ISortEnumType;
  therapy?: ITherapySortInput;
  title?: ISortEnumType;
  namePacient?: ISortEnumType;
  terapist?: ISortEnumType;
  dateSesion?: ISortEnumType;
  comments?: ISortEnumType;
  electronicsign?: ISortEnumType;
  legalType?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ITherapySortInput {
  projectId?: ISortEnumType;
  eventId?: ISortEnumType;
  memberId?: ISortEnumType;
  numSesion?: ISortEnumType;
  content?: ISortEnumType;
  isVisible?: ISortEnumType;
  position?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IRegistSesion {
  projectId: IUUID;
  therapyId: IUUID;
  therapy: ITherapy;
  title: string;
  namePacient: string;
  terapist: string;
  dateSesion: IDateTime;
  comments: string;
  electronicsign: string;
  legalType: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ITherapy {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  numSesion: IDecimal;
  content: string;
  isVisible?: boolean;
  position?: number;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ITherapyCollectionSegment {
  items?: Array<ITherapy>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IRecipeConfigFilterInput {
  and?: Array<IRecipeConfigFilterInput>;
  or?: Array<IRecipeConfigFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  medicRecipeId?: IComparableGuidOperationFilterInput;
  medicRecipe?: IMedicRecipeFilterInput;
  isActiveAllPacients?: IBooleanOperationFilterInput;
  isAccessDataPacient?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IMedicRecipeFilterInput {
  and?: Array<IMedicRecipeFilterInput>;
  or?: Array<IMedicRecipeFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  profesionalCell?: IStringOperationFilterInput;
  speciality?: IStringOperationFilterInput;
  institute?: IStringOperationFilterInput;
  electronicSing?: IStringOperationFilterInput;
  isCorrect?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IRecipeConfigSortInput {
  projectId?: ISortEnumType;
  medicRecipeId?: ISortEnumType;
  medicRecipe?: IMedicRecipeSortInput;
  isActiveAllPacients?: ISortEnumType;
  isAccessDataPacient?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IMedicRecipeSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  profesionalCell?: ISortEnumType;
  speciality?: ISortEnumType;
  institute?: ISortEnumType;
  electronicSing?: ISortEnumType;
  isCorrect?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IRecipeConfig {
  projectId: IUUID;
  medicRecipeId: IUUID;
  medicRecipe: IMedicRecipe;
  isActiveAllPacients: boolean;
  isAccessDataPacient: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IConsultNoteFilterInput {
  and?: Array<IConsultNoteFilterInput>;
  or?: Array<IConsultNoteFilterInput>;
  eventId?: IComparableGuidOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  note?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IConsultNoteSortInput {
  eventId?: ISortEnumType;
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  note?: ISortEnumType;
  isVisible?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IConsultNote {
  eventId: IUUID;
  projectId: IUUID;
  memberId: IUUID;
  note?: string;
  isVisible: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IPacientNoteFilterInput {
  and?: Array<IPacientNoteFilterInput>;
  or?: Array<IPacientNoteFilterInput>;
  memberId?: IComparableGuidOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  eventId?: IComparableGuidOperationFilterInput;
  note?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IPacientNoteSortInput {
  memberId?: ISortEnumType;
  projectId?: ISortEnumType;
  eventId?: ISortEnumType;
  note?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDiagnosticFilterInput {
  and?: Array<IDiagnosticFilterInput>;
  or?: Array<IDiagnosticFilterInput>;
  eventId?: IComparableGuidOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  content?: IStringOperationFilterInput;
  isVisible?: IBooleanOperationFilterInput;
  medicines?: IListFilterInputTypeOfMedicineFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfMedicineFilterInput {
  all?: IMedicineFilterInput;
  none?: IMedicineFilterInput;
  some?: IMedicineFilterInput;
  any?: boolean;
}

export interface IDiagnosticSortInput {
  eventId?: ISortEnumType;
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  content?: ISortEnumType;
  isVisible?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IBillingRequest {
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  socialReason?: string;
  rfc?: string;
  cFDI?: string;
  socialRegiment?: string;
  cP?: string;
  email?: string;
  status?: boolean;
  billingUrl?: string;
  emailContent?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IApiService {
  projectId: IUUID;
  label: string;
  serviceCode: string;
  secretKey: string;
  expiration: IDateTime;
  url?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDownloadFile {
  url: string;
}

export interface IFolderFilterInput {
  and?: Array<IFolderFilterInput>;
  or?: Array<IFolderFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  label?: IStringOperationFilterInput;
  background?: IStringOperationFilterInput;
  parentId?: IComparableNullableOfGuidOperationFilterInput;
  isPersonal?: IBooleanOperationFilterInput;
  parent?: IFolderFilterInput;
  subFolders?: IListFilterInputTypeOfFolderFilterInput;
  files?: IListFilterInputTypeOfFileFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfFolderFilterInput {
  all?: IFolderFilterInput;
  none?: IFolderFilterInput;
  some?: IFolderFilterInput;
  any?: boolean;
}

export interface IListFilterInputTypeOfFileFilterInput {
  all?: IFileFilterInput;
  none?: IFileFilterInput;
  some?: IFileFilterInput;
  any?: boolean;
}

export interface IFileFilterInput {
  and?: Array<IFileFilterInput>;
  or?: Array<IFileFilterInput>;
  folderId?: IComparableGuidOperationFilterInput;
  folder?: IFolderFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  isProfile?: IBooleanOperationFilterInput;
  token?: IStringOperationFilterInput;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IFolderSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  label?: ISortEnumType;
  background?: ISortEnumType;
  parentId?: ISortEnumType;
  isPersonal?: ISortEnumType;
  parent?: IFolderSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

/**
 * A connection to a list of items.
 */
export interface IListFoldersConnection {
  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges?: Array<IListFoldersEdge>;

  /**
   * A flattened list of the nodes.
   */
  nodes?: Array<IFolder>;
}

/**
 * An edge in a connection.
 */
export interface IListFoldersEdge {
  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IFolder;
}

/**
 * A connection to a list of items.
 */
export interface IFoldersListConnection {
  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges?: Array<IFoldersListEdge>;

  /**
   * A flattened list of the nodes.
   */
  nodes?: Array<IFolder>;
}

/**
 * An edge in a connection.
 */
export interface IFoldersListEdge {
  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IFolder;
}

export interface IFileSortInput {
  folderId?: ISortEnumType;
  folder?: IFolderSortInput;
  memberId?: ISortEnumType;
  isProfile?: ISortEnumType;
  token?: ISortEnumType;
  name?: ISortEnumType;
  description?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IFileCollectionSegment {
  items?: Array<IFile>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface I_Service {
  /**
   * The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
   */
  sdl?: string;
}

export interface IRoomTokenInput {
  sessionRoomId?: string;
  sessionRoomName?: string;
  userId?: number;
  role?: IROOM_ROLE;
}

export const enum IROOM_ROLE {
  SUBSCRIBER = 'SUBSCRIBER',
  PUBLISHER = 'PUBLISHER',
  MODERATOR = 'MODERATOR',
}

export interface IRoomToken {
  createdAt?: IDate;
  updatedAt?: IDate;
  token?: string;
}

export interface IRoomSession {
  _id?: string;
  createdAt?: IDate;
  updatedAt?: IDate;
  sessionRoomName?: string;
  sessionRoomId?: string;
  chat?: string;
}

export interface IRoomTokenLiveKitInput {
  roomName?: string;
  participantName?: string;
}

export interface IRoomTokenLiveKit {
  createdAt?: IDate;
  token?: string;
  roomName?: string;
  participantIdentity?: string;
}

export interface IHiringFilterInput {
  and?: Array<IHiringFilterInput>;
  or?: Array<IHiringFilterInput>;
  projectRoleId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  dateStart?: IComparableNullableOfDateTimeOperationFilterInput;
  dateEnd?: IComparableNullableOfDateTimeOperationFilterInput;
  description?: IStringOperationFilterInput;
  amount?: IComparableDecimalOperationFilterInput;
  amountWritted?: IStringOperationFilterInput;
  amountPerHour?: IComparableNullableOfDecimalOperationFilterInput;
  benefits?: INullableOfEnumBenefitsOperationFilterInput;
  enumHiringType?: INullableOfEnumHiringTypeOperationFilterInput;
  hiringTypeId?: IComparableNullableOfGuidOperationFilterInput;
  hiringType?: IHiringTypeFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface INullableOfEnumBenefitsOperationFilterInput {
  eq?: IEnumBenefits;
  neq?: IEnumBenefits;
  in?: Array<IEnumBenefits | null>;
  nin?: Array<IEnumBenefits | null>;
}

export interface INullableOfEnumHiringTypeOperationFilterInput {
  eq?: IEnumHiringType;
  neq?: IEnumHiringType;
  in?: Array<IEnumHiringType | null>;
  nin?: Array<IEnumHiringType | null>;
}

export interface IHiringTypeFilterInput {
  and?: Array<IHiringTypeFilterInput>;
  or?: Array<IHiringTypeFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  name?: IStringOperationFilterInput;
  hirings?: IListFilterInputTypeOfHiringFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfHiringFilterInput {
  all?: IHiringFilterInput;
  none?: IHiringFilterInput;
  some?: IHiringFilterInput;
  any?: boolean;
}

export interface IHiringSortInput {
  projectRoleId?: ISortEnumType;
  memberId?: ISortEnumType;
  dateStart?: ISortEnumType;
  dateEnd?: ISortEnumType;
  description?: ISortEnumType;
  amount?: ISortEnumType;
  amountWritted?: ISortEnumType;
  amountPerHour?: ISortEnumType;
  benefits?: ISortEnumType;
  enumHiringType?: ISortEnumType;
  hiringTypeId?: ISortEnumType;
  hiringType?: IHiringTypeSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IHiringTypeSortInput {
  projectId?: ISortEnumType;
  name?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IShiftFilterInput {
  and?: Array<IShiftFilterInput>;
  or?: Array<IShiftFilterInput>;
  projectId?: IComparableGuidOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  timeStart?: IComparableTimeSpanOperationFilterInput;
  timeEnd?: IComparableTimeSpanOperationFilterInput;
  dayId?: IComparableGuidOperationFilterInput;
  day?: IDayFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableTimeSpanOperationFilterInput {
  eq?: ITimeSpan;
  neq?: ITimeSpan;
  in?: Array<ITimeSpan>;
  nin?: Array<ITimeSpan>;
  gt?: ITimeSpan;
  ngt?: ITimeSpan;
  gte?: ITimeSpan;
  ngte?: ITimeSpan;
  lt?: ITimeSpan;
  nlt?: ITimeSpan;
  lte?: ITimeSpan;
  nlte?: ITimeSpan;
}

export interface IDayFilterInput {
  and?: Array<IDayFilterInput>;
  or?: Array<IDayFilterInput>;
  name?: IStringOperationFilterInput;
  codeDay?: IStringOperationFilterInput;
  shifts?: IListFilterInputTypeOfShiftFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfShiftFilterInput {
  all?: IShiftFilterInput;
  none?: IShiftFilterInput;
  some?: IShiftFilterInput;
  any?: boolean;
}

export interface IShiftSortInput {
  projectId?: ISortEnumType;
  memberId?: ISortEnumType;
  timeStart?: ISortEnumType;
  timeEnd?: ISortEnumType;
  dayId?: ISortEnumType;
  day?: IDaySortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDaySortInput {
  name?: ISortEnumType;
  codeDay?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentCategoryFilterInput {
  and?: Array<IDocumentCategoryFilterInput>;
  or?: Array<IDocumentCategoryFilterInput>;
  name?: IStringOperationFilterInput;
  description?: IStringOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  documentCategoryDetails?: IListFilterInputTypeOfDocumentCategoryDetailFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDocumentCategoryDetailFilterInput {
  all?: IDocumentCategoryDetailFilterInput;
  none?: IDocumentCategoryDetailFilterInput;
  some?: IDocumentCategoryDetailFilterInput;
  any?: boolean;
}

export interface IDocumentCategoryDetailFilterInput {
  and?: Array<IDocumentCategoryDetailFilterInput>;
  or?: Array<IDocumentCategoryDetailFilterInput>;
  documentId?: IComparableGuidOperationFilterInput;
  documentCategoryId?: IComparableGuidOperationFilterInput;
  document?: IDocumentFilterInput;
  documentCategory?: IDocumentCategoryFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IDocumentFilterInput {
  and?: Array<IDocumentFilterInput>;
  or?: Array<IDocumentFilterInput>;
  name?: IStringOperationFilterInput;
  url?: IStringOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  projectId?: IComparableGuidOperationFilterInput;
  documentTemplates?: IListFilterInputTypeOfDocumentTemplateFilterInput;
  documentCategoryDetails?: IListFilterInputTypeOfDocumentCategoryDetailFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDocumentTemplateFilterInput {
  all?: IDocumentTemplateFilterInput;
  none?: IDocumentTemplateFilterInput;
  some?: IDocumentTemplateFilterInput;
  any?: boolean;
}

export interface IDocumentTemplateFilterInput {
  and?: Array<IDocumentTemplateFilterInput>;
  or?: Array<IDocumentTemplateFilterInput>;
  name?: IStringOperationFilterInput;
  memberId?: IComparableGuidOperationFilterInput;
  documentId?: IComparableNullableOfGuidOperationFilterInput;
  document?: IDocumentFilterInput;
  templatePages?: IListFilterInputTypeOfTemplatePageFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfTemplatePageFilterInput {
  all?: ITemplatePageFilterInput;
  none?: ITemplatePageFilterInput;
  some?: ITemplatePageFilterInput;
  any?: boolean;
}

export interface ITemplatePageFilterInput {
  and?: Array<ITemplatePageFilterInput>;
  or?: Array<ITemplatePageFilterInput>;
  page?: IComparableNullableOfInt32OperationFilterInput;
  url?: IStringOperationFilterInput;
  templateId?: IComparableNullableOfGuidOperationFilterInput;
  documentTemplate?: IDocumentTemplateFilterInput;
  documentTags?: IListFilterInputTypeOfDocumentTagFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDocumentTagFilterInput {
  all?: IDocumentTagFilterInput;
  none?: IDocumentTagFilterInput;
  some?: IDocumentTagFilterInput;
  any?: boolean;
}

export interface IDocumentTagFilterInput {
  and?: Array<IDocumentTagFilterInput>;
  or?: Array<IDocumentTagFilterInput>;
  name?: IStringOperationFilterInput;
  height?: IComparableNullableOfDecimalOperationFilterInput;
  width?: IComparableNullableOfDecimalOperationFilterInput;
  verticalAxis?: IComparableNullableOfDecimalOperationFilterInput;
  horizontalAxis?: IComparableNullableOfDecimalOperationFilterInput;
  templatePageId?: IComparableNullableOfGuidOperationFilterInput;
  templatePage?: ITemplatePageFilterInput;
  documentScans?: IListFilterInputTypeOfDocumentScanFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfDocumentScanFilterInput {
  all?: IDocumentScanFilterInput;
  none?: IDocumentScanFilterInput;
  some?: IDocumentScanFilterInput;
  any?: boolean;
}

export interface IDocumentScanFilterInput {
  and?: Array<IDocumentScanFilterInput>;
  or?: Array<IDocumentScanFilterInput>;
  value?: IStringOperationFilterInput;
  documentTagId?: IComparableNullableOfGuidOperationFilterInput;
  documentReadId?: IComparableNullableOfGuidOperationFilterInput;
  documentTag?: IDocumentTagFilterInput;
  documentRead?: IDocumentReadFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IDocumentReadFilterInput {
  and?: Array<IDocumentReadFilterInput>;
  or?: Array<IDocumentReadFilterInput>;
  memberId?: IComparableNullableOfGuidOperationFilterInput;
  projectId?: IComparableNullableOfGuidOperationFilterInput;
  url?: IStringOperationFilterInput;
  documentScans?: IListFilterInputTypeOfDocumentScanFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IDocumentCategorySortInput {
  name?: ISortEnumType;
  description?: ISortEnumType;
  memberId?: ISortEnumType;
  projectId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentCategoryCollectionSegment {
  items?: Array<IDocumentCategory>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IDocumentCategory {
  documentCategoryDetails: Array<IDocumentCategoryDetail>;
  name?: string;
  description?: string;
  memberId: IUUID;
  projectId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocumentCategoryDetail {
  documentCategory?: IDocumentCategory;
  document?: IDocument;
  documentId: IUUID;
  documentCategoryId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocument {
  documentTemplates: Array<IDocumentTemplate>;
  documentCategoryDetails: Array<IDocumentCategoryDetail>;
  name?: string;
  url?: string;
  memberId: IUUID;
  projectId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocumentTemplate {
  document?: IDocument;
  templatePages: Array<ITemplatePage>;
  name?: string;
  memberId: IUUID;
  documentId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ITemplatePage {
  documentTemplate?: IDocumentTemplate;
  documentTags: Array<IDocumentTag>;
  page?: number;
  url?: string;
  templateId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocumentTag {
  templatePage?: ITemplatePage;
  documentScans: Array<IDocumentScan>;
  name?: string;
  height?: IDecimal;
  width?: IDecimal;
  verticalAxis?: IDecimal;
  horizontalAxis?: IDecimal;
  templatePageId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocumentScan {
  documentTag?: IDocumentTag;
  documentRead?: IDocumentRead;
  value?: string;
  documentTagId?: IUUID;
  documentReadId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocumentRead {
  documentScans?: Array<IDocumentScan>;
  memberId?: IUUID;
  projectId?: IUUID;
  url?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IDocumentCategoryDetailSortInput {
  documentId?: ISortEnumType;
  documentCategoryId?: ISortEnumType;
  document?: IDocumentSortInput;
  documentCategory?: IDocumentCategorySortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentSortInput {
  name?: ISortEnumType;
  url?: ISortEnumType;
  memberId?: ISortEnumType;
  projectId?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentCollectionSegment {
  items?: Array<IDocument>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IDocumentTemplateSortInput {
  name?: ISortEnumType;
  memberId?: ISortEnumType;
  documentId?: ISortEnumType;
  document?: IDocumentSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentTemplateCollectionSegment {
  items?: Array<IDocumentTemplate>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface ITemplatePageSortInput {
  page?: ISortEnumType;
  url?: ISortEnumType;
  templateId?: ISortEnumType;
  documentTemplate?: IDocumentTemplateSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface ITemplatePageCollectionSegment {
  items?: Array<ITemplatePage>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IDocumentTagSortInput {
  name?: ISortEnumType;
  height?: ISortEnumType;
  width?: ISortEnumType;
  verticalAxis?: ISortEnumType;
  horizontalAxis?: ISortEnumType;
  templatePageId?: ISortEnumType;
  templatePage?: ITemplatePageSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentScanSortInput {
  value?: ISortEnumType;
  documentTagId?: ISortEnumType;
  documentReadId?: ISortEnumType;
  documentTag?: IDocumentTagSortInput;
  documentRead?: IDocumentReadSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentReadSortInput {
  memberId?: ISortEnumType;
  projectId?: ISortEnumType;
  url?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IDocumentReadCollectionSegment {
  items?: Array<IDocumentRead>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IMutation {
  createMember: ICreateMemberPayload;
  loginMember: ILoginMemberPayload;
  createCompany: ICreateCompanyPayload;
  createProject: ICreateProjectPayload;
  generateSlug: string;
  createNewRoles: ICreateNewRolesPayload;
  createUser: ICreateUserPayload;
  createUserWithoutMail: ICreateUserPayload;
  updateProfile: IUpdateProfilePayload;
  updatePassword: IUpdatePasswordPayload;
  activeMember: IActiveMemberPayload;
  createProjectRole: ICreateProjectRolePayload;
  removeAccent: string;
  uploadPhotoProfile: IUploadPhotoProfilePayload;
  deleteProject: IDeleteProjectPayload;
  updateCompany: IUpdateCompanyPayload;
  restorePassword: IRestorePasswordPayload;
  recoverPassword: IRecoverPasswordPayload;
  verifyToken: IVerifyTokenPayload;
  createGroup: ICreateGroupPayload;
  addGroupToMember: IAddGroupToMemberPayload;
  addGroupToTaxonomy: IAddGroupToTaxonomyPayload;
  addTaxonomyToMember: IAddTaxonomyToMemberPayload;
  deleteGroup: IDeleteGroupPayload;
  deleteGroupTaxonomy: IDeleteGroupTaxonomyPayload;
  deleteMemberGroup: IDeleteMemberGroupMutationPayload;
  deleteMemberTaxonomy: IDeleteMemberTaxonomyPayload;
  deleteMember: string;
  deleteProjectRole: IDeleteProjectRolePayload;
  createUpdatePermission: ICreateUpdatePermissionPayload;
  updateProject: IUpdateProjectPayload;
  updateProjectRole: IUpdateProjectRolePayload;
  updateGroup: IUpdateGroupPayload;
  associationServiceToProject: IAssociationServiceToProjectPayload;
  createArrayFunction: ICreateArrayFunctionPayload;
  deleteArrayFunction: IDeleteArrayFunctionPayload;
  updateServiceProject: IUpdateServiceProjectPayload;
  deleteServiceProject: IDeleteServiceProjectPayload;
  createEventType: ICreateEventTypePayload;
  createSubEventType: ICreateSubEventTypePayload;
  deleteSubEventType: IDeleteSubEventTypePayload;
  updateSubEventType: IUpdateSubEventTypePayload;
  addSubTypeToEventType: IAddSubTypeToEventTypePayload;
  deleteEventType: IDeleteEventTypePayload;
  updateEventType: IUpdateEventTypePayload;
  createEvent: ICreateEventPayload;
  createEventMember: ICreateEventMemberPayload;
  updateEvent: IUpdateEventPayload;
  deleteEvent: IDeleteEventPayload;
  createEventSession: ICreateEventSessionPayload;
  updateEventSession: IUpdateEventSessionPayload;
  deleteEventSession: IDeleteEventSessionPayload;
  sendRecordatory: boolean;
  createSchedule: ICreateSchedulePayload;
  associationMemberToConsult: IAssociationMemberToConsultPayload;
  cancellationMemberToConsult: ICancellationMemberToConsultPayload;
  addChatMember: IAddChatMemberPayload;
  addChatMemberWs: IAddChatMemberWsPayload;
  conversationId: IGetConversationIdPayload;
  deleteReply: IDeleteReplyPayload;
  createArticle: ICreateArticlePayload;
  blog_generateSlug: string;
  updateStatusArticle: IUpdateStatusArticlePayload;
  createTaxonomy: ICreateTaxonomyPayload;
  updateArticle: IUpdateArticlePayload;
  updateTaxonomy: IUpdateTaxonomyPayload;
  deleteArticle: IDeleteArticlePayload;
  deleteTaxonomy: IDeleteTaxonomyPayload;
  newSurvey: INewSurveyPayload;
  updateSurvey: IUpdateSurveyPayload;
  deleteSurvey: IDeleteSurveyPayload;
  newQuestion: INewQuestionPayload;
  deleteQuestion: IDeleteQuestionPayload;
  updateQuestion: IUpdateQuestionPayload;
  newOption: INewOptionPayload;
  deleteOption: IDeleteOptionPayload;
  updateOption: IUpdateOptionPayload;
  answerQuestion: IAnswerQuestionPayload;
  createProduct: ICreateProductPayload;
  updateProduct: IUpdateProductPayload;
  deleteProduct: IDeleteProductPayload;
  createAddress: ICreateAddressPayload;
  updateAddress: IUpdateAddressPayload;
  deleteAddress: IDeleteAddressPayload;
  createUpdateShop: ICreateUpdateShopPayload;
  createService: IServicePayload;
  updateService: IServicePayload;
  deleteService: IUUID;
  createServiceQuiz: IServiceQuizPayload;
  updateServiceQuiz: IServiceQuizPayload;
  deleteServiceQuiz: IUUID;
  createQuiz: IQuizPayload;
  updateQuiz: IQuizPayload;
  deleteQuiz: IUUID;
  createQuizSection: IQuizSectionPayload;
  updateQuizSection: IQuizSectionPayload;
  deleteQuizSection: IUUID;
  createQuizQuestion: IQuizQuestionPayload;
  updateQuizQuestion: IQuizQuestionPayload;
  deleteQuizQuestion: IUUID;
  updateBatchQuizQuestion: Array<IUUID>;
  createQuizQuestionAnswer: IQuizQuestionAnswerPayload;
  updateQuizQuestionAnswer: IQuizQuestionAnswerPayload;
  deleteQuizQuestionAnswer: IQuizQuestionAnswerPayload;
  createQuizAnswer: IQuizAnswerPayload;
  updateQuizAnswer: IQuizAnswerPayload;
  deleteQuizAnswer: IUUID;
  createQuizMember: IQuizMemberPayload;
  updateQuizMember: IQuizMemberPayload;
  deleteQuizMember: IUUID;
  updateBatchQuizMember: Array<IUUID>;
  createQuizMemberAnswer: IQuizMemberAnswerPayload;
  updateQuizMemberAnswer: IQuizMemberAnswerPayload;
  deleteQuizMemberAnswer: IUUID;
  updateBatchQuizMemberAnswer: Array<IUUID>;
  createQuizMemberDescription: IQuizMemberDescriptionPayload;
  updateQuizMemberDescription: IQuizMemberDescriptionPayload;
  deleteQuizMemberDescription: IUUID;
  updateBatchQuizMemberDescription: Array<IUUID>;
  createUpdateContactEmail: ICreateUpdateContactEmailPayload;
  sendEmail: ISendEmailPayload;
  deleteContactEmail: IDeleteContactEmailPayload;
  createMethodPayment: ICreateMethodPaymentPayload;
  updateMethodPayment: IUpdateMethodPaymentPayload;
  deleteMethodPayment: IDeleteMethodPaymentPayload;
  createPaymentStripe: ICreatePaymentStripePayload;
  createPaymentStripeToAccount: ICreatePaymentStripePayload;
  createSuscriptionStripe: ICreateSuscriptionStripePayload;
  createAccountStripe: ICreateStripeAccountPayload;
  deletePayment: IDeletePaymentPayload;
  updatePayment: IUpdatePaymentPayload;
  createInvoice: ICreateInvoicePayload;
  updateStatusInvoice: IUpdateStatusInvoicePayload;
  putConfig: IPutConfigPayload;
  deleteConfig: IDeleteConfigPayload;
  updateOrderPages: IUpdateOrderPagesPayload;
  updateBatchWewbsiteComponent: IUpdateBatchWewbsiteComponentPayload;
  createComponent: ICreateComponentPayload;
  createWebsiteComponent: ICreateWebsiteComponentPayload;
  createWebsitePage: ICreateWebsitePagePayload;
  createWebsiteSeo: ICreateWebsiteSeoPayload;
  updateComponent: IUpdateComponentPayload;
  updateWebsiteComponent: IUpdateWebsiteComponentPayload;
  updateWebsitePage: IUpdateWebsitePagePayload;
  updateWebsiteSeo: IUpdateWebsiteSeoPayload;
  deleteComponent: IDeleteComponentPayload;
  deleteWebsiteComponent: IDeleteWebsiteComponentPayload;
  deleteWebsitePage: IDeleteWebsitePagePayload;
  deleteWebsiteSeo: IDeleteWebsiteSeoPayload;
  createVideoCall: ICreateVideoCallPayload;
  updateVideoCall: IUpdateVideoCallPayload;
  deleteVideoCall: IDeleteVideoCallPayload;
  createAccessToken: IRoomAccessToken;
  createVideoRoom: ICreateVideoRoomPayload;
  sendNotification: ISendNotificationUsersPayload;
  sendEmailDownload: ISendEmailDownloadPayload;
  createQuote: ICreateQuotePayload;
  createNewOffices: ICreateNewOfficesPayload;
  createNewProfiles: ICreateNewProfilesPayload;
  createInsurer: ICreateInsurerPayload;
  createOffice: ICreateOfficePayload;
  createRegistration: ICreateRegistrationPayload;
  createQuatorProfile: ICreateQuatorProfilePayload;
  deleteInsurer: IDeleteInsurerPayload;
  deleteOffice: IDeleteOfficePayload;
  deleteQuoterProfile: IDeleteQuoterProfilePayload;
  updateInsurer: IUpdateInsurerPayload;
  updateOffice: IUpdateOfficePayload;
  updateQuoterProfile: IUpdateQuoterProfilePayload;
  createCatalog: ICreateCatalogPayload;
  populateCredentials: IPopulateCredentialsPayload;
  populateServices: IPopulateServicesPayload;
  runServiceQuote?: IRunServicePayload;
  emissionCar: IEmissionCarPayload;
  createStaffQuote: IStaffQuotePayload;
  updateStaffQuote: IStaffQuotePayload;
  deleteStaffQuote: IUUID;
  createProposal: IProposalPayload;
  updateProposal: IProposalPayload;
  deleteProposal: IUUID;
  createCollaborator: ICollaboratorPayload;
  updateCollaborator: ICollaboratorPayload;
  deleteCollaborator: IUUID;
  associationWithQuoterProfile: IAssociationWithQuoterProfilePayload;
  updateQuote: IUpdateQuotePayload;
  createInsurerCredential: ICreateInsurerCredentialPayload;
  updateInsurerCredential: IUpdateInsurerCredentialPayload;
  runJobInsurerMutation: IRunJobInsurerMutationPayload;
  associationRelationCar: IAssociationRelationCarPayload;
  createDynamicCustomMeta: IDynamicCustomMetaPayload;
  updateDynamicCustomMeta: IDynamicCustomMetaPayload;
  deleteDynamicCustomMeta: IUUID;
  updateBatchDynamicCustomMeta: Array<IUUID>;
  createDynamicCustomValue: IDynamicCustomValuePayload;
  updateDynamicCustomValue: IDynamicCustomValuePayload;
  deleteDynamicCustomValue: IUUID;
  updateBatchDynamicCustomValue: Array<IUUID>;
  createDynamicPage: IDynamicPagePayload;
  updateDynamicPage: IDynamicPagePayload;
  deleteDynamicPage: IUUID;
  createDynamicBlock: IDynamicBlockPayload;
  updateDynamicBlock: IDynamicBlockPayload;
  deleteDynamicBlock: IUUID;
  createDynamicSection: IDynamicSectionPayload;
  updateDynamicSection: IDynamicSectionPayload;
  deleteDynamicSection: IUUID;
  createDynamicSectionBlock: IDynamicSectionBlockPayload;
  updateDynamicSectionBlock: IDynamicSectionBlockPayload;
  deleteDynamicSectionBlock: IUUID;
  createDynamicTab: IDynamicTabPayload;
  updateDynamicTabBlock: IDynamicTabPayload;
  deleteDynamicTab: IUUID;
  createCharge: ICreateChargePayload;
  createClinicHistory: ICreateClinicHistoryPayload;
  createClinicHistoryMedicalBackgroundDetail: ICreateClinicHistoryMedicalBackgroundDetailPayload;
  createEventDetail: ICreateEventDetailPayload;
  createFisicExam: ICreateFisicExamPayload;
  createFormat: ICreateFormatPayload;
  createMedicalBackgroundDetail: ICreateMedicalBackgroundDetailPayload;
  createMedicalBackground: ICreateMedicalBackgroundPayload;
  createMedicalConfig: ICreateMedicalConfigPayload;
  createMedicalService: ICreateMedicalServicePaylod;
  createMedicine: ICreateMedicinePayload;
  createVaccine: ICreateVaccinePayload;
  createVitalSigns: ICreateVitalSignsPayload;
  createMedicRecipe: ICreateMedicRecipePayload;
  createRecipeConfig: ICreateRecipeConfigPaylod;
  createRegistSesion: ICreateRegistSesionPayload;
  createPacientNote: ICreatePacientNotePayload;
  createTherapy: ICreateChargePayload;
  createDiagnostic: ICreateDiagnosticPayload;
  createConsultNote: ICreateConsultNotePayload;
  createMedicalBackgroundSet: ICreateMedicalBackgroundSetPayload;
  createMedicalBackgroundTemplate: boolean;
  createVitalSignsTemplate: boolean;
  createPacientMedicalBackground: ICreatePacientMedicalBackgroundPaylod;
  createPatientVitalSignsResponse: ICreatePatientVitalSignsResponsePayload;
  updateCharge: IUpdateChargePayload;
  updateClinicHistory: IUpdateClinicHistoryPayloads;
  updateClinicHistoryMedicalBackgroundDetail: IUpdateClinicHistoryMedicalBackgroundDetailPayload;
  updateEventDetail: IUpdateEventDetailtPayload;
  updateFisicExam: IUpdateFisicExamPayload;
  updateFormat: IUpdateFormatPayload;
  updateMedicalBackgroundDetail: IUpdateMedicalBackgroundDetailPayload;
  updateMedicalBackground: IUpdateMedicalBackgroundPayload;
  updateMedicalConfig: IUpdateMedicalConfigPayload;
  updateMedicalService: IUpdateMedicalServicePayload;
  updateMedicine: IUpdateMedicinePayload;
  updateVaccine: IUpdateVaccinePayload;
  updateVitalSigns: IUpdateVitalSingsPayloads;
  updateMedicRecipe: IUpdateMedicRecipePayload;
  updateRecipeConfig: IUpdateRecipeConfigPayload;
  updateRegistSesion: IUpdateRegistSesionPayload;
  updatePacientNote: IUpdatePacientNotePayload;
  updateTherapy: IUpdateTherapyPayload;
  updateDiagnostic: IUpdateDiagnosticPayload;
  updateConsultNote: IUpdateConsultNotePayload;
  updatePacientMedicalBackground: IUpdatePacientMedicalBackgroundPayload;
  updateBillingRequest: IUpdateBillingRequestPayload;
  updateSortFormat: IUpdateSortFormatPayload;
  updatePatientVitalSignsResponse: IUpdatePatientVitalSignsResponsePayloads;
  deleteCharge: IDeleteChargePayload;
  deleteClinicHistory: IDeleteClinicHistoryPayload;
  deleteClinicHistoryMedicalBackgrounDetail: IDeleteClinicHistoryMedicalBackgroundDetailPayload;
  deleteConsult: IDeleteConsultPayload;
  deleteFisicExam: IDeleteFisicalExamPayload;
  deleteMedicalBackgroundDetail: IDeleteMedicalBackgroundDetailPayload;
  deleteMedicalBackground: IDeleteMedicalBackgroundPayload;
  deleteMedicalConfig: IDeleteMedicalConfigPayload;
  deleteMedicalService: IDeleteMedicalServicePayload;
  deleteMedicine: IDeleteMedicinePayload;
  deleteVaccine: IDeleteVaccinePayload;
  deleteVitalSign: IDeleteVitalSignPayload;
  deleteMedicRecipe: IDeleteMedicRecipePayload;
  deleteRecipeConfig: IDeleteRecipeConfigPayload;
  deleteRegistSesion: IDeleteRegistSesionPayload;
  deleteTherapy: IDeleteTherapyPayload;
  deleteDiagnostic: IDeleteDiagnosticPayload;
  deleteConsultNote: IDeleteConsultNotePayload;
  deletePacientNote: IDeletePacientNotePayload;
  deletePacientMedicalBackground: IDeletePacientMedicalBackgroundPayload;
  deleteBillingRequest: IDeleteBillingRequestPayload;
  deleteFormat: IDeleteFormatPayload;
  printWithImageFromUrl: ICreatePDFPayload;
  createApiService: ICreateApiServicePayload;
  updateApiService: IUpdateApiServicePayload;
  createFolder: IFolderPayload;
  updateFolder: IFolderPayload;
  deleteFolder: IDeleteFolderPayLoad;
  createFile: ICreateFilePayload;
  updateFile: IUpdateFilesPayload;
  deleteFile: IDeleteFilePayLoad;
  shareFile: IShareFilePayload;
  shareFolder: IShareFolderPayload;
  stopSharingFolder: IStopSharingFolderPayload;
  stopSharingFile: IStopSharingFilePayload;
  uploadFilePrivate: IUploadFilePrivatePayload;
  createRoomSession?: IRoomSession;
  deleteRoomSession?: IRoomSession;
  startRoomRecorder?: boolean;
  stopRoomRecorder?: IRoomRecorderReturn;
  createHiring: IHiringPayload;
  updateHiring: IHiringPayload;
  deleteHiring: IUUID;
  createHiringType: IHiringTypePayload;
  updateHiringType: IHiringTypePayload;
  deleteHiringType: IUUID;
  createShift: IShiftPayload;
  updateShift: IShiftPayload;
  deleteShift: IUUID;
  createDocumentCategory: IDocumentCategoryPayload;
  updateDocumentCategory: IDocumentCategoryPayload;
  deleteDocumentCategory: IUUID;
  createDocumentCategoryDetail: IDocumentCategoryDetailPayload;
  updateDocumentCategoryDetail: IDocumentCategoryDetailPayload;
  deleteDocumentCategoryDetail: IUUID;
  createDocument: IDocumentPayload;
  updateDocument: IDocumentPayload;
  deleteDocument: IUUID;
  createDocumentTemplate: IDocumentTemplatePayload;
  updateDocumentTemplate: IDocumentTemplatePayload;
  deleteDocumentTemplate: IUUID;
  createTemplatePage: ITemplatePagePayload;
  updateTemplatePage: ITemplatePagePayload;
  deleteTemplatePage: IUUID;
  createDocumentTag: IDocumentTagPayload;
  updateDocumentTag: IDocumentTagPayload;
  deleteDocumentTag: IUUID;
  createDocumentScan: IDocumentScanPayload;
  updateDocumentScan: IDocumentScanPayload;
  deleteDocumentScan: IUUID;
  createDocumentRead: IDocumentReadPayload;
  updateDocumentRead: IDocumentReadPayload;
  deleteDocumentRead: IUUID;
  readTextFromImage: ICreateTemplatePayload;
}

export interface ICreateMemberInput {
  email: string;
  password: string;
  firstName?: string;
  lastName?: string;
  phone?: string;
  photo?: string;
  isActive: boolean;
  roleCode?: string;
  countryCode?: string;
  companyId?: string;
}

export interface ICreateMemberPayload {
  accessToken: string;
  member: IMember;
}

export interface ILoginMemberInput {
  email: string;
  password: string;
  projectId?: string;
}

export interface ILoginMemberPayload {
  accessToken: string;
  member: IMember;
}

export interface ICreateCompanyInput {
  name: string;
}

export interface ICreateCompanyPayload {
  company: ICompany;
}

export interface ICreateProjectInput {
  companyId: IUUID;
  name: string;
  description: string;
  industryId: IUUID;
  logo: string;
  tagLine: string;
  url?: string;
}

export interface ICreateProjectPayload {
  project: IProject;
}

export interface ICreateNewRolesPayload {
  message: string;
}

export interface ICreateUserInput {
  projectId: IUUID;
  email: string;
  url: string;
  password: string;
  maritalStatus?: IMaritalStatus;
  gender?: IGender;
  quatorProfileId?: string;
  firstName?: string;
  lastName?: string;
  photo?: string;
  phone?: string;
  biography?: string;
  siteUrl?: string;
  siteLogo?: string;
  cURP?: string;
  rFC?: string;
  nSS?: string;
  infonavitCredit?: string;
  nationality?: string;
  age?: number;
  dateOfBirth?: string;
  isActive: boolean;
  projectRoleCode?: string;
  countryCode?: string;
}

export interface ICreateUserPayload {
  accessToken: string;
  member: IMember;
}

export interface ICreateUserWithoutMailInput {
  projectId: IUUID;
  email: string;
  url?: string;
  password: string;
  roleCode?: string;
  maritalStatus?: IMaritalStatus;
  gender?: IGender;
  quatorProfileId?: string;
  firstName?: string;
  lastName?: string;
  photo?: string;
  phone?: string;
  biography?: string;
  siteUrl?: string;
  siteLogo?: string;
  cURP?: string;
  rFC?: string;
  nSS?: string;
  infonavitCredit?: string;
  nationality?: string;
  age?: number;
  dateOfBirth?: string;
  isActive: boolean;
  projectRoleCode?: string;
  countryCode?: string;
}

export interface IUpdateProfileInput {
  firstName?: string;
  lastName?: string;
  maritalStatus?: IMaritalStatus;
  gender?: IGender;
  companyName?: string;
  photo?: string;
  phone?: string;
  roleCode?: string;
  bussinessName?: string;
  countryCode: string;
  memberId?: string;
  projectRoleCode?: string;
  quatorProfileId?: string;
  biography?: string;
  siteUrl?: string;
  siteLogo?: string;
  cURP?: string;
  rFC?: string;
  nSS?: string;
  infonavitCredit?: string;
  nationality?: string;
  age?: number;
  dateOfBirth?: string;
}

export interface IUpdateProfilePayload {
  member: IMember;
}

export interface IUpdatePasswordInput {
  currentPassword: string;
  newPassword: string;
  memberId: string;
}

export interface IUpdatePasswordPayload {
  member: IMember;
}

export interface IActiveMemberInput {
  memberId: string;
  active: boolean;
}

export interface IActiveMemberPayload {
  member: IMember;
}

export interface ICreateProjectRoleInput {
  projectId: IUUID;
  name: string;
  isActive?: boolean;
  label?: string;
  description?: string;
}

export interface ICreateProjectRolePayload {
  projectRole: IProjectRole;
}

export interface IUploadPhotoProfileInput {
  photo: string;
  memberId: string;
}

export interface IUploadPhotoProfilePayload {
  member: IMember;
}

export interface IDeleteProjectInput {
  projectId: IUUID;
}

export interface IDeleteProjectPayload {
  project: IProject;
}

export interface IUpdateCompanyInput {
  companyId: IUUID;
  name?: string;
  industryId?: string;
  photo?: string;
  tagLine?: string;
}

export interface IUpdateCompanyPayload {
  company: ICompany;
}

export interface IRestorePasswordInput {
  newPassword: string;
  memberId: string;
}

export interface IRestorePasswordPayload {
  member: IMember;
}

export interface IRecoverPasswordInput {
  email: string;
  url: string;
  projectId?: string;
}

export interface IRecoverPasswordPayload {
  member: IMember;
}

export interface IVerifyTokenInput {
  token: string;
}

export interface IVerifyTokenPayload {
  member: IMember;
}

export interface ICreateGroupInput {
  projectId: IUUID;
  name: string;
  description?: string;
}

export interface ICreateGroupPayload {
  group: IGroup;
}

export interface IAddGroupToMemberInput {
  groupId: IUUID;
  memberId: IUUID;
}

export interface IAddGroupToMemberPayload {
  memberGroup: IMemberGroup;
}

export interface IMemberGroup {
  memberId: IUUID;
  member: IMember;
  groupId: IUUID;
  group: IGroup;
}

export interface IAddGroupToTaxonomyInput {
  groupId: IUUID;
  taxonomyId: IUUID;
}

export interface IAddGroupToTaxonomyPayload {
  groupTaxonomy: IGroupTaxonomy;
}

export interface IAddTaxonomyToMemberInput {
  memberId: IUUID;
  taxonomyId: IUUID;
}

export interface IAddTaxonomyToMemberPayload {
  memberTaxonomy: IMemberTaxonomy;
}

export interface IDeleteGroupInput {
  groupId: IUUID;
}

export interface IDeleteGroupPayload {
  member: IGroup;
}

export interface IDeleteGroupTaxonomyInput {
  groupId: IUUID;
  taxonomyId: IUUID;
}

export interface IDeleteGroupTaxonomyPayload {
  memberTaxonomy: IGroupTaxonomy;
}

export interface IDeleteMemberGroupMutationInput {
  memberId: IUUID;
  groupId: IUUID;
}

export interface IDeleteMemberGroupMutationPayload {
  memberGroup: IMemberGroup;
}

export interface IDeleteMemberTaxonomyInput {
  memberId: IUUID;
  taxonomyId: IUUID;
}

export interface IDeleteMemberTaxonomyPayload {
  memberTaxonomy: IMemberTaxonomy;
}

export interface IDeleteProjectRoleInput {
  id: IUUID;
  projectId: IUUID;
}

export interface IDeleteProjectRolePayload {
  message: string;
}

export interface ICreateUpdatePermissionInput {
  projectId: IUUID;
  projectRoleId: IUUID;
  rules: string;
}

export interface ICreateUpdatePermissionPayload {
  permission: IPermission;
}

export interface IUpdateProjectInput {
  projectId: IUUID;
  name?: string;
  description?: string;
  logo?: string;
  tagLine?: string;
  url?: string;
  industryId?: string;
}

export interface IUpdateProjectPayload {
  project: IProject;
}

export interface IUpdateProjectRoleInput {
  projectRoleId: IUUID;
  isActive?: boolean;
  name?: string;
  label?: string;
  description?: string;
}

export interface IUpdateProjectRolePayload {
  projectRole: IProjectRole;
}

export interface IUpdateGroupInput {
  groupId: IUUID;
  name?: string;
  description?: string;
}

export interface IUpdateGroupPayload {
  group: IGroup;
}

export interface IAssociationServiceToProjectInput {
  projectId: IUUID;
  codeNames: Array<string>;
}

export interface IAssociationServiceToProjectPayload {
  projectMicroservice: IProjectMicroservice;
}

export interface ICreateArrayFunctionInput {
  service: string;
  functions: Array<IFunctionArrayInput>;
}

export interface IFunctionArrayInput {
  name: string;
  codeName: string;
  functionType: IFunctionType;
}

export interface ICreateArrayFunctionPayload {
  service: IMicroservice;
}

export interface IDeleteArrayFunctionInput {
  service: string;
  functions: Array<IFunctionArrayInput>;
}

export interface IDeleteArrayFunctionPayload {
  service: IMicroservice;
}

export interface IUpdateServiceProjectInput {
  projectId: IUUID;
  codeName: string;
  isActive?: boolean;
  label?: string;
}

export interface IUpdateServiceProjectPayload {
  message: string;
}

export interface IDeleteServiceProjectInput {
  projectId: IUUID;
  codeName: string;
}

export interface IDeleteServiceProjectPayload {
  message: string;
}

export interface ICreateEventTypeInput {
  projectId: IUUID;
  subEventTypes?: Array<IUUID>;
  image?: string;
  name: string;
  description: string;
  price: IDecimal;
}

export interface ICreateEventTypePayload {
  message: string;
}

export interface ICreateSubEventTypeInput {
  name: string;
  price: IDecimal;
}

export interface ICreateSubEventTypePayload {
  subEventType: ISubEventType;
}

export interface IDeleteSubEventTypeInput {
  subEventTypeId: IUUID;
}

export interface IDeleteSubEventTypePayload {
  message: string;
}

export interface IUpdateSubEventTypeInput {
  subEventTypeId: IUUID;
  name?: string;
  price?: IDecimal;
}

export interface IUpdateSubEventTypePayload {
  message: string;
}

export interface IAddSubTypeToEventTypeInput {
  eventTypeId: IUUID;
  subEventTypes: Array<IUUID>;
}

export interface IAddSubTypeToEventTypePayload {
  message: string;
}

export interface IDeleteEventTypePayload {
  message: string;
}

export interface IUpdateEventTypeInput {
  eventTypeId: IUUID;
  projectId?: IUUID;
  name?: string;
  image?: string;
  price?: IDecimal;
  description?: string;
}

export interface IUpdateEventTypePayload {
  message: string;
}

export interface ICreateEventInput {
  projectId: IUUID;
  memberId: IUUID;
  description: string;
  eventDate: string;
  totalPrice?: IDecimal;
  discount?: IDecimal;
  sendDetails?: boolean;
  sendRemember?: boolean;
  members?: Array<string>;
  eventTypeId?: IUUID;
  eventMode: IEventMode;
  title?: string;
  roomId?: string;
  file?: string;
  location?: string;
  eventSessionId?: string;
  color?: string;
  finishDate?: string;
  charges?: Array<IEventChargeInput>;
  visibility: IEventVisibility;
}

export interface IEventChargeInput {
  price: IDecimal;
  description?: string;
}

export interface ICreateEventPayload {
  eventCalendar: IEvent;
}

export interface ICreateEventMemberInput {
  memberId: IUUID;
  eventId: IUUID;
}

export interface ICreateEventMemberPayload {
  message: string;
}

export interface IUpdateEventInput {
  eventId: IUUID;
  description?: string;
  eventTypeId?: IUUID;
  sendDetails?: boolean;
  visibility?: IEventVisibility;
  charges?: Array<IEventChargeInput>;
  sendRemember?: boolean;
  members?: Array<string>;
  eventMode: IEventMode;
  title?: string;
  eventDate?: string;
  roomId?: string;
  file?: string;
  location?: string;
  eventSessionId?: string;
  color?: string;
  totalPrice?: IDecimal;
  discount?: IDecimal;
}

export interface IUpdateEventPayload {
  eventCalendar: IEvent;
}

export interface IDeleteEventInput {
  eventId: IUUID;
}

export interface IDeleteEventPayload {
  message: string;
}

export interface ICreateEventSessionInput {
  projectId: IUUID;
  price: IDecimal;
  title?: string;
  image?: string;
  description?: string;
  duration: number;
  eventMode: IEventMode;
}

export interface ICreateEventSessionPayload {
  eventSession: IEventSession;
}

export interface IUpdateEventSessionInput {
  eventSessionId: IUUID;
  price: IDecimal;
  title?: string;
  image?: string;
  description?: string;
  duration: number;
  eventMode: IEventMode;
}

export interface IUpdateEventSessionPayload {
  eventSession: IEventSession;
}

export interface IDeleteEventSessionInput {
  eventSessionId: IUUID;
}

export interface IDeleteEventSessionPayload {
  message: string;
}

export interface ICreateScheduleInput {
  projectId: IUUID;
  memberId: IUUID;
  eventTypeId: IUUID;
  schedule: Array<IScheduleDtoInput>;
}

export interface IScheduleDtoInput {
  turns: Array<ITurnsDtoInput>;
  monday: boolean;
  tuesday: boolean;
  thursday: boolean;
  wednesday: boolean;
  friday: boolean;
  saturday: boolean;
  sunday: boolean;
}

export interface ITurnsDtoInput {
  timeStart: string;
  timeEnd: string;
}

export interface ICreateSchedulePayload {
  message: string;
}

export interface IAssociationMemberToConsultInput {
  memberId: IUUID;
  eventId: IUUID;
}

export interface IAssociationMemberToConsultPayload {
  message: string;
}

export interface ICancellationMemberToConsultInput {
  memberId: IUUID;
  eventId: IUUID;
}

export interface ICancellationMemberToConsultPayload {
  message: string;
}

export interface IAddChatMemberInput {
  projectId: IUUID;
  memberId: IUUID;
  toMemberId: IUUID;
  message: string;
}

export interface IAddChatMemberPayload {
  conversationReplies: Array<IConversationReply>;
}

export interface IAddChatMemberWsInput {
  projectId: IUUID;
  memberId: IUUID;
  toMemberId: IUUID;
  message: string;
}

export interface IAddChatMemberWsPayload {
  conversationReplies: Array<IConversationReply>;
}

export interface IGetConversationIdInput {
  projectId: IUUID;
  memberId: IUUID;
  toMemberId: IUUID;
}

export interface IGetConversationIdPayload {
  conversationId: IUUID;
}

export interface IDeleteReplyInput {
  replyId: IUUID;
}

export interface IDeleteReplyPayload {
  message: string;
}

export interface ICreateArticleInput {
  projectId: IUUID;
  groupId?: IUUID;
  title: string;
  typeContent?: ITypeContent;
  categories?: Array<string>;
  tags?: Array<string>;
  photo?: string;
  resume?: string;
  content?: string;
  slug?: string;
  seoTitle?: string;
  seoDescription?: string;
  seoKeywords?: string;
  structuredMarking?: string;
  seoArticle?: string;
  imageAlt?: string;
  releaseDate?: string;
  embedContent?: string;
  status?: string;
}

export interface ICreateArticlePayload {
  article: IArticle;
}

export interface IUpdateStatusArticleInput {
  articleId: IUUID;
  status: string;
}

export interface IUpdateStatusArticlePayload {
  article: IArticle;
}

export interface ICreateTaxonomyInput {
  projectId: IUUID;
  name: string;
  isPublic?: boolean;
  slug?: string;
  termGroup?: string;
  parentId?: string;
  photo: string;
  tagLine?: string;
  tagLine2?: string;
  description?: string;
}

export interface ICreateTaxonomyPayload {
  taxonomy: ITaxonomy;
}

export interface IUpdateArticleInput {
  articleId: IUUID;
  groupId?: IUUID;
  categories: Array<string>;
  title: string;
  tags?: Array<string>;
  typeContent?: ITypeContent;
  photo?: string;
  resume?: string;
  content?: string;
  slug?: string;
  seoTitle?: string;
  seoDescription?: string;
  seoKeywords?: string;
  structuredMarking?: string;
  imageAlt?: string;
  releaseDate?: string;
  status?: string;
  embedContent?: string;
  seoArticle?: string;
}

export interface IUpdateArticlePayload {
  article: IArticle;
}

export interface IUpdateTaxonomyInput {
  taxonomyId: IUUID;
  isPublic?: boolean;
  name?: string;
  slug?: string;
  parentId?: string;
  photo?: string;
  tagLine?: string;
  tagLine2?: string;
  description?: string;
}

export interface IUpdateTaxonomyPayload {
  taxonomy: ITaxonomy;
}

export interface IDeleteArticleInput {
  articleId: IUUID;
}

export interface IDeleteArticlePayload {
  article: IArticle;
}

export interface IDeleteTaxonomyInput {
  taxonomyId: IUUID;
}

export interface IDeleteTaxonomyPayload {
  taxonomy: ITaxonomy;
}

export interface INewSurveyInput {
  articleId: IUUID;
}

export interface INewSurveyPayload {
  survey: ISurvey;
}

export interface IUpdateSurveyInput {
  surveyId: IUUID;
  isActive?: boolean;
  title?: string;
  description?: string;
  thankYouMessage?: string;
}

export interface IUpdateSurveyPayload {
  survey: ISurvey;
}

export interface IDeleteSurveyInput {
  surveyId: IUUID;
}

export interface IDeleteSurveyPayload {
  survey: ISurvey;
}

export interface INewQuestionInput {
  surveyId: IUUID;
  type: IQuestionType;
}

export interface INewQuestionPayload {
  question: IQuestion;
}

export interface IDeleteQuestionInput {
  questionId: IUUID;
}

export interface IDeleteQuestionPayload {
  question: IQuestion;
}

export interface IUpdateQuestionInput {
  questionId: IUUID;
  position: number;
  type: IQuestionType;
  isRequired?: boolean;
  allowsFileUpload?: boolean;
  title?: string;
  image?: string;
}

export interface IUpdateQuestionPayload {
  question: IQuestion;
}

export interface INewOptionInput {
  questionId: IUUID;
}

export interface INewOptionPayload {
  option: IOption;
}

export interface IDeleteOptionInput {
  optionId: IUUID;
}

export interface IDeleteOptionPayload {
  option: IOption;
}

export interface IUpdateOptionInput {
  optionId: IUUID;
  position: number;
  title?: string;
}

export interface IUpdateOptionPayload {
  option: IOption;
}

export interface IAnswerQuestionInput {
  memberId: IUUID;
  answerings: Array<IAnsweringDTOInput>;
}

export interface IAnsweringDTOInput {
  questionId: IUUID;
  options?: Array<string>;
  responseText?: string;
  uploadFile?: string;
}

export interface IAnswerQuestionPayload {
  message: string;
}

export interface ICreateProductInput {
  projectId: IUUID;
  categories: Array<string>;
  title: string;
  shopType?: IShopType;
  sku: string;
  price: IDecimal;
  stock: number;
  shippingPrice?: IDecimal;
  offerPrice?: IDecimal;
  images?: Array<string>;
  shippingType?: string;
  photo?: string;
  description?: string;
  slug?: string;
  seoProduct?: string;
  publishDate?: string;
  status: IProductStatus;
}

export interface ICreateProductPayload {
  product: IProduct;
}

export interface IUpdateProductInput {
  productId: IUUID;
  categories?: Array<string>;
  shopType?: IShopType;
  status?: IProductStatus;
  price?: IDecimal;
  stock?: number;
  shippingPrice?: IDecimal;
  offerPrice?: IDecimal;
  images?: Array<string>;
  title?: string;
  sku?: string;
  shippingType?: string;
  photo?: string;
  description?: string;
  slug?: string;
  seoProduct?: string;
  publishDate?: string;
}

export interface IUpdateProductPayload {
  product: IProduct;
}

export interface IDeleteProductInput {
  productId: IUUID;
}

export interface IDeleteProductPayload {
  product: IProduct;
}

export interface ICreateAddressInput {
  projectId: IUUID;
  memberId: IUUID;
  firstName: string;
  lastName: string;
  countryName: string;
  state: string;
  city: string;
  subUrb: string;
  zipCode: string;
  addressLine1: string;
  addressLine2: string;
  phone: string;
  addressDetails: string;
  addressType: string;
  isPrincipal?: boolean;
  businessName?: string;
  rFC?: string;
}

export interface ICreateAddressPayload {
  address: IAddress;
}

export interface IUpdateAddressInput {
  addressId: IUUID;
  isPrincipal?: boolean;
  firstName?: string;
  lastName?: string;
  countryName?: string;
  state?: string;
  city?: string;
  subUrb?: string;
  zipCode?: string;
  addressLine1?: string;
  addressLine2?: string;
  phone?: string;
  addressDetails?: string;
  addressType?: string;
  businessName?: string;
  rFC?: string;
}

export interface IUpdateAddressPayload {
  address: IAddress;
}

export interface IDeleteAddressInput {
  addressId: IUUID;
}

export interface IDeleteAddressPayload {
  address: IAddress;
}

export interface ICreateUpdateShopInput {
  projectId: IUUID;
  shopType: IShopType;
  profileUrl?: string;
}

export interface ICreateUpdateShopPayload {
  shop: IShop;
}

export interface IServiceInput {
  name?: string;
  description?: string;
  projectId?: IUUID;
}

export interface IServicePayload {
  service: IService;
}

export interface IServiceQuizInput {
  quizId: IUUID;
  serviceId: IUUID;
}

export interface IServiceQuizPayload {
  serviceQuiz: IServiceQuiz;
}

export interface IQuizInput {
  name?: string;
  description?: string;
  projectId?: IUUID;
}

export interface IQuizPayload {
  quiz: IQuiz;
}

export interface IQuizSectionInput {
  name?: string;
  description?: string;
  quizId?: IUUID;
}

export interface IQuizSectionPayload {
  quizSection: IQuizSection;
}

export interface IQuizQuestionInput {
  question?: string;
  type?: IQuiz_QuestionType;
  quizSectionId?: IUUID;
  active?: boolean;
}

export interface IQuizQuestionPayload {
  quizQuestion: IQuizQuestion;
}

export interface IUpdateBatchQuizQuestionInput {
  new?: Array<IQuizQuestionInput>;
  zippedData?: Array<IQuizQuestionZippedInput>;
  deleteable?: Array<IUUID>;
}

export interface IQuizQuestionZippedInput {
  id: IUUID;
  question: IQuizQuestionInput;
}

export interface IQuizQuestionAnswerInput {
  quizQuestionId: IUUID;
  quizAnswerId: IUUID;
}

export interface IQuizQuestionAnswerPayload {
  questionAnswer: IQuizQuestionAnswer;
}

export interface IQuizAnswerInput {
  description?: string;
  active?: boolean;
}

export interface IQuizAnswerPayload {
  quizAnswer: IQuizAnswer;
}

export interface IQuizMemberInput {
  quizQuestionId?: IUUID;
  active?: boolean;
}

export interface IQuizMemberPayload {
  quizMember: IQuizMember;
}

export interface IUpdateBatchQuizMemberInput {
  new?: Array<IQuizMemberInput>;
  zippedData?: Array<IQuizMemberZippedInput>;
  deleteable?: Array<IUUID>;
}

export interface IQuizMemberZippedInput {
  id: IUUID;
  member: IQuizMemberInput;
}

export interface IQuizMemberAnswerInput {
  quizMemberId?: IUUID;
  quizAnswerId?: IUUID;
  active?: boolean;
}

export interface IQuizMemberAnswerPayload {
  memberAnswer: IQuizMemberAnswer;
}

export interface IUpdateBatchQuizMemberAnswerInput {
  new?: Array<IQuizMemberAnswerInput>;
  zippedData?: Array<IQuizMemberAnswerZippedInput>;
  deleteable?: Array<IUUID>;
}

export interface IQuizMemberAnswerZippedInput {
  id: IUUID;
  member: IQuizMemberAnswerInput;
}

export interface IQuizMemberDescriptionInput {
  quizMemberId?: IUUID;
  description?: string;
  active?: boolean;
}

export interface IQuizMemberDescriptionPayload {
  memberDescription: IQuizMemberDescription;
}

export interface IUpdateBatchQuizMemberDescriptionInput {
  new?: Array<IQuizMemberDescriptionInput>;
  zippedData?: Array<IQuizMemberDescriptionZippedInput>;
  deleteable?: Array<IUUID>;
}

export interface IQuizMemberDescriptionZippedInput {
  id: IUUID;
  member: IQuizMemberDescriptionInput;
}

export interface ICreateUpdateContactEmailInput {
  projectId: IUUID;
  contactEmail: string;
  fullName: string;
  fromEmail?: string;
  fromName?: string;
  sendGridKey?: string;
  sendGridTemplateId?: string;
  description?: string;
}

export interface ICreateUpdateContactEmailPayload {
  contactEmail: IContactEmail;
}

export interface ISendEmailInput {
  projectId: IUUID;
  contactEmail: string;
  name: string;
  email: string;
  subject: string;
  content: string;
}

export interface ISendEmailPayload {
  responseEmail: IResponseEmail;
}

export interface IResponseEmail {
  message: string;
}

export interface IDeleteContactEmailInput {
  projectId: IUUID;
  contactEmail: string;
}

export interface IDeleteContactEmailPayload {
  message: string;
}

export interface ICreateMethodPaymentInput {
  projectId: IUUID;
  memberId: IUUID;
  alias?: string;
  privateKey: string;
  publicKey: string;
  active?: boolean;
  servicePayment: IServicePayment;
}

export interface ICreateMethodPaymentPayload {
  methodPayment: IMethodPayment;
}

export interface IUpdateMethodPaymentInput {
  methodPaymentId: IUUID;
  servicePayment?: IServicePayment;
  active?: boolean;
  alias?: string;
  privateKey?: string;
  publicKey?: string;
}

export interface IUpdateMethodPaymentPayload {
  methodPayment: IMethodPayment;
}

export interface IDeleteMethodPaymentInput {
  methodPaymentId: IUUID;
}

export interface IDeleteMethodPaymentPayload {
  methodPayment: IMethodPayment;
}

export interface ICreatePaymentStripeInput {
  invoiceId: IUUID;
  projectId: IUUID;
  paymentStripeCharge: IPaymentStripeChargeInput;
}

export interface IPaymentStripeChargeInput {
  amount: number;
  receiptEmail: string;
  currency: string;
  transactionNumber: string;
}

export interface ICreatePaymentStripePayload {
  transaction: ITransaction;
}

export interface ICreatePaymentStripeToAccountInput {
  memberId: IUUID;
  invoiceId: IUUID;
  projectId: IUUID;
  paymentStripeCharge: IPaymentStripeChargeInput;
}

export interface ICreateSuscriptionStripeInput {
  projectId: IUUID;
  invoiceId: IUUID;
  planId: IUUID;
  name: string;
  mail: string;
  numbers: string;
  expiration: string;
  cvc: string;
  count: number;
}

export interface ICreateSuscriptionStripePayload {
  userKey: IAccountKey;
  trans: ITransaction;
}

export interface IAccountKey {
  projectId: IUUID;
  memberId: IUUID;
  accountServiceId: string;
  customerServiceId: string;
  servicePayment?: IServicePayment;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICreateStripeAccountInput {
  projectId: IUUID;
}

export interface ICreateStripeAccountPayload {
  userKey: IAccountKey;
}

export interface IDeletePaymentInput {
  paymentId: IUUID;
}

export interface IDeletePaymentPayload {
  transaction: ITransaction;
}

export interface IUpdatePaymentInput {
  transactionNumber: string;
  transactionStatus: ITransactionStatus;
  responseText: string;
}

export interface IUpdatePaymentPayload {
  transaction: ITransaction;
}

export interface ICreateInvoiceInput {
  projectId: IUUID;
  addressId: IUUID;
  memberId: IUUID;
  products?: Array<IProductInvoiceDetailInput>;
  invoiceNumber: string;
  invoiceStatus: IInvoiceStatus;
  shippingSale: IDecimal;
  observations?: string;
  invoiceDate?: string;
}

export interface IProductInvoiceDetailInput {
  id: IUUID;
  quantity: number;
  unitPrice: IDecimal;
}

export interface ICreateInvoicePayload {
  invoice: IInvoice;
}

export interface IUpdateStatusInvoiceInput {
  invoiceId: IUUID;
  status: IInvoiceStatus;
}

export interface IUpdateStatusInvoicePayload {
  invoice: IInvoice;
}

export interface IPutConfigInput {
  projectId: IUUID;
  key: string;
  value?: string;
}

export interface IPutConfigPayload {
  configuration: IConfiguration;
}

export interface IDeleteConfigInput {
  projectId: IUUID;
  key: string;
}

export interface IDeleteConfigPayload {
  configuration: IConfiguration;
}

export interface IUpdateOrderPageInput {
  items: Array<IPagesDtoInput>;
}

export interface IPagesDtoInput {
  pageId: IUUID;
  position: number;
}

export interface IUpdateOrderPagesPayload {
  items: Array<IPagesDto>;
}

export interface IPagesDto {
  pageId: IUUID;
  position: number;
}

export interface IUpdateBatchWewbsiteComponentInput {
  items: Array<IComponentDtoInput>;
}

export interface IComponentDtoInput {
  webSitePageComponentId: IUUID;
  position: number;
}

export interface IUpdateBatchWewbsiteComponentPayload {
  items: Array<IComponentDto>;
}

export interface IComponentDto {
  webSitePageComponentId: IUUID;
  position: number;
}

export interface ICreateComponentInput {
  keyName: string;
  service: string;
  description: string;
}

export interface ICreateComponentPayload {
  message: string;
}

export interface ICreateWebsiteComponentInput {
  websitePageId: IUUID;
  keyName?: string;
  props?: string;
  position: number;
  parentId?: IUUID;
  subComponents: string;
}

export interface ICreateWebsiteComponentPayload {
  message: string;
}

export interface ICreateWebsitePageInput {
  projectId: IUUID;
  position: number;
  name?: string;
  url?: string;
  description?: string;
  isActive?: boolean;
  scriptHead?: string;
  scriptFooter?: string;
  seoWebsitePage?: string;
}

export interface ICreateWebsitePagePayload {
  message: string;
}

export interface ICreateWebsiteSeoInput {
  websitePageId: IUUID;
  title?: string;
  description?: string;
  keywords?: string;
  canonicaUrl?: string;
  robots?: string;
  googlebot?: string;
  author?: string;
  language?: string;
  twitterCard?: string;
  twitterSite?: string;
  twitterCreator?: string;
  twitterTitle?: string;
  twitterDescription?: string;
  twitterUrl?: string;
  twitterImageAlt?: string;
  twitterImageTitle?: string;
  twitterImageWidth?: string;
  twitterImageHeight?: string;
  twitterImage?: string;
  openGraphTitle?: string;
  openGraphDescription?: string;
  openGraphUrl?: string;
  openGraphImageAlt?: string;
  openGraphImageTitle?: string;
  openGraphImageWidth?: string;
  openGraphImageHeight?: string;
  openGraphImage?: string;
  openGraphType?: string;
  openGraphSiteName?: string;
  openGraphFacebookAppId?: string;
}

export interface ICreateWebsiteSeoPayload {
  message: string;
}

export interface IUpdateComponentInput {
  componentId: IUUID;
  keyName?: string;
  services?: string;
  description?: string;
}

export interface IUpdateComponentPayload {
  message: string;
}

export interface IUpdateWebsiteComponentInput {
  websitesComponents: Array<IUpdateWebsiteComponentDtoInput>;
}

export interface IUpdateWebsiteComponentDtoInput {
  id: IUUID;
  props?: string;
  position?: number;
}

export interface IUpdateWebsiteComponentPayload {
  message: string;
}

export interface IUpdateWebsitePageInput {
  websitePageId: IUUID;
  name?: string;
  url?: string;
  description?: string;
  isActive?: boolean;
  scriptHead?: string;
  scriptFooter?: string;
  position?: number;
  seoWebsitePage?: string;
}

export interface IUpdateWebsitePagePayload {
  message: string;
}

export interface IUpdateWebsiteSeoInput {
  websiteSeoId: IUUID;
  webSitePageId?: IUUID;
  title?: string;
  description?: string;
  keywords?: string;
  canonicaUrl?: string;
  robots?: string;
  googlebot?: string;
  author?: string;
  language?: string;
  twitterCard?: string;
  twitterSite?: string;
  twitterCreator?: string;
  twitterTitle?: string;
  twitterDescription?: string;
  twitterUrl?: string;
  twitterImageAlt?: string;
  twitterImageTitle?: string;
  twitterImageWidth?: string;
  twitterImageHeight?: string;
  twitterImage?: string;
  openGraphTitle?: string;
  openGraphDescription?: string;
  openGraphUrl?: string;
  openGraphImageAlt?: string;
  openGraphImageTitle?: string;
  openGraphImageWidth?: string;
  openGraphImageHeight?: string;
  openGraphImage?: string;
  openGraphType?: string;
  openGraphSiteName?: string;
  openGraphFacebookAppId?: string;
}

export interface IUpdateWebsiteSeoPayload {
  message: string;
}

export interface IDeleteComponentInput {
  componentId: IUUID;
}

export interface IDeleteComponentPayload {
  message: string;
}

export interface IDeleteWebsiteComponentInput {
  websiteComponentId: IUUID;
}

export interface IDeleteWebsiteComponentPayload {
  message: string;
}

export interface IDeleteWebsitePageInput {
  websitePageId: IUUID;
}

export interface IDeleteWebsitePagePayload {
  message: string;
}

export interface IDeleteWebsiteSeoInput {
  websiteSeoId: IUUID;
}

export interface IDeleteWebsiteSeoPayload {
  message: string;
}

export interface ICreateVideoCallInput {
  projectId: IUUID;
  memberId: IUUID;
  participantName: string;
  members?: Array<IMemberInput>;
  services?: Array<IServiceInput>;
  url?: string;
  roomName?: string;
}

export interface IMemberInput {
  id: string;
  fullName: string;
  email: string;
}

export interface ICreateVideoCallPayload {
  videoCall: IVideoCall;
  roomAccessToken: IRoomAccessToken;
}

export interface IRoomAccessToken {
  createdAt: string;
  roomName: string;
  token: string;
  participantIdentity: string;
}

export interface IUpdateVideoCallInput {
  videoCallId: IUUID;
  members: Array<string>;
  url?: string;
}

export interface IUpdateVideoCallPayload {
  videoCall: IVideoCall;
}

export interface IDeleteVideoCallInput {
  videoCallId: IUUID;
}

export interface IDeleteVideoCallPayload {
  videoCall: IVideoCall;
}

export interface ICreateAccessTokenInput {
  participantName: string;
  roomName?: string;
}

export interface ICreateVideoRoomInput {
  projectId: IUUID;
  url: string;
  creatorName: string;
  creatorEmail: string;
}

export interface ICreateVideoRoomPayload {
  videoCall: IVideoRoom;
  roomAccessToken: IRoomAccessToken;
}

export interface ISendNotificationUsersInput {
  videoRoomId?: IUUID;
  membersList: Array<IMemberDtoInput>;
}

export interface IMemberDtoInput {
  fullName: string;
  email: string;
}

export interface ISendNotificationUsersPayload {
  message: string;
}

export interface ISendEmailDownloadInput {
  email: string;
  url: string;
  videoName: string;
}

export interface ISendEmailDownloadPayload {
  message: string;
}

export interface ICreateQuoteInput {
  projectId: IUUID;
  memberId: IUUID;
  firstName: string;
  lastName: string;
  phone: string;
  frecuency: number;
  packageName: string;
  email: string;
  colony: string;
  town: string;
  state: string;
  stateId: string;
  brand: string;
  subBrand: string;
  description: string;
  gender?: IQuoteGender;
  zipCode: string;
  carId: number;
  carCode: string;
  year: number;
  dateOfBirth: string;
  startValidity?: string;
  endValidity?: string;
}

export interface ICreateQuotePayload {
  quoteId: IUUID;
}

export interface ICreateNewOfficesPayload {
  message: string;
}

export interface ICreateNewProfilesPayload {
  message: string;
}

export interface ICreateInsurerInput {
  insurerServiceId: IUUID;
  projectId: IUUID;
  name: string;
  percentageMax?: IDecimal;
}

export interface ICreateInsurerPayload {
  message: string;
}

export interface ICreateOfficeInput {
  projectId: IUUID;
  name: string;
}

export interface ICreateOfficePayload {
  message: string;
}

export interface ICreateRegistrationInput {
  projectId: IUUID;
  name: string;
  email: string;
  state?: string;
  city?: string;
  tradename?: string;
  interests?: Array<boolean>;
  company?: string;
}

export interface ICreateRegistrationPayload {
  message: string;
}

export interface ICreateQuatorProfileInput {
  projectId: IUUID;
  name: string;
  officeId: IUUID;
  insurers?: Array<IQuoterProfileInsurerInsertInput>;
}

export interface IQuoterProfileInsurerInsertInput {
  percentageBase: IDecimal;
  percentageMax: IDecimal;
  insurerId: IUUID;
  portalAgentQuote: boolean;
  portalAgentEmits: boolean;
  portalPublicQuote: boolean;
  portalPublicEmits: boolean;
}

export interface ICreateQuatorProfilePayload {
  message: string;
}

export interface IDeleteInsurerInput {
  insurerId: IUUID;
}

export interface IDeleteInsurerPayload {
  message: string;
}

export interface IDeleteOfficeInput {
  officeId: IUUID;
}

export interface IDeleteOfficePayload {
  message: string;
}

export interface IDeleteQuoterProfileInput {
  quoterProfileId: IUUID;
}

export interface IDeleteQuoterProfilePayload {
  message: string;
}

export interface IUpdateInsurerInput {
  insurerId: IUUID;
  name: string;
  percentageMax: IDecimal;
}

export interface IUpdateInsurerPayload {
  message: string;
}

export interface IUpdateOfficeInput {
  officeId: IUUID;
  name: string;
}

export interface IUpdateOfficePayload {
  message: string;
}

export interface IUpdateQuoterProfileInput {
  quoterProfileId: IUUID;
  name: string;
  officeId: IUUID;
  insurers?: Array<IQuoterProfileInsurerUpdateInput>;
}

export interface IQuoterProfileInsurerUpdateInput {
  id?: IUUID;
  insurerId: IUUID;
  percentageBase: IDecimal;
  percentageMax: IDecimal;
  portalAgentQuote: boolean;
  portalAgentEmits: boolean;
  portalPublicQuote: boolean;
  portalPublicEmits: boolean;
}

export interface IUpdateQuoterProfilePayload {
  message: string;
}

export interface ICreateCatalogInput {
  brand: string;
  years: Array<ICatalogoByYearInsertInput>;
  subBrand: string;
  description: string;
  occupants: number;
  catalogType?: string;
}

export interface ICatalogoByYearInsertInput {
  year: number;
  cveveh: string;
}

export interface ICreateCatalogPayload {
  message: string;
}

export interface IPopulateCredentialsInput {
  projectId: IUUID;
}

export interface IPopulateCredentialsPayload {
  message: string;
}

export interface IPopulateServicesInput {
  projectId: IUUID;
  services: Array<string>;
}

export interface IPopulateServicesPayload {
  message: string;
}

export interface IQuoterRequestInput {
  quoteId: IUUID;
  serviceId: IUUID;
  packageName: string;
  frecuency: number;
}

export interface IRunServicePayload {
  quoterResponse: IQuoterResponse;
}

export interface IQuoterResponse {
  primaTotal?: string;
  coverages?: Array<ICoverageService>;
  quoteId: IUUID;
  package?: string;
  product?: string;
  quoteFolio?: string;
  beginDate?: string;
  endDate?: string;
  carCompanyCode?: string;
  parentId?: string;
  responseQuoter?: IResponseApiInsurer;
}

export interface ICoverageService {
  coverageName?: string;
  cobId?: string;
  coverageSum?: string;
  coverageDeductible?: string;
  total?: string;
}

export interface IResponseApiInsurer {
  id?: number;
  parent_car_form?: string;
  prima_total?: string;
  quote_selected: boolean;
  emitido: boolean;
  url?: string;
  paquete?: string;
  frecuencia_pago?: string;
  dER?: string;
  cVE?: string;
  iVA?: string;
  rEC?: string;
  car_descr?: string;
  folio_quote?: string;
  fecha_inicio?: string;
  fecha_fin?: string;
  car_company_code?: string;
  parent_id?: number;
  service?: Imultiquoter_Service;
  quote_coverages?: Array<IQuoteCoverage>;
  quote_pay_frecuency?: Array<IQuotePayFrecuency>;
  discount_services?: Array<IDiscountService>;
}

export interface Imultiquoter_Service {
  url: string;
  name: string;
  id: number;
}

export interface IQuoteCoverage {
  coverage_name?: string;
  cob_id?: string;
  sum_coverage?: string;
  deductible_coverage?: string;
  total?: string;
}

export interface IQuotePayFrecuency {
  id?: number;
  first_pay?: string;
  tipe?: string;
  second_pay?: string;
  total_amount?: string;
  fecha_inicio?: string;
  fecha_fin?: string;
}

export interface IDiscountService {
  percentage?: IDecimal;
}

export interface IEmissionCarInput {
  qualitasCode: string;
  quoteId: number;
  insurer: IEnumInsurer;
}

export const enum IEnumInsurer {
  CHUBB = 'CHUBB',
  ANA = 'ANA',
  QUALITAS = 'QUALITAS',
  GNP = 'GNP',
  HDI = 'HDI',
  POTOSI = 'POTOSI',
}

export interface IEmissionCarPayload {
  message: string;
}

export interface IStaffQuoteInput {
  solicitorId?: IUUID;
  projectId?: IUUID;
  serviceId?: IUUID;
  status?: IEnumQuoteStatus;
}

export interface IStaffQuotePayload {
  staffQuote: IStaffQuote;
}

export interface IProposalInput {
  staffQuoteId?: IUUID;
  methodology?: string;
  status?: IEnumQuoteStatus;
}

export interface IProposalPayload {
  proposal: IProposal;
}

export interface ICollaboratorInput {
  memberId?: IUUID;
  projectRoleId?: IUUID;
  staffQuoteId?: IUUID;
  estimatedTime?: ITimeSpan;
  amount?: IDecimal;
}

export interface ICollaboratorPayload {
  collaborator: ICollaborator;
}

export interface IAssociationWithQuoterProfileInput {
  projectId: IUUID;
  memberId: IUUID;
  quoterProfileId: IUUID;
}

export interface IAssociationWithQuoterProfilePayload {
  message: string;
}

export interface IUpdateQuoteInput {
  quoteId: IUUID;
  hiredSame?: boolean;
  status?: IQuoteStatus;
  firstName?: string;
  lastName?: string;
  phone?: string;
  email?: string;
  address?: string;
  discount?: number;
  coverage?: string;
  primalTotal?: string;
  deductible?: string;
  typeFrecuency?: string;
  firstPay?: string;
  secondPay?: string;
  plaque?: string;
  compensationValue?: string;
  serialNumber?: string;
  hiredFirstName?: string;
  hiredLastName?: string;
  hiredPhone?: string;
  hiredEmail?: string;
  hiredAddress?: string;
}

export interface IUpdateQuotePayload {
  message: string;
}

export interface ICreateInsurerCredentialInput {
  insurerServiceId: IUUID;
  projectId: IUUID;
  conduit?: string;
  username?: string;
  password?: string;
  rate?: string;
  agent?: string;
  group?: string;
  deal?: string;
  office?: string;
  cprogram?: string;
  default?: boolean;
  active?: boolean;
  extra?: string;
  discount?: number;
  owner?: string;
  environment?: IServiceEnvironment;
}

export interface ICreateInsurerCredentialPayload {
  message: string;
}

export interface IUpdateInsurerCredentialInput {
  insurerServiceCredentialId: IUUID;
  insurerServiceId: IUUID;
  projectId: IUUID;
  conduit?: string;
  username?: string;
  password?: string;
  rate?: string;
  agent?: string;
  group?: string;
  deal?: string;
  office?: string;
  cprogram?: string;
  default?: boolean;
  active?: boolean;
  extra?: string;
  discount?: number;
  owner?: string;
  environment?: IServiceEnvironment;
}

export interface IUpdateInsurerCredentialPayload {
  message: string;
}

export interface IRunJobInsurerMutationInput {
  insurer: IEnumInsurer;
  message: string;
}

export interface IRunJobInsurerMutationPayload {
  message: string;
}

export interface IAssociationRelationCarInput {
  qualitasCode: string;
  forAssociationId: string;
  insurer: IEnumInsurer;
}

export interface IAssociationRelationCarPayload {
  message: string;
}

export interface IDynamicCustomMetaInput {
  dynamicSectionBlockId?: IUUID;
  metaKey?: string;
  metaType?: IMetaType;
  label?: string;
  description?: string;
  position?: number;
}

export interface IDynamicCustomMetaPayload {
  dynamicCustomMeta: IDynamicCustomMeta;
}

export interface IUpdateBatchDynamicCustomMetaInput {
  new?: Array<IDynamicCustomMetaInput>;
  zippedData?: Array<IDynamicCustomMetaZippedInput>;
  deleteable?: Array<IUUID>;
}

export interface IDynamicCustomMetaZippedInput {
  id: IUUID;
  customMeta: IDynamicCustomMetaInput;
}

export interface IDynamicCustomValueInput {
  memberId?: IUUID;
  dynamicCustomMetaId?: IUUID;
  value?: string;
}

export interface IDynamicCustomValuePayload {
  dynamicCustomValue: IDynamicCustomValue;
}

export interface IUpdateBatchDynamicCustomValueInput {
  new?: Array<IDynamicCustomValueInput>;
  zippedData?: Array<IDynamicCustomValueZippedInput>;
  deleteable?: Array<IUUID>;
}

export interface IDynamicCustomValueZippedInput {
  id: IUUID;
  customValue: IDynamicCustomValueInput;
}

export interface IDynamicPageInput {
  label?: string;
  name?: string;
  projectId?: IUUID;
}

export interface IDynamicPagePayload {
  dynamicPage: IDynamicPage;
}

export interface IDynamicBlockInput {
  codeName?: string;
  description?: string;
  services?: string;
  components?: string;
  style?: string;
}

export interface IDynamicBlockPayload {
  dynamicBlock: IDynamicBlock;
}

export interface IDynamicSectionInput {
  position?: number;
  isPrimary?: boolean;
  dynamicPageId?: IUUID;
}

export interface IDynamicSectionPayload {
  dynamicSection: IDynamicSection;
}

export interface IDynamicSectionBlockInput {
  label?: string;
  position?: number;
  style?: string;
  dynamicTabId?: IUUID;
  dynamicBlockId?: IUUID;
}

export interface IDynamicSectionBlockPayload {
  dynamicSectionBlock: IDynamicSectionBlock;
}

export interface IDynamicTabInput {
  name?: string;
  position?: number;
  dynamicSectionId?: IUUID;
}

export interface IDynamicTabPayload {
  dynamicTab: IDynamicTab;
}

export interface ICreateChargeInput {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  total: IDecimal;
}

export interface ICreateChargePayload {
  message: string;
}

export interface ICreateClinicHistoryInput {
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  notes: string;
  isVisible?: boolean;
  position?: number;
}

export interface ICreateClinicHistoryPayload {
  message: string;
}

export interface ICreateClinicHistoryMedicalBackgroundDetailInput {
  projectId: IUUID;
  medicalBackgrounDetailId: IUUID;
  isYes: boolean;
}

export interface ICreateClinicHistoryMedicalBackgroundDetailPayload {
  message: string;
}

export interface ICreateEventDetailInput {
  memberId: IUUID;
  projectId: IUUID;
  eventId: IUUID;
  subTotal: IDecimal;
  descuento: IDecimal;
  tax: IDecimal;
  total: IDecimal;
}

export interface ICreateEventDetailPayload {
  message: string;
}

export interface ICreateFisicExamInput {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  isVisible?: boolean;
  position?: number;
  title?: string;
  content: string;
}

export interface ICreateFisicExamPayload {
  message: string;
}

export interface ICreateFormatInput {
  projectId: IUUID;
  memberId: IUUID;
  eventTypeId: IUUID;
  nameFormat?: string;
}

export interface ICreateFormatPayload {
  format: IFormat;
}

export interface ICreateMedicalBackgroundDetailInput {
  medicalBackgroundId: IUUID;
  label: string;
  isOPtion: boolean;
  isVisible: boolean;
  backgroundTypesOption: IBackgroundTypesOptions;
  position: number;
}

export interface ICreateMedicalBackgroundDetailPayload {
  message: string;
}

export interface ICreateMedicalBackgroundInput {
  projectId: IUUID;
  formatId?: IUUID;
  label: string;
  position: number;
  isVisible: boolean;
}

export interface ICreateMedicalBackgroundPayload {
  message: string;
}

export interface ICreateMedicalConfigInput {
  projectId: IUUID;
  patologis: boolean;
}

export interface ICreateMedicalConfigPayload {
  message: string;
}

export interface ICreateMedicalServiceInput {
  projectId: IUUID;
  state: boolean;
  name: string;
  serviceOption: IServiceOption;
  cost: IDecimal;
  imgroute: string;
  description: string;
}

export interface ICreateMedicalServicePaylod {
  message: string;
}

export interface ICreateMedicineInput {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  medicineName: string;
  take: string;
  frecuency: string;
  duration: string;
}

export interface ICreateMedicinePayload {
  message: string;
}

export interface ICreateVaccineInput {
  projectId: IUUID;
  memberId: IUUID;
  nameVac: string;
  position?: number;
  dateAplicaction: string;
  nextVac?: string;
  notesVac?: string;
}

export interface ICreateVaccinePayload {
  message: string;
}

export interface ICreateVitalSignsInput {
  projectId: IUUID;
  label: string;
  position: number;
  isVisible: boolean;
}

export interface ICreateVitalSignsPayload {
  message: string;
}

export interface ICreateMedicRecipeInput {
  projectId: IUUID;
  memberId: IUUID;
  profesionalCell: string;
  speciality: string;
  institute: string;
  electronicsign: string;
  isCorrect: boolean;
}

export interface ICreateMedicRecipePayload {
  message: string;
}

export interface ICreateRecipeConfigInput {
  projectId: IUUID;
  medicRecipeId: IUUID;
  isActiveAllPacients: boolean;
  isAccessDataPacient: boolean;
}

export interface ICreateRecipeConfigPaylod {
  message: string;
}

export interface ICreateRegistSesionInput {
  projectId: IUUID;
  therapyId: IUUID;
  namePacient: string;
  terapist: string;
  dateSesion: string;
  comments: string;
  title: string;
  electronicsign: string;
  legalType: boolean;
}

export interface ICreateRegistSesionPayload {
  message: string;
}

export interface ICreatePacientNoteInput {
  memberId: IUUID;
  projectId: IUUID;
  eventId: IUUID;
  note?: string;
}

export interface ICreatePacientNotePayload {
  message: string;
}

export interface ICreateTherapyInput {
  projectId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  content: string;
  isVisible?: boolean;
  position: number;
  numSesion: IDecimal;
}

export interface ICreateDiagnosticInput {
  memberId: IUUID;
  projectId: IUUID;
  eventId: IUUID;
  isVisible: boolean;
  content: string;
}

export interface ICreateDiagnosticPayload {
  message: string;
}

export interface ICreateConsultNoteInput {
  memberId: IUUID;
  projectId: IUUID;
  eventId: IUUID;
  isVisible: boolean;
  note?: string;
}

export interface ICreateConsultNotePayload {
  message: string;
}

export interface ICreateMedicalBackgroundSetInput {
  medicalBackground?: IMedicalBackgroundInput;
  medicalBackgroundDetail?: IMedicalBackgroundDetailInput;
  clinicHistoryMedicalBackgroundDetail?: IClinicHistoryMedicalBackgroundDetailInput;
}

export interface IMedicalBackgroundInput {
  projectId: IUUID;
  formatId?: IUUID;
  format?: IFormatInput;
  label?: string;
  isVisible: boolean;
  position: number;
  pacientMedicalBackground?: IPacientMedicalBackgroundInput;
  medicalBackgroundDetails: Array<IMedicalBackgroundDetailInput>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IFormatInput {
  projectId: IUUID;
  memberId: IUUID;
  eventTypeId: IUUID;
  nameFormat?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IPacientMedicalBackgroundInput {
  medicalBackgroundDetailId: IUUID;
  medicalBackgroundDetail: IMedicalBackgroundDetailInput;
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  text?: string;
  isResponse?: boolean;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IMedicalBackgroundDetailInput {
  projectId: IUUID;
  medicalBackgroundId: IUUID;
  medicalBackground: IMedicalBackgroundInput;
  label: string;
  backgroundTypeOption?: IBackgroundTypesOptions;
  isOption?: boolean;
  isVisible?: boolean;
  position: number;
  clinicHistoryMedicalBackgroundDetails?: Array<IClinicHistoryMedicalBackgroundDetailInput>;
  pacientMedicalBackgrounds?: Array<IPacientMedicalBackgroundInput>;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IClinicHistoryMedicalBackgroundDetailInput {
  medicalBackgroundDetailId: IUUID;
  medicalBackgroundDetail: IMedicalBackgroundDetailInput;
  backgroundType: IBackgroundTypesOptions;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ICreateMedicalBackgroundSetPayload {
  id: IUUID;
}

export interface ICreateVitalSignsTemplateInput {
  projectId: IUUID;
}

export interface ICreatePacientMedicalBackgroundInput {
  medicalBackgroundDetailId: IUUID;
  projectId: IUUID;
  memberId: IUUID;
  eventId: IUUID;
  text?: string;
  isResponse?: boolean;
}

export interface ICreatePacientMedicalBackgroundPaylod {
  message: string;
}

export interface ICreatePatientVitalSignsResponseInput {
  vitalSignId: IUUID;
  eventId: IUUID;
  memberId: IUUID;
  value?: IDecimal;
}

export interface ICreatePatientVitalSignsResponsePayload {
  message: string;
}

export interface IUpdateChargeInput {
  chargeId: IUUID;
  total: IDecimal;
}

export interface IUpdateChargePayload {
  message: string;
}

export interface IUpdateClinicHistoryInput {
  clinicHistoryId: IUUID;
  notes: string;
  isVisible?: boolean;
  position?: number;
}

export interface IUpdateClinicHistoryPayloads {
  message: string;
}

export interface IUpdateClinicHistoryMedicalBackgroundDetailInput {
  clinicHistoryMedicalBackgrounId: IUUID;
  isYes: boolean;
}

export interface IUpdateClinicHistoryMedicalBackgroundDetailPayload {
  message: string;
}

export interface IUpdateEventDetailInput {
  eventId: IUUID;
  subtotal: IDecimal;
  descuento: IDecimal;
  tax: IDecimal;
  total: IDecimal;
}

export interface IUpdateEventDetailtPayload {
  message: string;
}

export interface IUpdateFisicExamInput {
  fisicalExamId: IUUID;
  isVisible?: boolean;
  title?: string;
  content?: string;
  position?: number;
}

export interface IUpdateFisicExamPayload {
  message: string;
}

export interface IUpdateFormatInput {
  formatId: IUUID;
  eventTypeId: IUUID;
  formatName?: string;
}

export interface IUpdateFormatPayload {
  message: string;
}

export interface IUpdateMedicalBackgroundDetailInput {
  medicalBackgroundDetailId: IUUID;
  backgroundTypeOption: IBackgroundTypesOptions;
  isOptional?: boolean;
  isVisible?: boolean;
  label: string;
}

export interface IUpdateMedicalBackgroundDetailPayload {
  message: string;
}

export interface IUpdateMedicalBackgroundInput {
  medicalBackgroundId: IUUID;
  formatId?: IUUID;
  isVisible?: boolean;
  position: number;
  label?: string;
}

export interface IUpdateMedicalBackgroundPayload {
  message: string;
}

export interface IUpdateMedicalConfigInput {
  medicalConfigId: IUUID;
  patologis?: boolean;
}

export interface IUpdateMedicalConfigPayload {
  message: string;
}

export interface IUpdateMedicalServiceInput {
  medicalServiceId: IUUID;
  name?: string;
  serviceOption?: IServiceOption;
  state?: boolean;
  cost: IDecimal;
  imgRoute?: string;
  description?: string;
}

export interface IUpdateMedicalServicePayload {
  message: string;
}

export interface IUpdateMedicineInput {
  medicineId: IUUID;
  medicine?: string;
  take?: string;
  frecuency?: string;
  duration?: string;
}

export interface IUpdateMedicinePayload {
  message: string;
}

export interface IUpdateVaccineInput {
  vaccineId: IUUID;
  dateAplicationVac?: string;
  nextVac?: string;
  position?: number;
  nameVac?: string;
  notesVac?: string;
}

export interface IUpdateVaccinePayload {
  message: string;
}

export interface IUpdateVitalSingsInput {
  vitalSingsId: IUUID;
  label?: string;
  position?: number;
  isVisible?: boolean;
}

export interface IUpdateVitalSingsPayloads {
  message: string;
}

export interface IUpdateMedicRecipeInput {
  medicRecipeId: IUUID;
  isCorrect?: boolean;
  profesionalCell: string;
  speciality: string;
  institute: string;
  electronicSing: string;
}

export interface IUpdateMedicRecipePayload {
  message: string;
}

export interface IUpdateRecipeConfigInput {
  recipeConfigId: IUUID;
  isActiveAllPacients: boolean;
  isAccessDataPacient: boolean;
}

export interface IUpdateRecipeConfigPayload {
  message: string;
}

export interface IUpdateRegistSesionInput {
  registSesionId: IUUID;
  title: string;
  electronicSing: string;
  legalType: boolean;
  dateSesion: string;
  namePacient: string;
  terapist: string;
  comments: string;
}

export interface IUpdateRegistSesionPayload {
  message: string;
}

export interface IUpdatePacientNoteInput {
  pacientNoteId: IUUID;
  note?: string;
}

export interface IUpdatePacientNotePayload {
  message: string;
}

export interface IUpdateTherapyInput {
  therapyId: IUUID;
  numSesion: IDecimal;
  content: string;
  isVisible?: boolean;
  position: number;
}

export interface IUpdateTherapyPayload {
  message: string;
}

export interface IUpdateDiagnosticInput {
  diagnosticId: IUUID;
  content?: string;
}

export interface IUpdateDiagnosticPayload {
  message: string;
}

export interface IUpdateConsultNoteInput {
  consultNoteId: IUUID;
  isVisible?: boolean;
  note?: string;
}

export interface IUpdateConsultNotePayload {
  message: string;
}

export interface IUpdatePacientMedicalBackgroundInput {
  pacientMedicalBackgroundId: IUUID;
  isResponse?: boolean;
  text?: string;
}

export interface IUpdatePacientMedicalBackgroundPayload {
  message: string;
}

export interface IUpdateBillingRequestInput {
  billingRequestId: IUUID;
  status: boolean;
  billingUrl: string;
  emailContent: string;
  cP?: string;
  socialReason?: string;
  rfc?: string;
  cFDI?: string;
  socialRegiment?: string;
  email?: string;
}

export interface IUpdateBillingRequestPayload {
  message: string;
}

export interface IUpdateSortFormatInput {
  formatId: IUUID;
  positions: Array<IPositionsDtoInput>;
}

export interface IPositionsDtoInput {
  medicalBackgroundId: IUUID;
  position: number;
}

export interface IUpdateSortFormatPayload {
  message: string;
}

export interface IUpdatePatientVitalSignsResponseInput {
  patientVitalSingResponseId: IUUID;
  value?: IDecimal;
}

export interface IUpdatePatientVitalSignsResponsePayloads {
  message: string;
}

export interface IDeleteChargeInput {
  chargeId: IUUID;
}

export interface IDeleteChargePayload {
  message: string;
}

export interface IDeleteClinicHistoryInput {
  clinicHistoryId: IUUID;
}

export interface IDeleteClinicHistoryPayload {
  message: string;
}

export interface IDeleteClinicHistoryMedicalBackgroundDetailInput {
  clinicMedicalBackgroundId: IUUID;
}

export interface IDeleteClinicHistoryMedicalBackgroundDetailPayload {
  message: string;
}

export interface IDeleteConsultInput {
  eventId: IUUID;
}

export interface IDeleteConsultPayload {
  message: string;
}

export interface IDeleteFisicalExamInput {
  fisicalExamId: IUUID;
}

export interface IDeleteFisicalExamPayload {
  message: string;
}

export interface IDeleteMedicalBackgroundDetailInput {
  medicalBackgroundDetailId: IUUID;
}

export interface IDeleteMedicalBackgroundDetailPayload {
  message: string;
}

export interface IDeleteMedicalBackgroundInput {
  medicalBackgroundId: IUUID;
}

export interface IDeleteMedicalBackgroundPayload {
  message: string;
}

export interface IDeleteMedicalConfigInput {
  medicalConfigId: IUUID;
}

export interface IDeleteMedicalConfigPayload {
  message: string;
}

export interface IDeleteMedicalServiceinputInput {
  medicalServiceId: IUUID;
}

export interface IDeleteMedicalServicePayload {
  message: string;
}

export interface IDeleteMedicineinputInput {
  medicineId: IUUID;
}

export interface IDeleteMedicinePayload {
  message: string;
}

export interface IDeleteVaccineinputInput {
  vaccineId: IUUID;
}

export interface IDeleteVaccinePayload {
  message: string;
}

export interface IDeleteVitalSignInput {
  vitalSignId: IUUID;
}

export interface IDeleteVitalSignPayload {
  message: string;
}

export interface IDeleteMedicRecipeinputInput {
  medicRecipeId: IUUID;
}

export interface IDeleteMedicRecipePayload {
  message: string;
}

export interface IDeleteRecipeConfiginputInput {
  recipeConfigId: IUUID;
}

export interface IDeleteRecipeConfigPayload {
  message: string;
}

export interface IDeleteRegisSesioninputInput {
  recipeSesionId: IUUID;
}

export interface IDeleteRegistSesionPayload {
  message: string;
}

export interface IDeleteTherapyinputInput {
  therapyId: IUUID;
}

export interface IDeleteTherapyPayload {
  message: string;
}

export interface IDeleteDiagnosticInput {
  diagnosticId: IUUID;
}

export interface IDeleteDiagnosticPayload {
  message: string;
}

export interface IDeleteConsultNoteInput {
  consultNoteId: IUUID;
}

export interface IDeleteConsultNotePayload {
  message: string;
}

export interface IDeletePacientNoteInput {
  pacientNoteId: IUUID;
}

export interface IDeletePacientNotePayload {
  message: string;
}

export interface IDeletePacientMedicalBackgroundInput {
  pacientMedicalBackgroundId: IUUID;
}

export interface IDeletePacientMedicalBackgroundPayload {
  message: string;
}

export interface IDeleteBillingRequestinputInput {
  billingRequestId: IUUID;
}

export interface IDeleteBillingRequestPayload {
  message: string;
}

export interface IDeleteFormatInput {
  formatId: IUUID;
}

export interface IDeleteFormatPayload {
  message: string;
}

export interface ICreatePdfInput {
  pdf: string;
  pdfName: string;
}

export interface ICreatePDFPayload {
  message: string;
}

export interface ICreateApiServiceInput {
  projectId: IUUID;
  label: string;
  serviceCode: string;
}

export interface ICreateApiServicePayload {
  apiService: IApiService;
}

export interface IUpdateApiServiceInput {
  apiServiceId: IUUID;
  label?: string;
  serviceCode?: string;
  expiration?: string;
}

export interface IUpdateApiServicePayload {
  message: string;
}

export interface IFolderInput {
  parentId?: IUUID;
  projectId: IUUID;
  memberId: IUUID;
  label: string;
  background?: string;
}

export interface IFolderPayload {
  message: string;
}

export interface IDeleteFolderMutationInput {
  folderId: IUUID;
}

export interface IDeleteFolderPayLoad {
  message: string;
}

export interface ICreateFileInput {
  folderId?: IUUID;
  projectId?: IUUID;
  memberId?: IUUID;
  name?: string;
  url: string;
  description?: string;
}

export interface ICreateFilePayload {
  message: string;
}

export interface IUpdateFilesInput {
  fileId: IUUID;
  name?: string;
  url?: string;
  description?: string;
}

export interface IUpdateFilesPayload {
  message: string;
}

export interface IDeleteFileMutationInput {
  fileId: IUUID;
}

export interface IDeleteFilePayLoad {
  message: string;
}

export interface IShareFileInput {
  memberIds: Array<IUUID>;
  fileId: IUUID;
}

export interface IShareFilePayload {
  sharedFile: Array<ISharedFile>;
}

export interface IShareFolderInput {
  memberIds: Array<IUUID>;
  folderId: IUUID;
}

export interface IShareFolderPayload {
  sharedFolders: Array<ISharedFolder>;
}

export interface IStopSharingFolderInput {
  memberIds: Array<IUUID>;
  folderId?: IUUID;
}

export interface IStopSharingFolderPayload {
  message: string;
}

export interface IStopSharingFileInput {
  memberIds: Array<IUUID>;
  fileId: IUUID;
}

export interface IStopSharingFilePayload {
  message: string;
}

export interface IUploadFilePrivateInput {
  projectId: IUUID;
  folderId?: IUUID;
  memberId?: IUUID;
  name?: string;
  fileName: string;
  description?: string;
  isProfile: boolean;
}

export interface IUploadFilePrivatePayload {
  url: string;
  message: string;
}

export interface IRoomRecorderInput {
  roomName: string;
  name?: string;
  userId?: string;
}

export interface IRoomRecorderReturn {
  name?: string;
  url?: string;
  signedUrl?: string;
  size?: number;
}

export interface IHiringInput {
  projectRoleId?: IUUID;
  memberId?: IUUID;
  dateStart?: IDateTime;
  dateEnd?: IDateTime;
  description?: string;
  amount?: IDecimal;
  amountWritted?: string;
  amountPerHour?: IDecimal;
  hiringTypeId?: IUUID;
  benefits?: IEnumBenefits;
  enumHiringType?: IEnumHiringType;
}

export interface IHiringPayload {
  hiring: IHiring;
}

export interface IHiringTypeInput {
  name?: string;
  projectId?: IUUID;
}

export interface IHiringTypePayload {
  hiringType: IHiringType;
}

export interface IShiftInput {
  projectId?: IUUID;
  memberId?: IUUID;
  timeStart: string;
  timeEnd: string;
  codeDay: string;
}

export interface IShiftPayload {
  shift: IShift;
}

export interface IDocumentCategoryInput {
  name?: string;
  description?: string;
  projectId?: IUUID;
}

export interface IDocumentCategoryPayload {
  documentCategory: IDocumentCategory;
}

export interface IDocumentCategoryDetailInput {
  documentCategoryId?: IUUID;
  documentId?: IUUID;
}

export interface IDocumentCategoryDetailPayload {
  document: IDocumentCategoryDetail;
}

export interface IDocumentInput {
  name?: string;
  url?: string;
  projectId?: IUUID;
}

export interface IDocumentPayload {
  document: IDocument;
}

export interface IDocumentTemplateInput {
  name?: string;
  documentId?: IUUID;
}

export interface IDocumentTemplatePayload {
  document: IDocumentTemplate;
}

export interface ITemplatePageInput {
  page?: number;
  url?: string;
  templateId?: IUUID;
}

export interface ITemplatePagePayload {
  templatePage: ITemplatePage;
}

export interface IDocumentTagInput {
  name?: string;
  height?: IDecimal;
  width?: IDecimal;
  verticalAxis?: IDecimal;
  horizontalAxis?: IDecimal;
  templatePageId?: IUUID;
}

export interface IDocumentTagPayload {
  documentTag: IDocumentTag;
}

export interface IDocumentScanInput {
  value?: string;
  documentTagId?: IUUID;
  documentReadId?: IUUID;
}

export interface IDocumentScanPayload {
  documentScan: IDocumentScan;
}

export interface IDocumentReadInput {
  url?: string;
  memberId?: IUUID;
  projectId?: IUUID;
}

export interface IDocumentReadPayload {
  documentRead: IDocumentRead;
}

export interface ICreateTemplateInput {
  documentReadId: IUUID;
}

export interface ICreateTemplatePayload {
  scans?: Array<IDocumentScan>;
}

export interface ISubscription {
  conversationPublished: Array<IConversationReply>;
}

export const enum IApplyPolicy {
  BEFORE_RESOLVER = 'BEFORE_RESOLVER',
  AFTER_RESOLVER = 'AFTER_RESOLVER',
}

/**
 * The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types.
 */
export type IName = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IResolver {
  Query?: IQueryTypeResolver;
  UUID?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  GroupCollectionSegment?: IGroupCollectionSegmentTypeResolver;
  Group?: IGroupTypeResolver;
  Project?: IProjectTypeResolver;
  Industry?: IIndustryTypeResolver;
  Company?: ICompanyTypeResolver;
  Country?: ICountryTypeResolver;
  Currency?: ICurrencyTypeResolver;
  Profile?: IProfileTypeResolver;
  Member?: IMemberTypeResolver;
  MemberCompany?: IMemberCompanyTypeResolver;
  MemberRole?: IMemberRoleTypeResolver;
  Role?: IRoleTypeResolver;
  MemberProject?: IMemberProjectTypeResolver;
  MemberProjectRoleProject?: IMemberProjectRoleProjectTypeResolver;
  ProjectRole?: IProjectRoleTypeResolver;
  Permission?: IPermissionTypeResolver;
  MemberTaxonomy?: IMemberTaxonomyTypeResolver;
  EventDetail?: IEventDetailTypeResolver;
  Decimal?: GraphQLScalarType;
  FisicExam?: IFisicExamTypeResolver;
  MedicalBackground?: IMedicalBackgroundTypeResolver;
  Format?: IFormatTypeResolver;
  PacientMedicalBackground?: IPacientMedicalBackgroundTypeResolver;
  MedicalBackgroundDetail?: IMedicalBackgroundDetailTypeResolver;
  ClinicHistoryMedicalBackgroundDetail?: IClinicHistoryMedicalBackgroundDetailTypeResolver;
  MedicRecipe?: IMedicRecipeTypeResolver;
  PacientNote?: IPacientNoteTypeResolver;
  VitalSign?: IVitalSignTypeResolver;
  PatientVitalSignsResponse?: IPatientVitalSignsResponseTypeResolver;
  Vaccine?: IVaccineTypeResolver;
  File?: IFileTypeResolver;
  Folder?: IFolderTypeResolver;
  SharedFile?: ISharedFileTypeResolver;
  SharedFolder?: ISharedFolderTypeResolver;
  Hiring?: IHiringTypeResolver;
  HiringType?: IHiringTypeTypeResolver;
  Shift?: IShiftTypeResolver;
  Day?: IDayTypeResolver;
  TimeSpan?: GraphQLScalarType;
  ServiceHelper?: IServiceHelperTypeResolver;
  ProjectMicroservice?: IProjectMicroserviceTypeResolver;
  Microservice?: IMicroserviceTypeResolver;
  Function?: IFunctionTypeResolver;
  Shop?: IShopTypeResolver;
  Configuration?: IConfigurationTypeResolver;
  GroupTaxonomy?: IGroupTaxonomyTypeResolver;
  Taxonomy?: ITaxonomyTypeResolver;
  Article?: IArticleTypeResolver;
  Survey?: ISurveyTypeResolver;
  Question?: IQuestionTypeResolver;
  Option?: IOptionTypeResolver;
  Answer?: IAnswerTypeResolver;
  Product?: IProductTypeResolver;
  ProductDetail?: IProductDetailTypeResolver;
  Image?: IImageTypeResolver;
  CollectionSegmentInfo?: ICollectionSegmentInfoTypeResolver;
  MyUrl?: IMyUrlTypeResolver;
  MemberProjectCollectionSegment?: IMemberProjectCollectionSegmentTypeResolver;
  MemberCollectionSegment?: IMemberCollectionSegmentTypeResolver;
  ProjectsInfiniteConnection?: IProjectsInfiniteConnectionTypeResolver;
  PageInfo?: IPageInfoTypeResolver;
  ProjectsInfiniteEdge?: IProjectsInfiniteEdgeTypeResolver;
  MemberChat?: IMemberChatTypeResolver;
  MemberFullName?: IMemberFullNameTypeResolver;
  CustomMemberDto?: ICustomMemberDtoTypeResolver;
  MessageFix?: IMessageFixTypeResolver;
  ScheduleManager?: IScheduleManagerTypeResolver;
  EventType?: IEventTypeTypeResolver;
  SubEventType?: ISubEventTypeTypeResolver;
  Event?: IEventTypeResolver;
  EventSession?: IEventSessionTypeResolver;
  EventMember?: IEventMemberTypeResolver;
  EventCharge?: IEventChargeTypeResolver;
  Diagnostic?: IDiagnosticTypeResolver;
  Medicine?: IMedicineTypeResolver;
  Schedule?: IScheduleTypeResolver;
  Turn?: ITurnTypeResolver;
  EventCollectionSegment?: IEventCollectionSegmentTypeResolver;
  ConversationReply?: IConversationReplyTypeResolver;
  Conversation?: IConversationTypeResolver;
  MemberConversation?: IMemberConversationTypeResolver;
  QuestionDTO?: IQuestionDTOTypeResolver;
  ArticlesConnection?: IArticlesConnectionTypeResolver;
  ArticlesEdge?: IArticlesEdgeTypeResolver;
  ArticleCollectionSegment?: IArticleCollectionSegmentTypeResolver;
  Address?: IAddressTypeResolver;
  ProductCollectionSegment?: IProductCollectionSegmentTypeResolver;
  TaxonomyCollectionSegment?: ITaxonomyCollectionSegmentTypeResolver;
  SeoDTO?: ISeoDTOTypeResolver;
  ServiceCollectionSegment?: IServiceCollectionSegmentTypeResolver;
  Service?: IServiceTypeResolver;
  ServiceQuiz?: IServiceQuizTypeResolver;
  Quiz?: IQuizTypeResolver;
  QuizSection?: IQuizSectionTypeResolver;
  QuizQuestion?: IQuizQuestionTypeResolver;
  QuizQuestionAnswer?: IQuizQuestionAnswerTypeResolver;
  QuizAnswer?: IQuizAnswerTypeResolver;
  QuizMember?: IQuizMemberTypeResolver;
  QuizMemberDescription?: IQuizMemberDescriptionTypeResolver;
  QuizMemberAnswer?: IQuizMemberAnswerTypeResolver;
  ServiceQuizCollectionSegment?: IServiceQuizCollectionSegmentTypeResolver;
  QuizCollectionSegment?: IQuizCollectionSegmentTypeResolver;
  QuizSectionCollectionSegment?: IQuizSectionCollectionSegmentTypeResolver;
  QuizQuestionCollectionSegment?: IQuizQuestionCollectionSegmentTypeResolver;
  QuizQuestionAnswerCollectionSegment?: IQuizQuestionAnswerCollectionSegmentTypeResolver;
  QuizAnswerCollectionSegment?: IQuizAnswerCollectionSegmentTypeResolver;
  QuizMemberCollectionSegment?: IQuizMemberCollectionSegmentTypeResolver;
  QuizMemberAnswerCollectionSegment?: IQuizMemberAnswerCollectionSegmentTypeResolver;
  QuizMemberDescriptionCollectionSegment?: IQuizMemberDescriptionCollectionSegmentTypeResolver;
  ContactEmail?: IContactEmailTypeResolver;
  TransactionCollectionSegment?: ITransactionCollectionSegmentTypeResolver;
  Transaction?: ITransactionTypeResolver;
  Invoice?: IInvoiceTypeResolver;
  InvoiceDetail?: IInvoiceDetailTypeResolver;
  MethodPayment?: IMethodPaymentTypeResolver;
  MethodPaymentCollectionSegment?: IMethodPaymentCollectionSegmentTypeResolver;
  PlanCollectionSegment?: IPlanCollectionSegmentTypeResolver;
  Plan?: IPlanTypeResolver;
  InvoiceCollectionSegment?: IInvoiceCollectionSegmentTypeResolver;
  Component?: IComponentTypeResolver;
  WebsitePage?: IWebsitePageTypeResolver;
  WebsitePageComponent?: IWebsitePageComponentTypeResolver;
  WebsitePageSeo?: IWebsitePageSeoTypeResolver;
  VideoRoom?: IVideoRoomTypeResolver;
  VideoRoomMember?: IVideoRoomMemberTypeResolver;
  VideoCall?: IVideoCallTypeResolver;
  VideoCallMember?: IVideoCallMemberTypeResolver;
  VideoCallService?: IVideoCallServiceTypeResolver;
  Video?: IVideoTypeResolver;
  StadisticsResult?: IStadisticsResultTypeResolver;
  ListRQuoterProfilesByProjectIdConnection?: IListRQuoterProfilesByProjectIdConnectionTypeResolver;
  ListRQuoterProfilesByProjectIdEdge?: IListRQuoterProfilesByProjectIdEdgeTypeResolver;
  QuoterProfile?: IQuoterProfileTypeResolver;
  Office?: IOfficeTypeResolver;
  QuoterProfileInsurer?: IQuoterProfileInsurerTypeResolver;
  Insurer?: IInsurerTypeResolver;
  InsurerService?: IInsurerServiceTypeResolver;
  InsurerServiceCredential?: IInsurerServiceCredentialTypeResolver;
  InsurerServiceEnvironment?: IInsurerServiceEnvironmentTypeResolver;
  ListRQuoterProfilesInsurerByProjectIdConnection?: IListRQuoterProfilesInsurerByProjectIdConnectionTypeResolver;
  ListRQuoterProfilesInsurerByProjectIdEdge?: IListRQuoterProfilesInsurerByProjectIdEdgeTypeResolver;
  Homologator?: IHomologatorTypeResolver;
  VehiclesCarCodeRelation?: IVehiclesCarCodeRelationTypeResolver;
  VehiclesCarCatalogAba?: IVehiclesCarCatalogAbaTypeResolver;
  Long?: GraphQLScalarType;
  VehiclesCarCatalogAbaCodeYear?: IVehiclesCarCatalogAbaCodeYearTypeResolver;
  VehiclesCarCatalogAfirme?: IVehiclesCarCatalogAfirmeTypeResolver;
  VehiclesCarCatalogAfirmeCodeYear?: IVehiclesCarCatalogAfirmeCodeYearTypeResolver;
  VehiclesCarCatalogAig?: IVehiclesCarCatalogAigTypeResolver;
  VehiclesCarCatalogAna?: IVehiclesCarCatalogAnaTypeResolver;
  VehiclesCarCatalogAnaCodeYear?: IVehiclesCarCatalogAnaCodeYearTypeResolver;
  VehiclesCarCatalogAtla?: IVehiclesCarCatalogAtlaTypeResolver;
  VehiclesCarCatalogAtlasCodeYear?: IVehiclesCarCatalogAtlasCodeYearTypeResolver;
  VehiclesCarCatalogAxa?: IVehiclesCarCatalogAxaTypeResolver;
  VehiclesCarCatalogAxaCodeYear?: IVehiclesCarCatalogAxaCodeYearTypeResolver;
  VehiclesCarCatalogBanorte?: IVehiclesCarCatalogBanorteTypeResolver;
  VehiclesCarCatalogBanorteCodeYear?: IVehiclesCarCatalogBanorteCodeYearTypeResolver;
  VehiclesCarCatalogGnp?: IVehiclesCarCatalogGnpTypeResolver;
  VehiclesCarCatalogGnpCodeYear?: IVehiclesCarCatalogGnpCodeYearTypeResolver;
  VehiclesCarCatalogHdi?: IVehiclesCarCatalogHdiTypeResolver;
  VehiclesCarCatalogHdiCodeYear?: IVehiclesCarCatalogHdiCodeYearTypeResolver;
  VehiclesCarCatalogMapfre?: IVehiclesCarCatalogMapfreTypeResolver;
  VehiclesCarCatalogMapfreCodeYear?: IVehiclesCarCatalogMapfreCodeYearTypeResolver;
  VehiclesCarCatalogPotosi?: IVehiclesCarCatalogPotosiTypeResolver;
  VehiclesCarCatalogP?: IVehiclesCarCatalogPTypeResolver;
  VehiclesCarCatalogQualita?: IVehiclesCarCatalogQualitaTypeResolver;
  VehiclesCarCatalogQualitasCodeYear?: IVehiclesCarCatalogQualitasCodeYearTypeResolver;
  VehiclesCarCatalogZurich?: IVehiclesCarCatalogZurichTypeResolver;
  VehiclesCarCatalogZurichCodeYear?: IVehiclesCarCatalogZurichCodeYearTypeResolver;
  QuoteCollectionSegment?: IQuoteCollectionSegmentTypeResolver;
  Quote?: IQuoteTypeResolver;
  CarQuotation?: ICarQuotationTypeResolver;
  Registration?: IRegistrationTypeResolver;
  Quoter?: IQuoterTypeResolver;
  GenericsService?: IGenericsServiceTypeResolver;
  ServiceProcessPayload?: IServiceProcessPayloadTypeResolver;
  CotizacionCredential?: ICotizacionCredentialTypeResolver;
  CotizacionPackage?: ICotizacionPackageTypeResolver;
  CoveragesCoverage?: ICoveragesCoverageTypeResolver;
  CoveragesPackagesList?: ICoveragesPackagesListTypeResolver;
  CotizacionQuote?: ICotizacionQuoteTypeResolver;
  Date?: GraphQLScalarType;
  CotizacionCarForm?: ICotizacionCarFormTypeResolver;
  ClientsClient?: IClientsClientTypeResolver;
  ClientsAddress?: IClientsAddressTypeResolver;
  CotizacionQuoteCoverage?: ICotizacionQuoteCoverageTypeResolver;
  CotizacionQuotePayForm?: ICotizacionQuotePayFormTypeResolver;
  GenderDTO?: IGenderDTOTypeResolver;
  CarTypeDTO?: ICarTypeDTOTypeResolver;
  ListBrandDTO?: IListBrandDTOTypeResolver;
  ListSubBrandDTO?: IListSubBrandDTOTypeResolver;
  ListYearDTO?: IListYearDTOTypeResolver;
  ListVersionDTO?: IListVersionDTOTypeResolver;
  HomologationService?: IHomologationServiceTypeResolver;
  ColoniaDTO?: IColoniaDTOTypeResolver;
  EstadoDTO?: IEstadoDTOTypeResolver;
  CoverageDTO?: ICoverageDTOTypeResolver;
  Catalog?: ICatalogTypeResolver;
  CatalogByYear?: ICatalogByYearTypeResolver;
  CatalogCollectionSegment?: ICatalogCollectionSegmentTypeResolver;
  InsurerCollectionSegment?: IInsurerCollectionSegmentTypeResolver;
  OfficeCollectionSegment?: IOfficeCollectionSegmentTypeResolver;
  QuoterProfileCollectionSegment?: IQuoterProfileCollectionSegmentTypeResolver;
  StaffQuote?: IStaffQuoteTypeResolver;
  Proposal?: IProposalTypeResolver;
  Collaborator?: ICollaboratorTypeResolver;
  DynamicPage?: IDynamicPageTypeResolver;
  DynamicSection?: IDynamicSectionTypeResolver;
  DynamicTab?: IDynamicTabTypeResolver;
  DynamicSectionBlock?: IDynamicSectionBlockTypeResolver;
  DynamicBlock?: IDynamicBlockTypeResolver;
  DynamicCustomMeta?: IDynamicCustomMetaTypeResolver;
  DynamicCustomValue?: IDynamicCustomValueTypeResolver;
  DynamicBlockCollectionSegment?: IDynamicBlockCollectionSegmentTypeResolver;
  DynamicSectionCollectionSegment?: IDynamicSectionCollectionSegmentTypeResolver;
  DynamicTabCollectionSegment?: IDynamicTabCollectionSegmentTypeResolver;
  DynamicSectionBlockCollectionSegment?: IDynamicSectionBlockCollectionSegmentTypeResolver;
  DynamicCustomMetaCollectionSegment?: IDynamicCustomMetaCollectionSegmentTypeResolver;
  DynamicCustomValueCollectionSegment?: IDynamicCustomValueCollectionSegmentTypeResolver;
  ChargeCollectionSegment?: IChargeCollectionSegmentTypeResolver;
  Charge?: IChargeTypeResolver;
  ClinicHistory?: IClinicHistoryTypeResolver;
  EventDetailCollectionSegment?: IEventDetailCollectionSegmentTypeResolver;
  MedicalService?: IMedicalServiceTypeResolver;
  MedicalConfig?: IMedicalConfigTypeResolver;
  RegistSesion?: IRegistSesionTypeResolver;
  Therapy?: ITherapyTypeResolver;
  TherapyCollectionSegment?: ITherapyCollectionSegmentTypeResolver;
  RecipeConfig?: IRecipeConfigTypeResolver;
  ConsultNote?: IConsultNoteTypeResolver;
  BillingRequest?: IBillingRequestTypeResolver;
  ApiService?: IApiServiceTypeResolver;
  DownloadFile?: IDownloadFileTypeResolver;
  ListFoldersConnection?: IListFoldersConnectionTypeResolver;
  ListFoldersEdge?: IListFoldersEdgeTypeResolver;
  FoldersListConnection?: IFoldersListConnectionTypeResolver;
  FoldersListEdge?: IFoldersListEdgeTypeResolver;
  FileCollectionSegment?: IFileCollectionSegmentTypeResolver;
  _Service?: I_ServiceTypeResolver;
  RoomToken?: IRoomTokenTypeResolver;
  RoomSession?: IRoomSessionTypeResolver;
  RoomTokenLiveKit?: IRoomTokenLiveKitTypeResolver;
  DocumentCategoryCollectionSegment?: IDocumentCategoryCollectionSegmentTypeResolver;
  DocumentCategory?: IDocumentCategoryTypeResolver;
  DocumentCategoryDetail?: IDocumentCategoryDetailTypeResolver;
  Document?: IDocumentTypeResolver;
  DocumentTemplate?: IDocumentTemplateTypeResolver;
  TemplatePage?: ITemplatePageTypeResolver;
  DocumentTag?: IDocumentTagTypeResolver;
  DocumentScan?: IDocumentScanTypeResolver;
  DocumentRead?: IDocumentReadTypeResolver;
  DocumentCollectionSegment?: IDocumentCollectionSegmentTypeResolver;
  DocumentTemplateCollectionSegment?: IDocumentTemplateCollectionSegmentTypeResolver;
  TemplatePageCollectionSegment?: ITemplatePageCollectionSegmentTypeResolver;
  DocumentReadCollectionSegment?: IDocumentReadCollectionSegmentTypeResolver;
  Mutation?: IMutationTypeResolver;
  CreateMemberPayload?: ICreateMemberPayloadTypeResolver;
  LoginMemberPayload?: ILoginMemberPayloadTypeResolver;
  CreateCompanyPayload?: ICreateCompanyPayloadTypeResolver;
  CreateProjectPayload?: ICreateProjectPayloadTypeResolver;
  CreateNewRolesPayload?: ICreateNewRolesPayloadTypeResolver;
  CreateUserPayload?: ICreateUserPayloadTypeResolver;
  UpdateProfilePayload?: IUpdateProfilePayloadTypeResolver;
  UpdatePasswordPayload?: IUpdatePasswordPayloadTypeResolver;
  ActiveMemberPayload?: IActiveMemberPayloadTypeResolver;
  CreateProjectRolePayload?: ICreateProjectRolePayloadTypeResolver;
  UploadPhotoProfilePayload?: IUploadPhotoProfilePayloadTypeResolver;
  DeleteProjectPayload?: IDeleteProjectPayloadTypeResolver;
  UpdateCompanyPayload?: IUpdateCompanyPayloadTypeResolver;
  RestorePasswordPayload?: IRestorePasswordPayloadTypeResolver;
  RecoverPasswordPayload?: IRecoverPasswordPayloadTypeResolver;
  VerifyTokenPayload?: IVerifyTokenPayloadTypeResolver;
  CreateGroupPayload?: ICreateGroupPayloadTypeResolver;
  AddGroupToMemberPayload?: IAddGroupToMemberPayloadTypeResolver;
  MemberGroup?: IMemberGroupTypeResolver;
  AddGroupToTaxonomyPayload?: IAddGroupToTaxonomyPayloadTypeResolver;
  AddTaxonomyToMemberPayload?: IAddTaxonomyToMemberPayloadTypeResolver;
  DeleteGroupPayload?: IDeleteGroupPayloadTypeResolver;
  DeleteGroupTaxonomyPayload?: IDeleteGroupTaxonomyPayloadTypeResolver;
  DeleteMemberGroupMutationPayload?: IDeleteMemberGroupMutationPayloadTypeResolver;
  DeleteMemberTaxonomyPayload?: IDeleteMemberTaxonomyPayloadTypeResolver;
  DeleteProjectRolePayload?: IDeleteProjectRolePayloadTypeResolver;
  CreateUpdatePermissionPayload?: ICreateUpdatePermissionPayloadTypeResolver;
  UpdateProjectPayload?: IUpdateProjectPayloadTypeResolver;
  UpdateProjectRolePayload?: IUpdateProjectRolePayloadTypeResolver;
  UpdateGroupPayload?: IUpdateGroupPayloadTypeResolver;
  AssociationServiceToProjectPayload?: IAssociationServiceToProjectPayloadTypeResolver;
  CreateArrayFunctionPayload?: ICreateArrayFunctionPayloadTypeResolver;
  DeleteArrayFunctionPayload?: IDeleteArrayFunctionPayloadTypeResolver;
  UpdateServiceProjectPayload?: IUpdateServiceProjectPayloadTypeResolver;
  DeleteServiceProjectPayload?: IDeleteServiceProjectPayloadTypeResolver;
  CreateEventTypePayload?: ICreateEventTypePayloadTypeResolver;
  CreateSubEventTypePayload?: ICreateSubEventTypePayloadTypeResolver;
  DeleteSubEventTypePayload?: IDeleteSubEventTypePayloadTypeResolver;
  UpdateSubEventTypePayload?: IUpdateSubEventTypePayloadTypeResolver;
  AddSubTypeToEventTypePayload?: IAddSubTypeToEventTypePayloadTypeResolver;
  DeleteEventTypePayload?: IDeleteEventTypePayloadTypeResolver;
  UpdateEventTypePayload?: IUpdateEventTypePayloadTypeResolver;
  CreateEventPayload?: ICreateEventPayloadTypeResolver;
  CreateEventMemberPayload?: ICreateEventMemberPayloadTypeResolver;
  UpdateEventPayload?: IUpdateEventPayloadTypeResolver;
  DeleteEventPayload?: IDeleteEventPayloadTypeResolver;
  CreateEventSessionPayload?: ICreateEventSessionPayloadTypeResolver;
  UpdateEventSessionPayload?: IUpdateEventSessionPayloadTypeResolver;
  DeleteEventSessionPayload?: IDeleteEventSessionPayloadTypeResolver;
  CreateSchedulePayload?: ICreateSchedulePayloadTypeResolver;
  AssociationMemberToConsultPayload?: IAssociationMemberToConsultPayloadTypeResolver;
  CancellationMemberToConsultPayload?: ICancellationMemberToConsultPayloadTypeResolver;
  AddChatMemberPayload?: IAddChatMemberPayloadTypeResolver;
  AddChatMemberWsPayload?: IAddChatMemberWsPayloadTypeResolver;
  GetConversationIdPayload?: IGetConversationIdPayloadTypeResolver;
  DeleteReplyPayload?: IDeleteReplyPayloadTypeResolver;
  CreateArticlePayload?: ICreateArticlePayloadTypeResolver;
  UpdateStatusArticlePayload?: IUpdateStatusArticlePayloadTypeResolver;
  CreateTaxonomyPayload?: ICreateTaxonomyPayloadTypeResolver;
  UpdateArticlePayload?: IUpdateArticlePayloadTypeResolver;
  UpdateTaxonomyPayload?: IUpdateTaxonomyPayloadTypeResolver;
  DeleteArticlePayload?: IDeleteArticlePayloadTypeResolver;
  DeleteTaxonomyPayload?: IDeleteTaxonomyPayloadTypeResolver;
  NewSurveyPayload?: INewSurveyPayloadTypeResolver;
  UpdateSurveyPayload?: IUpdateSurveyPayloadTypeResolver;
  DeleteSurveyPayload?: IDeleteSurveyPayloadTypeResolver;
  NewQuestionPayload?: INewQuestionPayloadTypeResolver;
  DeleteQuestionPayload?: IDeleteQuestionPayloadTypeResolver;
  UpdateQuestionPayload?: IUpdateQuestionPayloadTypeResolver;
  NewOptionPayload?: INewOptionPayloadTypeResolver;
  DeleteOptionPayload?: IDeleteOptionPayloadTypeResolver;
  UpdateOptionPayload?: IUpdateOptionPayloadTypeResolver;
  AnswerQuestionPayload?: IAnswerQuestionPayloadTypeResolver;
  CreateProductPayload?: ICreateProductPayloadTypeResolver;
  UpdateProductPayload?: IUpdateProductPayloadTypeResolver;
  DeleteProductPayload?: IDeleteProductPayloadTypeResolver;
  CreateAddressPayload?: ICreateAddressPayloadTypeResolver;
  UpdateAddressPayload?: IUpdateAddressPayloadTypeResolver;
  DeleteAddressPayload?: IDeleteAddressPayloadTypeResolver;
  CreateUpdateShopPayload?: ICreateUpdateShopPayloadTypeResolver;
  ServicePayload?: IServicePayloadTypeResolver;
  ServiceQuizPayload?: IServiceQuizPayloadTypeResolver;
  QuizPayload?: IQuizPayloadTypeResolver;
  QuizSectionPayload?: IQuizSectionPayloadTypeResolver;
  QuizQuestionPayload?: IQuizQuestionPayloadTypeResolver;
  QuizQuestionAnswerPayload?: IQuizQuestionAnswerPayloadTypeResolver;
  QuizAnswerPayload?: IQuizAnswerPayloadTypeResolver;
  QuizMemberPayload?: IQuizMemberPayloadTypeResolver;
  QuizMemberAnswerPayload?: IQuizMemberAnswerPayloadTypeResolver;
  QuizMemberDescriptionPayload?: IQuizMemberDescriptionPayloadTypeResolver;
  CreateUpdateContactEmailPayload?: ICreateUpdateContactEmailPayloadTypeResolver;
  SendEmailPayload?: ISendEmailPayloadTypeResolver;
  ResponseEmail?: IResponseEmailTypeResolver;
  DeleteContactEmailPayload?: IDeleteContactEmailPayloadTypeResolver;
  CreateMethodPaymentPayload?: ICreateMethodPaymentPayloadTypeResolver;
  UpdateMethodPaymentPayload?: IUpdateMethodPaymentPayloadTypeResolver;
  DeleteMethodPaymentPayload?: IDeleteMethodPaymentPayloadTypeResolver;
  CreatePaymentStripePayload?: ICreatePaymentStripePayloadTypeResolver;
  CreateSuscriptionStripePayload?: ICreateSuscriptionStripePayloadTypeResolver;
  AccountKey?: IAccountKeyTypeResolver;
  CreateStripeAccountPayload?: ICreateStripeAccountPayloadTypeResolver;
  DeletePaymentPayload?: IDeletePaymentPayloadTypeResolver;
  UpdatePaymentPayload?: IUpdatePaymentPayloadTypeResolver;
  CreateInvoicePayload?: ICreateInvoicePayloadTypeResolver;
  UpdateStatusInvoicePayload?: IUpdateStatusInvoicePayloadTypeResolver;
  PutConfigPayload?: IPutConfigPayloadTypeResolver;
  DeleteConfigPayload?: IDeleteConfigPayloadTypeResolver;
  UpdateOrderPagesPayload?: IUpdateOrderPagesPayloadTypeResolver;
  PagesDto?: IPagesDtoTypeResolver;
  UpdateBatchWewbsiteComponentPayload?: IUpdateBatchWewbsiteComponentPayloadTypeResolver;
  ComponentDto?: IComponentDtoTypeResolver;
  CreateComponentPayload?: ICreateComponentPayloadTypeResolver;
  CreateWebsiteComponentPayload?: ICreateWebsiteComponentPayloadTypeResolver;
  CreateWebsitePagePayload?: ICreateWebsitePagePayloadTypeResolver;
  CreateWebsiteSeoPayload?: ICreateWebsiteSeoPayloadTypeResolver;
  UpdateComponentPayload?: IUpdateComponentPayloadTypeResolver;
  UpdateWebsiteComponentPayload?: IUpdateWebsiteComponentPayloadTypeResolver;
  UpdateWebsitePagePayload?: IUpdateWebsitePagePayloadTypeResolver;
  UpdateWebsiteSeoPayload?: IUpdateWebsiteSeoPayloadTypeResolver;
  DeleteComponentPayload?: IDeleteComponentPayloadTypeResolver;
  DeleteWebsiteComponentPayload?: IDeleteWebsiteComponentPayloadTypeResolver;
  DeleteWebsitePagePayload?: IDeleteWebsitePagePayloadTypeResolver;
  DeleteWebsiteSeoPayload?: IDeleteWebsiteSeoPayloadTypeResolver;
  CreateVideoCallPayload?: ICreateVideoCallPayloadTypeResolver;
  RoomAccessToken?: IRoomAccessTokenTypeResolver;
  UpdateVideoCallPayload?: IUpdateVideoCallPayloadTypeResolver;
  DeleteVideoCallPayload?: IDeleteVideoCallPayloadTypeResolver;
  CreateVideoRoomPayload?: ICreateVideoRoomPayloadTypeResolver;
  SendNotificationUsersPayload?: ISendNotificationUsersPayloadTypeResolver;
  SendEmailDownloadPayload?: ISendEmailDownloadPayloadTypeResolver;
  CreateQuotePayload?: ICreateQuotePayloadTypeResolver;
  CreateNewOfficesPayload?: ICreateNewOfficesPayloadTypeResolver;
  CreateNewProfilesPayload?: ICreateNewProfilesPayloadTypeResolver;
  CreateInsurerPayload?: ICreateInsurerPayloadTypeResolver;
  CreateOfficePayload?: ICreateOfficePayloadTypeResolver;
  CreateRegistrationPayload?: ICreateRegistrationPayloadTypeResolver;
  CreateQuatorProfilePayload?: ICreateQuatorProfilePayloadTypeResolver;
  DeleteInsurerPayload?: IDeleteInsurerPayloadTypeResolver;
  DeleteOfficePayload?: IDeleteOfficePayloadTypeResolver;
  DeleteQuoterProfilePayload?: IDeleteQuoterProfilePayloadTypeResolver;
  UpdateInsurerPayload?: IUpdateInsurerPayloadTypeResolver;
  UpdateOfficePayload?: IUpdateOfficePayloadTypeResolver;
  UpdateQuoterProfilePayload?: IUpdateQuoterProfilePayloadTypeResolver;
  CreateCatalogPayload?: ICreateCatalogPayloadTypeResolver;
  PopulateCredentialsPayload?: IPopulateCredentialsPayloadTypeResolver;
  PopulateServicesPayload?: IPopulateServicesPayloadTypeResolver;
  RunServicePayload?: IRunServicePayloadTypeResolver;
  QuoterResponse?: IQuoterResponseTypeResolver;
  CoverageService?: ICoverageServiceTypeResolver;
  ResponseApiInsurer?: IResponseApiInsurerTypeResolver;
  multiquoter_Service?: Imultiquoter_ServiceTypeResolver;
  QuoteCoverage?: IQuoteCoverageTypeResolver;
  QuotePayFrecuency?: IQuotePayFrecuencyTypeResolver;
  DiscountService?: IDiscountServiceTypeResolver;
  EmissionCarPayload?: IEmissionCarPayloadTypeResolver;
  StaffQuotePayload?: IStaffQuotePayloadTypeResolver;
  ProposalPayload?: IProposalPayloadTypeResolver;
  CollaboratorPayload?: ICollaboratorPayloadTypeResolver;
  AssociationWithQuoterProfilePayload?: IAssociationWithQuoterProfilePayloadTypeResolver;
  UpdateQuotePayload?: IUpdateQuotePayloadTypeResolver;
  CreateInsurerCredentialPayload?: ICreateInsurerCredentialPayloadTypeResolver;
  UpdateInsurerCredentialPayload?: IUpdateInsurerCredentialPayloadTypeResolver;
  RunJobInsurerMutationPayload?: IRunJobInsurerMutationPayloadTypeResolver;
  AssociationRelationCarPayload?: IAssociationRelationCarPayloadTypeResolver;
  DynamicCustomMetaPayload?: IDynamicCustomMetaPayloadTypeResolver;
  DynamicCustomValuePayload?: IDynamicCustomValuePayloadTypeResolver;
  DynamicPagePayload?: IDynamicPagePayloadTypeResolver;
  DynamicBlockPayload?: IDynamicBlockPayloadTypeResolver;
  DynamicSectionPayload?: IDynamicSectionPayloadTypeResolver;
  DynamicSectionBlockPayload?: IDynamicSectionBlockPayloadTypeResolver;
  DynamicTabPayload?: IDynamicTabPayloadTypeResolver;
  CreateChargePayload?: ICreateChargePayloadTypeResolver;
  CreateClinicHistoryPayload?: ICreateClinicHistoryPayloadTypeResolver;
  CreateClinicHistoryMedicalBackgroundDetailPayload?: ICreateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver;
  CreateEventDetailPayload?: ICreateEventDetailPayloadTypeResolver;
  CreateFisicExamPayload?: ICreateFisicExamPayloadTypeResolver;
  CreateFormatPayload?: ICreateFormatPayloadTypeResolver;
  CreateMedicalBackgroundDetailPayload?: ICreateMedicalBackgroundDetailPayloadTypeResolver;
  CreateMedicalBackgroundPayload?: ICreateMedicalBackgroundPayloadTypeResolver;
  CreateMedicalConfigPayload?: ICreateMedicalConfigPayloadTypeResolver;
  CreateMedicalServicePaylod?: ICreateMedicalServicePaylodTypeResolver;
  CreateMedicinePayload?: ICreateMedicinePayloadTypeResolver;
  CreateVaccinePayload?: ICreateVaccinePayloadTypeResolver;
  CreateVitalSignsPayload?: ICreateVitalSignsPayloadTypeResolver;
  CreateMedicRecipePayload?: ICreateMedicRecipePayloadTypeResolver;
  CreateRecipeConfigPaylod?: ICreateRecipeConfigPaylodTypeResolver;
  CreateRegistSesionPayload?: ICreateRegistSesionPayloadTypeResolver;
  CreatePacientNotePayload?: ICreatePacientNotePayloadTypeResolver;
  CreateDiagnosticPayload?: ICreateDiagnosticPayloadTypeResolver;
  CreateConsultNotePayload?: ICreateConsultNotePayloadTypeResolver;
  CreateMedicalBackgroundSetPayload?: ICreateMedicalBackgroundSetPayloadTypeResolver;
  CreatePacientMedicalBackgroundPaylod?: ICreatePacientMedicalBackgroundPaylodTypeResolver;
  CreatePatientVitalSignsResponsePayload?: ICreatePatientVitalSignsResponsePayloadTypeResolver;
  UpdateChargePayload?: IUpdateChargePayloadTypeResolver;
  UpdateClinicHistoryPayloads?: IUpdateClinicHistoryPayloadsTypeResolver;
  UpdateClinicHistoryMedicalBackgroundDetailPayload?: IUpdateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver;
  UpdateEventDetailtPayload?: IUpdateEventDetailtPayloadTypeResolver;
  UpdateFisicExamPayload?: IUpdateFisicExamPayloadTypeResolver;
  UpdateFormatPayload?: IUpdateFormatPayloadTypeResolver;
  UpdateMedicalBackgroundDetailPayload?: IUpdateMedicalBackgroundDetailPayloadTypeResolver;
  UpdateMedicalBackgroundPayload?: IUpdateMedicalBackgroundPayloadTypeResolver;
  UpdateMedicalConfigPayload?: IUpdateMedicalConfigPayloadTypeResolver;
  UpdateMedicalServicePayload?: IUpdateMedicalServicePayloadTypeResolver;
  UpdateMedicinePayload?: IUpdateMedicinePayloadTypeResolver;
  UpdateVaccinePayload?: IUpdateVaccinePayloadTypeResolver;
  UpdateVitalSingsPayloads?: IUpdateVitalSingsPayloadsTypeResolver;
  UpdateMedicRecipePayload?: IUpdateMedicRecipePayloadTypeResolver;
  UpdateRecipeConfigPayload?: IUpdateRecipeConfigPayloadTypeResolver;
  UpdateRegistSesionPayload?: IUpdateRegistSesionPayloadTypeResolver;
  UpdatePacientNotePayload?: IUpdatePacientNotePayloadTypeResolver;
  UpdateTherapyPayload?: IUpdateTherapyPayloadTypeResolver;
  UpdateDiagnosticPayload?: IUpdateDiagnosticPayloadTypeResolver;
  UpdateConsultNotePayload?: IUpdateConsultNotePayloadTypeResolver;
  UpdatePacientMedicalBackgroundPayload?: IUpdatePacientMedicalBackgroundPayloadTypeResolver;
  UpdateBillingRequestPayload?: IUpdateBillingRequestPayloadTypeResolver;
  UpdateSortFormatPayload?: IUpdateSortFormatPayloadTypeResolver;
  UpdatePatientVitalSignsResponsePayloads?: IUpdatePatientVitalSignsResponsePayloadsTypeResolver;
  DeleteChargePayload?: IDeleteChargePayloadTypeResolver;
  DeleteClinicHistoryPayload?: IDeleteClinicHistoryPayloadTypeResolver;
  DeleteClinicHistoryMedicalBackgroundDetailPayload?: IDeleteClinicHistoryMedicalBackgroundDetailPayloadTypeResolver;
  DeleteConsultPayload?: IDeleteConsultPayloadTypeResolver;
  DeleteFisicalExamPayload?: IDeleteFisicalExamPayloadTypeResolver;
  DeleteMedicalBackgroundDetailPayload?: IDeleteMedicalBackgroundDetailPayloadTypeResolver;
  DeleteMedicalBackgroundPayload?: IDeleteMedicalBackgroundPayloadTypeResolver;
  DeleteMedicalConfigPayload?: IDeleteMedicalConfigPayloadTypeResolver;
  DeleteMedicalServicePayload?: IDeleteMedicalServicePayloadTypeResolver;
  DeleteMedicinePayload?: IDeleteMedicinePayloadTypeResolver;
  DeleteVaccinePayload?: IDeleteVaccinePayloadTypeResolver;
  DeleteVitalSignPayload?: IDeleteVitalSignPayloadTypeResolver;
  DeleteMedicRecipePayload?: IDeleteMedicRecipePayloadTypeResolver;
  DeleteRecipeConfigPayload?: IDeleteRecipeConfigPayloadTypeResolver;
  DeleteRegistSesionPayload?: IDeleteRegistSesionPayloadTypeResolver;
  DeleteTherapyPayload?: IDeleteTherapyPayloadTypeResolver;
  DeleteDiagnosticPayload?: IDeleteDiagnosticPayloadTypeResolver;
  DeleteConsultNotePayload?: IDeleteConsultNotePayloadTypeResolver;
  DeletePacientNotePayload?: IDeletePacientNotePayloadTypeResolver;
  DeletePacientMedicalBackgroundPayload?: IDeletePacientMedicalBackgroundPayloadTypeResolver;
  DeleteBillingRequestPayload?: IDeleteBillingRequestPayloadTypeResolver;
  DeleteFormatPayload?: IDeleteFormatPayloadTypeResolver;
  CreatePDFPayload?: ICreatePDFPayloadTypeResolver;
  CreateApiServicePayload?: ICreateApiServicePayloadTypeResolver;
  UpdateApiServicePayload?: IUpdateApiServicePayloadTypeResolver;
  FolderPayload?: IFolderPayloadTypeResolver;
  DeleteFolderPayLoad?: IDeleteFolderPayLoadTypeResolver;
  CreateFilePayload?: ICreateFilePayloadTypeResolver;
  UpdateFilesPayload?: IUpdateFilesPayloadTypeResolver;
  DeleteFilePayLoad?: IDeleteFilePayLoadTypeResolver;
  ShareFilePayload?: IShareFilePayloadTypeResolver;
  ShareFolderPayload?: IShareFolderPayloadTypeResolver;
  StopSharingFolderPayload?: IStopSharingFolderPayloadTypeResolver;
  StopSharingFilePayload?: IStopSharingFilePayloadTypeResolver;
  UploadFilePrivatePayload?: IUploadFilePrivatePayloadTypeResolver;
  RoomRecorderReturn?: IRoomRecorderReturnTypeResolver;
  HiringPayload?: IHiringPayloadTypeResolver;
  HiringTypePayload?: IHiringTypePayloadTypeResolver;
  ShiftPayload?: IShiftPayloadTypeResolver;
  DocumentCategoryPayload?: IDocumentCategoryPayloadTypeResolver;
  DocumentCategoryDetailPayload?: IDocumentCategoryDetailPayloadTypeResolver;
  DocumentPayload?: IDocumentPayloadTypeResolver;
  DocumentTemplatePayload?: IDocumentTemplatePayloadTypeResolver;
  TemplatePagePayload?: ITemplatePagePayloadTypeResolver;
  DocumentTagPayload?: IDocumentTagPayloadTypeResolver;
  DocumentScanPayload?: IDocumentScanPayloadTypeResolver;
  DocumentReadPayload?: IDocumentReadPayloadTypeResolver;
  CreateTemplatePayload?: ICreateTemplatePayloadTypeResolver;
  Subscription?: ISubscriptionTypeResolver;
  Name?: GraphQLScalarType;
}
export interface IQueryTypeResolver<TParent = any> {
  listGroups?: QueryToListGroupsResolver<TParent>;
  groupById?: QueryToGroupByIdResolver<TParent>;
  me?: QueryToMeResolver<TParent>;
  meById?: QueryToMeByIdResolver<TParent>;
  meByIdPublic?: QueryToMeByIdPublicResolver<TParent>;
  referer?: QueryToRefererResolver<TParent>;
  projectByUrl?: QueryToProjectByUrlResolver<TParent>;
  countries?: QueryToCountriesResolver<TParent>;
  companies?: QueryToCompaniesResolver<TParent>;
  roles?: QueryToRolesResolver<TParent>;
  industries?: QueryToIndustriesResolver<TParent>;
  rolesByProject?: QueryToRolesByProjectResolver<TParent>;
  members?: QueryToMembersResolver<TParent>;
  memberById?: QueryToMemberByIdResolver<TParent>;
  deleteMyMembers?: QueryToDeleteMyMembersResolver<TParent>;
  membersByProject?: QueryToMembersByProjectResolver<TParent>;
  countryByCode?: QueryToCountryByCodeResolver<TParent>;
  listUsers?: QueryToListUsersResolver<TParent>;
  listUsersPublic?: QueryToListUsersPublicResolver<TParent>;
  projectsInfinite?: QueryToProjectsInfiniteResolver<TParent>;
  projects?: QueryToProjectsResolver<TParent>;
  projectById?: QueryToProjectByIdResolver<TParent>;
  conversationMemberBy?: QueryToConversationMemberByResolver<TParent>;
  memberNameBy?: QueryToMemberNameByResolver<TParent>;
  userById?: QueryToUserByIdResolver<TParent>;
  customMemberById?: QueryToCustomMemberByIdResolver<TParent>;
  services?: QueryToServicesResolver<TParent>;
  fixUpdateNameService?: QueryToFixUpdateNameServiceResolver<TParent>;
  servicesByProject?: QueryToServicesByProjectResolver<TParent>;
  endOfDay?: QueryToEndOfDayResolver<TParent>;
  startOfDay?: QueryToStartOfDayResolver<TParent>;
  listSchedules?: QueryToListSchedulesResolver<TParent>;
  availableEvents?: QueryToAvailableEventsResolver<TParent>;
  myEvents?: QueryToMyEventsResolver<TParent>;
  events?: QueryToEventsResolver<TParent>;
  filteredEvents?: QueryToFilteredEventsResolver<TParent>;
  currentDate?: QueryToCurrentDateResolver<TParent>;
  eventTypes?: QueryToEventTypesResolver<TParent>;
  subEventTypes?: QueryToSubEventTypesResolver<TParent>;
  eventById?: QueryToEventByIdResolver<TParent>;
  localTime?: QueryToLocalTimeResolver<TParent>;
  nextEvent?: QueryToNextEventResolver<TParent>;
  nextEventMembers?: QueryToNextEventMembersResolver<TParent>;
  membersEvents?: QueryToMembersEventsResolver<TParent>;
  associatedEvents?: QueryToAssociatedEventsResolver<TParent>;
  conversationsByToMemberId?: QueryToConversationsByToMemberIdResolver<TParent>;
  conversationsByMemberId?: QueryToConversationsByMemberIdResolver<TParent>;
  resultByMemberId?: QueryToResultByMemberIdResolver<TParent>;
  results?: QueryToResultsResolver<TParent>;
  answers?: QueryToAnswersResolver<TParent>;
  articles?: QueryToArticlesResolver<TParent>;
  listArticles?: QueryToListArticlesResolver<TParent>;
  listAddresses?: QueryToListAddressesResolver<TParent>;
  taxonomyById?: QueryToTaxonomyByIdResolver<TParent>;
  taxonomyBySlug?: QueryToTaxonomyBySlugResolver<TParent>;
  listProducts?: QueryToListProductsResolver<TParent>;
  taxonomiesByProject?: QueryToTaxonomiesByProjectResolver<TParent>;
  surveysByArticleId?: QueryToSurveysByArticleIdResolver<TParent>;
  shopById?: QueryToShopByIdResolver<TParent>;
  articleById?: QueryToArticleByIdResolver<TParent>;
  seoBySlug?: QueryToSeoBySlugResolver<TParent>;
  articleBySlug?: QueryToArticleBySlugResolver<TParent>;
  productById?: QueryToProductByIdResolver<TParent>;
  productBySlug?: QueryToProductBySlugResolver<TParent>;
  productByIdResolver?: QueryToProductByIdResolverResolver<TParent>;
  addressById?: QueryToAddressByIdResolver<TParent>;
  listService?: QueryToListServiceResolver<TParent>;
  listServiceQuiz?: QueryToListServiceQuizResolver<TParent>;
  listQuiz?: QueryToListQuizResolver<TParent>;
  listQuizSection?: QueryToListQuizSectionResolver<TParent>;
  listQuizQuestion?: QueryToListQuizQuestionResolver<TParent>;
  listQuizQuestionAnswer?: QueryToListQuizQuestionAnswerResolver<TParent>;
  listQuizAnswer?: QueryToListQuizAnswerResolver<TParent>;
  listQuizMember?: QueryToListQuizMemberResolver<TParent>;
  listQuizMemberAnswer?: QueryToListQuizMemberAnswerResolver<TParent>;
  listQuizMemberDescription?: QueryToListQuizMemberDescriptionResolver<TParent>;
  contactEmails?: QueryToContactEmailsResolver<TParent>;
  transactions?: QueryToTransactionsResolver<TParent>;
  methodPayments?: QueryToMethodPaymentsResolver<TParent>;
  plan?: QueryToPlanResolver<TParent>;
  listInvoices?: QueryToListInvoicesResolver<TParent>;
  invoiceById?: QueryToInvoiceByIdResolver<TParent>;
  listInvoiceAddress?: QueryToListInvoiceAddressResolver<TParent>;
  listInvoiceDetailProduct?: QueryToListInvoiceDetailProductResolver<TParent>;
  configs?: QueryToConfigsResolver<TParent>;
  listComponents?: QueryToListComponentsResolver<TParent>;
  listWebsitePages?: QueryToListWebsitePagesResolver<TParent>;
  webSitePageById?: QueryToWebSitePageByIdResolver<TParent>;
  websitePageComponentById?: QueryToWebsitePageComponentByIdResolver<TParent>;
  websitePageBySlug?: QueryToWebsitePageBySlugResolver<TParent>;
  verifyVideoRoom?: QueryToVerifyVideoRoomResolver<TParent>;
  videoCalls?: QueryToVideoCallsResolver<TParent>;
  videoCallsByMember?: QueryToVideoCallsByMemberResolver<TParent>;
  videoCallById?: QueryToVideoCallByIdResolver<TParent>;
  videoCallBySessionId?: QueryToVideoCallBySessionIdResolver<TParent>;
  stadistics?: QueryToStadisticsResolver<TParent>;
  stadisticsQualitas?: QueryToStadisticsQualitasResolver<TParent>;
  listRQuoterProfilesByProjectId?: QueryToListRQuoterProfilesByProjectIdResolver<TParent>;
  listRQuoterProfilesInsurerByProjectId?: QueryToListRQuoterProfilesInsurerByProjectIdResolver<TParent>;
  homologated?: QueryToHomologatedResolver<TParent>;
  listInsurerServiceCredentials?: QueryToListInsurerServiceCredentialsResolver<TParent>;
  listInsurerService?: QueryToListInsurerServiceResolver<TParent>;
  listInsurerService2?: QueryToListInsurerService2Resolver<TParent>;
  listRelations?: QueryToListRelationsResolver<TParent>;
  quotes?: QueryToQuotesResolver<TParent>;
  listRegistrations?: QueryToListRegistrationsResolver<TParent>;
  quoteById?: QueryToQuoteByIdResolver<TParent>;
  listQuoteServices?: QueryToListQuoteServicesResolver<TParent>;
  listGenders?: QueryToListGendersResolver<TParent>;
  listCars?: QueryToListCarsResolver<TParent>;
  listCarType?: QueryToListCarTypeResolver<TParent>;
  listCarBrand?: QueryToListCarBrandResolver<TParent>;
  listCarSuBbrand?: QueryToListCarSuBbrandResolver<TParent>;
  listModel?: QueryToListModelResolver<TParent>;
  car?: QueryToCarResolver<TParent>;
  relationCars?: QueryToRelationCarsResolver<TParent>;
  colony?: QueryToColonyResolver<TParent>;
  listCoverages?: QueryToListCoveragesResolver<TParent>;
  catalogById?: QueryToCatalogByIdResolver<TParent>;
  catalogs?: QueryToCatalogsResolver<TParent>;
  catalogByYears?: QueryToCatalogByYearsResolver<TParent>;
  insurers?: QueryToInsurersResolver<TParent>;
  offices?: QueryToOfficesResolver<TParent>;
  quatorProfiles?: QueryToQuatorProfilesResolver<TParent>;
  quoterProfileById?: QueryToQuoterProfileByIdResolver<TParent>;
  vehiclesCarCatalogAbas?: QueryToVehiclesCarCatalogAbasResolver<TParent>;
  vehiclesCarCatalogAbasByBrand?: QueryToVehiclesCarCatalogAbasByBrandResolver<TParent>;
  vehiclesCarCatalogAbasBySubBrand?: QueryToVehiclesCarCatalogAbasBySubBrandResolver<TParent>;
  vehiclesCarCatalogAfirme?: QueryToVehiclesCarCatalogAfirmeResolver<TParent>;
  vehiclesCarCatalogAfirmebyBrand?: QueryToVehiclesCarCatalogAfirmebyBrandResolver<TParent>;
  vehiclesCarCatalogAfirmebySubrand?: QueryToVehiclesCarCatalogAfirmebySubrandResolver<TParent>;
  vehiclesCarCatalogAig?: QueryToVehiclesCarCatalogAigResolver<TParent>;
  vehiclesCarCatalogAigByBrand?: QueryToVehiclesCarCatalogAigByBrandResolver<TParent>;
  vehiclesCarCatalogAigBySubBrand?: QueryToVehiclesCarCatalogAigBySubBrandResolver<TParent>;
  vehiclesCarCatalogAnas?: QueryToVehiclesCarCatalogAnasResolver<TParent>;
  vehiclesCarCatalogAnasByBrand?: QueryToVehiclesCarCatalogAnasByBrandResolver<TParent>;
  vehiclesCarCatalogAnasbySubbrand?: QueryToVehiclesCarCatalogAnasbySubbrandResolver<TParent>;
  vehiclesAtlas?: QueryToVehiclesAtlasResolver<TParent>;
  vehiclesAtlasByBrand?: QueryToVehiclesAtlasByBrandResolver<TParent>;
  vehiclesAtlasBySubbrand?: QueryToVehiclesAtlasBySubbrandResolver<TParent>;
  vehiclesAxa?: QueryToVehiclesAxaResolver<TParent>;
  vehiclesAxaByBrand?: QueryToVehiclesAxaByBrandResolver<TParent>;
  vehiclesAxaBySubbrand?: QueryToVehiclesAxaBySubbrandResolver<TParent>;
  vehiclesBanorte?: QueryToVehiclesBanorteResolver<TParent>;
  vehiclesBanorteByBrand?: QueryToVehiclesBanorteByBrandResolver<TParent>;
  vehiclesBanorteBySubbrand?: QueryToVehiclesBanorteBySubbrandResolver<TParent>;
  vehiclesGrip?: QueryToVehiclesGripResolver<TParent>;
  vehiclesGripByBrand?: QueryToVehiclesGripByBrandResolver<TParent>;
  vehiclesGripBySubbrand?: QueryToVehiclesGripBySubbrandResolver<TParent>;
  vehiclesHdi?: QueryToVehiclesHdiResolver<TParent>;
  vehiclesHdiByBrand?: QueryToVehiclesHdiByBrandResolver<TParent>;
  vehiclesHdiBySubbrand?: QueryToVehiclesHdiBySubbrandResolver<TParent>;
  vehiclesMapfree?: QueryToVehiclesMapfreeResolver<TParent>;
  vehiclesMapfreeByBrand?: QueryToVehiclesMapfreeByBrandResolver<TParent>;
  vehiclesMapfreeBySubbrand?: QueryToVehiclesMapfreeBySubbrandResolver<TParent>;
  vehiclesP?: QueryToVehiclesPResolver<TParent>;
  vehiclesPByBrand?: QueryToVehiclesPByBrandResolver<TParent>;
  vehiclesPBySubbrand?: QueryToVehiclesPBySubbrandResolver<TParent>;
  vehiclesPotosi?: QueryToVehiclesPotosiResolver<TParent>;
  vehiclesPotosiByBrand?: QueryToVehiclesPotosiByBrandResolver<TParent>;
  vehiclesPotosiBySubbrand?: QueryToVehiclesPotosiBySubbrandResolver<TParent>;
  vehiclesQualitas?: QueryToVehiclesQualitasResolver<TParent>;
  vehiclesQualitasByBrand?: QueryToVehiclesQualitasByBrandResolver<TParent>;
  vehiclesQualitasBySubbrand?: QueryToVehiclesQualitasBySubbrandResolver<TParent>;
  vehiclesZurich?: QueryToVehiclesZurichResolver<TParent>;
  vehiclesZurichByBrand?: QueryToVehiclesZurichByBrandResolver<TParent>;
  vehiclesZurichBySubbrand?: QueryToVehiclesZurichBySubbrandResolver<TParent>;
  vehiclesCarcatalogAbaCodeYearsCarId?: QueryToVehiclesCarcatalogAbaCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogAfirmeCodeYearsCarId?: QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogAxaCodeYearsCarId?: QueryToVehiclesCarcatalogAxaCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogAtlasCodeYearsCarId?: QueryToVehiclesCarcatalogAtlasCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogBanorteCodeYearsCarId?: QueryToVehiclesCarcatalogBanorteCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogGnpCodeYearsCarId?: QueryToVehiclesCarcatalogGnpCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogHdiCodeYearsCarId?: QueryToVehiclesCarcatalogHdiCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogMapfreeCodeYearsCarId?: QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogQualitasCodeYearsCarId?: QueryToVehiclesCarcatalogQualitasCodeYearsCarIdResolver<TParent>;
  vehiclesCarcatalogZurichCodeYearsCarId?: QueryToVehiclesCarcatalogZurichCodeYearsCarIdResolver<TParent>;
  listStaffQuote?: QueryToListStaffQuoteResolver<TParent>;
  listProposal?: QueryToListProposalResolver<TParent>;
  listCollaborator?: QueryToListCollaboratorResolver<TParent>;
  listDynamicPage?: QueryToListDynamicPageResolver<TParent>;
  listDynamicBlock?: QueryToListDynamicBlockResolver<TParent>;
  listDynamicSection?: QueryToListDynamicSectionResolver<TParent>;
  listDynamicTab?: QueryToListDynamicTabResolver<TParent>;
  listDynamicSectionBlock?: QueryToListDynamicSectionBlockResolver<TParent>;
  listDynamicCustomMeta?: QueryToListDynamicCustomMetaResolver<TParent>;
  listDynamicCustomValue?: QueryToListDynamicCustomValueResolver<TParent>;
  listCharges?: QueryToListChargesResolver<TParent>;
  listClinicHistory?: QueryToListClinicHistoryResolver<TParent>;
  listConsult?: QueryToListConsultResolver<TParent>;
  listFisicExam?: QueryToListFisicExamResolver<TParent>;
  listMedicalBackgrounds?: QueryToListMedicalBackgroundsResolver<TParent>;
  listMedicBackgroundDetails?: QueryToListMedicBackgroundDetailsResolver<TParent>;
  listClinicHistory_MedicalBackgroundDetails?: QueryToListClinicHistory_MedicalBackgroundDetailsResolver<TParent>;
  listMedicines?: QueryToListMedicinesResolver<TParent>;
  listMedicalServices?: QueryToListMedicalServicesResolver<TParent>;
  listVaccines?: QueryToListVaccinesResolver<TParent>;
  listVitalSigns?: QueryToListVitalSignsResolver<TParent>;
  listMedicalConfigs?: QueryToListMedicalConfigsResolver<TParent>;
  listRegistSesions?: QueryToListRegistSesionsResolver<TParent>;
  listTherapy?: QueryToListTherapyResolver<TParent>;
  listRecipeConfig?: QueryToListRecipeConfigResolver<TParent>;
  listMedicRecipe?: QueryToListMedicRecipeResolver<TParent>;
  listConsultNotes?: QueryToListConsultNotesResolver<TParent>;
  listPacientNote?: QueryToListPacientNoteResolver<TParent>;
  listDiagnostic?: QueryToListDiagnosticResolver<TParent>;
  listPacientMedicalBackground?: QueryToListPacientMedicalBackgroundResolver<TParent>;
  listBillingRequests?: QueryToListBillingRequestsResolver<TParent>;
  listFormats?: QueryToListFormatsResolver<TParent>;
  listPatientResponses?: QueryToListPatientResponsesResolver<TParent>;
  listChagesForPacient?: QueryToListChagesForPacientResolver<TParent>;
  listPacientMedicalBackgroundById?: QueryToListPacientMedicalBackgroundByIdResolver<TParent>;
  listEventDetailsByMemberId?: QueryToListEventDetailsByMemberIdResolver<TParent>;
  listFisicExamsByMemberId?: QueryToListFisicExamsByMemberIdResolver<TParent>;
  listMedicalBackgroundByMemberId?: QueryToListMedicalBackgroundByMemberIdResolver<TParent>;
  listMedicRecipesByMemberId?: QueryToListMedicRecipesByMemberIdResolver<TParent>;
  listPatientNotesByMemberId?: QueryToListPatientNotesByMemberIdResolver<TParent>;
  listVitalSignsByMemberId?: QueryToListVitalSignsByMemberIdResolver<TParent>;
  listVaccinesByMemberId?: QueryToListVaccinesByMemberIdResolver<TParent>;
  listDiagnosticByEventId?: QueryToListDiagnosticByEventIdResolver<TParent>;
  apiServices?: QueryToApiServicesResolver<TParent>;
  apiServiceBySecretAndProjectId?: QueryToApiServiceBySecretAndProjectIdResolver<TParent>;
  downloadFile?: QueryToDownloadFileResolver<TParent>;
  listFolders?: QueryToListFoldersResolver<TParent>;
  foldersList?: QueryToFoldersListResolver<TParent>;
  listFiles?: QueryToListFilesResolver<TParent>;
  listFilesByMemberId?: QueryToListFilesByMemberIdResolver<TParent>;
  sharedFilesByMemberId?: QueryToSharedFilesByMemberIdResolver<TParent>;
  sharedFoldersByMemberId?: QueryToSharedFoldersByMemberIdResolver<TParent>;
  _service?: QueryTo_serviceResolver<TParent>;
  getRoomToken?: QueryToGetRoomTokenResolver<TParent>;
  getRoomById?: QueryToGetRoomByIdResolver<TParent>;
  getRoomTokenLiveKit?: QueryToGetRoomTokenLiveKitResolver<TParent>;
  listRoomRecordings?: QueryToListRoomRecordingsResolver<TParent>;
  getRoomRecording?: QueryToGetRoomRecordingResolver<TParent>;
  listHiring?: QueryToListHiringResolver<TParent>;
  listHiringType?: QueryToListHiringTypeResolver<TParent>;
  listShift?: QueryToListShiftResolver<TParent>;
  listDay?: QueryToListDayResolver<TParent>;
  listEnumHiringType?: QueryToListEnumHiringTypeResolver<TParent>;
  hiringByMemberId?: QueryToHiringByMemberIdResolver<TParent>;
  shiftByMemberId?: QueryToShiftByMemberIdResolver<TParent>;
  listDocumentCategory?: QueryToListDocumentCategoryResolver<TParent>;
  listDocumentCategoryDetail?: QueryToListDocumentCategoryDetailResolver<TParent>;
  listDocument?: QueryToListDocumentResolver<TParent>;
  listDocumentTemplate?: QueryToListDocumentTemplateResolver<TParent>;
  listTemplatePage?: QueryToListTemplatePageResolver<TParent>;
  listDocumentTag?: QueryToListDocumentTagResolver<TParent>;
  listDocumentScan?: QueryToListDocumentScanResolver<TParent>;
  listDocumentRead?: QueryToListDocumentReadResolver<TParent>;
}

export interface QueryToListGroupsArgs {
  skip?: number;
  take?: number;
  filter?: IGroupFilterInput;
  order?: Array<IGroupSortInput>;
}
export interface QueryToListGroupsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListGroupsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToGroupByIdArgs {
  id: IUUID;
}
export interface QueryToGroupByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGroupByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMeByIdArgs {
  id: IUUID;
}
export interface QueryToMeByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMeByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMeByIdPublicArgs {
  id: IUUID;
}
export interface QueryToMeByIdPublicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMeByIdPublicArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToRefererResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProjectByUrlArgs {
  url: string;
}
export interface QueryToProjectByUrlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToProjectByUrlArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCountriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCompaniesArgs {
  order?: Array<ICompanySortInput>;
}
export interface QueryToCompaniesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCompaniesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToIndustriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRolesByProjectArgs {
  id: IUUID;
}
export interface QueryToRolesByProjectResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToRolesByProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMembersArgs {
  filter?: IMemberFilterInput;
}
export interface QueryToMembersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMembersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMemberByIdArgs {
  id: IUUID;
}
export interface QueryToMemberByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMemberByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToDeleteMyMembersArgs {
  projectId: IUUID;
}
export interface QueryToDeleteMyMembersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToDeleteMyMembersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMembersByProjectArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IMemberProjectFilterInput;
  order?: Array<IMemberProjectSortInput>;
}
export interface QueryToMembersByProjectResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMembersByProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCountryByCodeArgs {
  code: string;
}
export interface QueryToCountryByCodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCountryByCodeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListUsersArgs {
  skip?: number;
  take?: number;
  filter?: IMemberFilterInput;
  order?: Array<IMemberSortInput>;
}
export interface QueryToListUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListUsersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListUsersPublicArgs {
  projectId: IUUID;
  isActive?: boolean;
  order?: Array<IMemberSortInput>;
}
export interface QueryToListUsersPublicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListUsersPublicArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToProjectsInfiniteArgs {
  first?: number;
  after?: string;
  last?: number;
  before?: string;
  filter?: IProjectFilterInput;
  order?: Array<IProjectSortInput>;
}
export interface QueryToProjectsInfiniteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToProjectsInfiniteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProjectByIdArgs {
  id: IUUID;
}
export interface QueryToProjectByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToProjectByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToConversationMemberByArgs {
  id: IUUID;
}
export interface QueryToConversationMemberByResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToConversationMemberByArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMemberNameByArgs {
  id: IUUID;
}
export interface QueryToMemberNameByResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMemberNameByArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToUserByIdArgs {
  url: string;
}
export interface QueryToUserByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToUserByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCustomMemberByIdArgs {
  id: IUUID;
}
export interface QueryToCustomMemberByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCustomMemberByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToServicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFixUpdateNameServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToServicesByProjectArgs {
  id: IUUID;
}
export interface QueryToServicesByProjectResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToServicesByProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToEndOfDayArgs {
  date: IDateTime;
}
export interface QueryToEndOfDayResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToEndOfDayArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToStartOfDayArgs {
  date: IDateTime;
}
export interface QueryToStartOfDayResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToStartOfDayArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListSchedulesArgs {
  projectId: IUUID;
  memberId: IUUID;
}
export interface QueryToListSchedulesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListSchedulesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToAvailableEventsArgs {
  projectId: IUUID;
  eventTypeId: IUUID;
  day: number;
  month: number;
  hour: number;
  year: number;
}
export interface QueryToAvailableEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToAvailableEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMyEventsArgs {
  projectId: IUUID;
  id: IUUID;
  month: number;
  eventTypeId?: IUUID;
  year: number;
}
export interface QueryToMyEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMyEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToEventsArgs {
  projectId: IUUID;
  month: number;
  year: number;
  visibility: IEventVisibility;
}
export interface QueryToEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToFilteredEventsArgs {
  skip?: number;
  take?: number;
  filter?: IEventFilterInput;
  order?: Array<IEventSortInput>;
}
export interface QueryToFilteredEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToFilteredEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCurrentDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEventTypesArgs {
  projectId: IUUID;
}
export interface QueryToEventTypesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToEventTypesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToSubEventTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEventByIdArgs {
  projectId: IUUID;
  id: IUUID;
}
export interface QueryToEventByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToEventByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToLocalTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNextEventArgs {
  projectId: IUUID;
  memberId: IUUID;
  quantity?: number;
  day?: number;
  month?: number;
  year?: number;
  eventVisibility?: IEventVisibility;
  filter?: IEventFilterInput;
}
export interface QueryToNextEventResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNextEventArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToNextEventMembersArgs {
  projectId: IUUID;
  memberId: IUUID;
  quantity?: number;
  eventVisibility?: IEventVisibility;
  filter?: IEventFilterInput;
}
export interface QueryToNextEventMembersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNextEventMembersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMembersEventsArgs {
  projectId: IUUID;
  membersId?: Array<string>;
  eventTypeId?: IUUID;
  eventMode?: IEventMode;
}
export interface QueryToMembersEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMembersEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToAssociatedEventsArgs {
  projectId: IUUID;
  memberId: IUUID;
  membersId: Array<string>;
}
export interface QueryToAssociatedEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToAssociatedEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToConversationsByToMemberIdArgs {
  conversationId: IUUID;
}
export interface QueryToConversationsByToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToConversationsByToMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToConversationsByMemberIdArgs {
  memberId: IUUID;
  projectId: IUUID;
}
export interface QueryToConversationsByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToConversationsByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToResultByMemberIdArgs {
  surveyId: IUUID;
  memberId: IUUID;
}
export interface QueryToResultByMemberIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToResultByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToResultsArgs {
  surveyId: IUUID;
}
export interface QueryToResultsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToResultsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToAnswersArgs {
  surveyId: IUUID;
}
export interface QueryToAnswersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToAnswersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToArticlesArgs {
  first?: number;
  after?: string;
  last?: number;
  before?: string;
  filter?: IArticleFilterInput;
  order?: Array<IArticleSortInput>;
}
export interface QueryToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListArticlesArgs {
  skip?: number;
  take?: number;
  filter?: IArticleFilterInput;
  order?: Array<IArticleSortInput>;
}
export interface QueryToListArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListArticlesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListAddressesArgs {
  id: IUUID;
}
export interface QueryToListAddressesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListAddressesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToTaxonomyByIdArgs {
  id: IUUID;
}
export interface QueryToTaxonomyByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToTaxonomyByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToTaxonomyBySlugArgs {
  slug: string;
}
export interface QueryToTaxonomyBySlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToTaxonomyBySlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListProductsArgs {
  skip?: number;
  take?: number;
  filter?: IProductFilterInput;
  order?: Array<IProductSortInput>;
}
export interface QueryToListProductsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListProductsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToTaxonomiesByProjectArgs {
  skip?: number;
  take?: number;
  filter?: ITaxonomyFilterInput;
  order?: Array<ITaxonomySortInput>;
}
export interface QueryToTaxonomiesByProjectResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToTaxonomiesByProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToSurveysByArticleIdArgs {
  articleId: IUUID;
}
export interface QueryToSurveysByArticleIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSurveysByArticleIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToShopByIdArgs {
  projectId: IUUID;
}
export interface QueryToShopByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToShopByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToArticleByIdArgs {
  id: IUUID;
  viewed: boolean;
}
export interface QueryToArticleByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticleByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToSeoBySlugArgs {
  slug: string;
}
export interface QueryToSeoBySlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSeoBySlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToArticleBySlugArgs {
  slug: string;
  viewed: boolean;
}
export interface QueryToArticleBySlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticleBySlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToProductByIdArgs {
  id: IUUID;
}
export interface QueryToProductByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToProductByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToProductBySlugArgs {
  slug: string;
}
export interface QueryToProductBySlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToProductBySlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToProductByIdResolverArgs {
  id: IUUID;
}
export interface QueryToProductByIdResolverResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToProductByIdResolverArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToAddressByIdArgs {
  id: IUUID;
}
export interface QueryToAddressByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToAddressByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListServiceArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IServiceFilterInput;
  order?: Array<IServiceSortInput>;
}
export interface QueryToListServiceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListServiceQuizArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IServiceQuizFilterInput;
  order?: Array<IServiceQuizSortInput>;
}
export interface QueryToListServiceQuizResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListServiceQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizFilterInput;
  order?: Array<IQuizSortInput>;
}
export interface QueryToListQuizResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizSectionArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizSectionFilterInput;
  order?: Array<IQuizSectionSortInput>;
}
export interface QueryToListQuizSectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListQuizSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizQuestionArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizQuestionFilterInput;
  order?: Array<IQuizQuestionSortInput>;
}
export interface QueryToListQuizQuestionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListQuizQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizQuestionAnswerArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizQuestionAnswerFilterInput;
  order?: Array<IQuizQuestionAnswerSortInput>;
}
export interface QueryToListQuizQuestionAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListQuizQuestionAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizAnswerArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizAnswerFilterInput;
  order?: Array<IQuizAnswerSortInput>;
}
export interface QueryToListQuizAnswerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListQuizAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizMemberArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizMemberFilterInput;
  order?: Array<IQuizMemberSortInput>;
}
export interface QueryToListQuizMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListQuizMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizMemberAnswerArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizMemberAnswerFilterInput;
  order?: Array<IQuizMemberAnswerSortInput>;
}
export interface QueryToListQuizMemberAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListQuizMemberAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuizMemberDescriptionArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuizMemberDescriptionFilterInput;
  order?: Array<IQuizMemberDescriptionSortInput>;
}
export interface QueryToListQuizMemberDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListQuizMemberDescriptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToContactEmailsArgs {
  projectId: IUUID;
}
export interface QueryToContactEmailsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToContactEmailsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToTransactionsArgs {
  skip?: number;
  take?: number;
  filter?: ITransactionFilterInput;
  order?: Array<ITransactionSortInput>;
}
export interface QueryToTransactionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToTransactionsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMethodPaymentsArgs {
  skip?: number;
  take?: number;
  filter?: IMethodPaymentFilterInput;
  order?: Array<IMethodPaymentSortInput>;
}
export interface QueryToMethodPaymentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToMethodPaymentsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToPlanArgs {
  skip?: number;
  take?: number;
  filter?: IPlanFilterInput;
  order?: Array<IPlanSortInput>;
}
export interface QueryToPlanResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToPlanArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListInvoicesArgs {
  skip?: number;
  take?: number;
  filter?: IInvoiceFilterInput;
  order?: Array<IInvoiceSortInput>;
}
export interface QueryToListInvoicesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListInvoicesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToInvoiceByIdArgs {
  id: IUUID;
}
export interface QueryToInvoiceByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToInvoiceByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListInvoiceAddressArgs {
  addressId: IUUID;
}
export interface QueryToListInvoiceAddressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListInvoiceAddressArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListInvoiceDetailProductArgs {
  productId: IUUID;
}
export interface QueryToListInvoiceDetailProductResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListInvoiceDetailProductArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToConfigsArgs {
  id: IUUID;
}
export interface QueryToConfigsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToConfigsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListComponentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListWebsitePagesArgs {
  projectId?: IUUID;
  order?: Array<IWebsitePageSortInput>;
}
export interface QueryToListWebsitePagesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListWebsitePagesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToWebSitePageByIdArgs {
  id: IUUID;
}
export interface QueryToWebSitePageByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToWebSitePageByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToWebsitePageComponentByIdArgs {
  id: IUUID;
}
export interface QueryToWebsitePageComponentByIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToWebsitePageComponentByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToWebsitePageBySlugArgs {
  slug: string;
}
export interface QueryToWebsitePageBySlugResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToWebsitePageBySlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVerifyVideoRoomArgs {
  projectId: IUUID;
  sessionName: string;
}
export interface QueryToVerifyVideoRoomResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVerifyVideoRoomArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVideoCallsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToVideoCallsByMemberArgs {
  memberId: IUUID;
  projectId: IUUID;
}
export interface QueryToVideoCallsByMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVideoCallsByMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVideoCallByIdArgs {
  id: IUUID;
}
export interface QueryToVideoCallByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVideoCallByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVideoCallBySessionIdArgs {
  sessionId: string;
}
export interface QueryToVideoCallBySessionIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVideoCallBySessionIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToStadisticsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToStadisticsQualitasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListRQuoterProfilesByProjectIdArgs {
  projectId: IUUID;
  first?: number;
  after?: string;
  last?: number;
  before?: string;
  filter?: IQuoterProfileFilterInput;
  order?: Array<IQuoterProfileSortInput>;
}
export interface QueryToListRQuoterProfilesByProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListRQuoterProfilesByProjectIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListRQuoterProfilesInsurerByProjectIdArgs {
  projectId: IUUID;
  first?: number;
  after?: string;
  last?: number;
  before?: string;
  filter?: IQuoterProfileInsurerFilterInput;
  order?: Array<IQuoterProfileInsurerSortInput>;
}
export interface QueryToListRQuoterProfilesInsurerByProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListRQuoterProfilesInsurerByProjectIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToHomologatedArgs {
  code: string;
}
export interface QueryToHomologatedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToHomologatedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListInsurerServiceCredentialsArgs {
  projectId: IUUID;
}
export interface QueryToListInsurerServiceCredentialsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListInsurerServiceCredentialsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListInsurerServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListInsurerService2Args {
  name: string;
}
export interface QueryToListInsurerService2Resolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListInsurerService2Args,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListRelationsArgs {
  carId: number;
}
export interface QueryToListRelationsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListRelationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToQuotesArgs {
  skip?: number;
  take?: number;
  filter?: IQuoteFilterInput;
  order?: Array<IQuoteSortInput>;
}
export interface QueryToQuotesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToQuotesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListRegistrationsArgs {
  projectId: IUUID;
  filter?: IRegistrationFilterInput;
  order?: Array<IRegistrationSortInput>;
}
export interface QueryToListRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToQuoteByIdArgs {
  id: IUUID;
}
export interface QueryToQuoteByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToQuoteByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListQuoteServicesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListGendersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListCarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListCarTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListCarBrandArgs {
  type: string;
  insurer?: string;
}
export interface QueryToListCarBrandResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListCarBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListCarSuBbrandArgs {
  type: string;
  insurer?: string;
  brand: string;
}
export interface QueryToListCarSuBbrandResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListCarSuBbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListModelArgs {
  type: string;
  insurer?: string;
  brand: string;
  subbrand: string;
}
export interface QueryToListModelResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListModelArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCarArgs {
  type: string;
  insurer?: string;
  brand: string;
  subbrand: string;
  year: ILong;
}
export interface QueryToCarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCarArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToRelationCarsArgs {
  qualitasCode: string;
}
export interface QueryToRelationCarsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToRelationCarsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToColonyArgs {
  zipcode: string;
}
export interface QueryToColonyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToColonyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListCoveragesArgs {
  coverage: string;
  owner?: string;
  type?: string;
  insurance?: string;
}
export interface QueryToListCoveragesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListCoveragesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCatalogByIdArgs {
  catalogId: IUUID;
}
export interface QueryToCatalogByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCatalogByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCatalogsArgs {
  skip?: number;
  take?: number;
  filter?: ICatalogFilterInput;
  order?: Array<ICatalogSortInput>;
}
export interface QueryToCatalogsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToCatalogsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToCatalogByYearsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToInsurersArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IInsurerFilterInput;
  order?: Array<IInsurerSortInput>;
}
export interface QueryToInsurersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToInsurersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToOfficesArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IOfficeFilterInput;
  order?: Array<IOfficeSortInput>;
}
export interface QueryToOfficesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToOfficesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToQuatorProfilesArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IQuoterProfileFilterInput;
  order?: Array<IQuoterProfileSortInput>;
}
export interface QueryToQuatorProfilesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToQuatorProfilesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToQuoterProfileByIdArgs {
  quoterProfileId: IUUID;
}
export interface QueryToQuoterProfileByIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQuoterProfileByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAbasArgs {
  brand: string;
  subbrand: string;
  filter?: IVehiclesCarCatalogAbaFilterInput;
  order?: Array<IVehiclesCarCatalogAbaSortInput>;
}
export interface QueryToVehiclesCarCatalogAbasResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAbasArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAbasByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogAbaFilterInput;
  order?: Array<IVehiclesCarCatalogAbaSortInput>;
}
export interface QueryToVehiclesCarCatalogAbasByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAbasByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAbasBySubBrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogAbaFilterInput;
  order?: Array<IVehiclesCarCatalogAbaSortInput>;
}
export interface QueryToVehiclesCarCatalogAbasBySubBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAbasBySubBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAfirmeArgs {
  filter?: IVehiclesCarCatalogAfirmeFilterInput;
  order?: Array<IVehiclesCarCatalogAfirmeSortInput>;
}
export interface QueryToVehiclesCarCatalogAfirmeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAfirmeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAfirmebyBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogAfirmeFilterInput;
  order?: Array<IVehiclesCarCatalogAfirmeSortInput>;
}
export interface QueryToVehiclesCarCatalogAfirmebyBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAfirmebyBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAfirmebySubrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogAfirmeFilterInput;
  order?: Array<IVehiclesCarCatalogAfirmeSortInput>;
}
export interface QueryToVehiclesCarCatalogAfirmebySubrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAfirmebySubrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAigArgs {
  filter?: IVehiclesCarCatalogAigFilterInput;
  order?: Array<IVehiclesCarCatalogAigSortInput>;
}
export interface QueryToVehiclesCarCatalogAigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAigByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogAigFilterInput;
  order?: Array<IVehiclesCarCatalogAigSortInput>;
}
export interface QueryToVehiclesCarCatalogAigByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAigByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAigBySubBrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogAigFilterInput;
  order?: Array<IVehiclesCarCatalogAigSortInput>;
}
export interface QueryToVehiclesCarCatalogAigBySubBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAigBySubBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAnasArgs {
  filter?: IVehiclesCarCatalogAnaFilterInput;
  order?: Array<IVehiclesCarCatalogAnaSortInput>;
}
export interface QueryToVehiclesCarCatalogAnasResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAnasArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAnasByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogAnaFilterInput;
  order?: Array<IVehiclesCarCatalogAnaSortInput>;
}
export interface QueryToVehiclesCarCatalogAnasByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAnasByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarCatalogAnasbySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogAnaFilterInput;
  order?: Array<IVehiclesCarCatalogAnaSortInput>;
}
export interface QueryToVehiclesCarCatalogAnasbySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarCatalogAnasbySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesAtlasArgs {
  filter?: IVehiclesCarCatalogAtlaFilterInput;
  order?: Array<IVehiclesCarCatalogAtlaSortInput>;
}
export interface QueryToVehiclesAtlasResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesAtlasArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesAtlasByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogAtlaFilterInput;
  order?: Array<IVehiclesCarCatalogAtlaSortInput>;
}
export interface QueryToVehiclesAtlasByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesAtlasByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesAtlasBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogAtlaFilterInput;
  order?: Array<IVehiclesCarCatalogAtlaSortInput>;
}
export interface QueryToVehiclesAtlasBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesAtlasBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesAxaArgs {
  filter?: IVehiclesCarCatalogAxaFilterInput;
  order?: Array<IVehiclesCarCatalogAxaSortInput>;
}
export interface QueryToVehiclesAxaResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesAxaArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesAxaByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogAxaFilterInput;
  order?: Array<IVehiclesCarCatalogAxaSortInput>;
}
export interface QueryToVehiclesAxaByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesAxaByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesAxaBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogAxaFilterInput;
  order?: Array<IVehiclesCarCatalogAxaSortInput>;
}
export interface QueryToVehiclesAxaBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesAxaBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesBanorteArgs {
  filter?: IVehiclesCarCatalogBanorteFilterInput;
  order?: Array<IVehiclesCarCatalogBanorteSortInput>;
}
export interface QueryToVehiclesBanorteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesBanorteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesBanorteByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogBanorteFilterInput;
  order?: Array<IVehiclesCarCatalogBanorteSortInput>;
}
export interface QueryToVehiclesBanorteByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesBanorteByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesBanorteBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogBanorteFilterInput;
  order?: Array<IVehiclesCarCatalogBanorteSortInput>;
}
export interface QueryToVehiclesBanorteBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesBanorteBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesGripArgs {
  filter?: IVehiclesCarCatalogGnpFilterInput;
  order?: Array<IVehiclesCarCatalogGnpSortInput>;
}
export interface QueryToVehiclesGripResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesGripArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesGripByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogGnpFilterInput;
  order?: Array<IVehiclesCarCatalogGnpSortInput>;
}
export interface QueryToVehiclesGripByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesGripByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesGripBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogGnpFilterInput;
  order?: Array<IVehiclesCarCatalogGnpSortInput>;
}
export interface QueryToVehiclesGripBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesGripBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesHdiArgs {
  filter?: IVehiclesCarCatalogHdiFilterInput;
  order?: Array<IVehiclesCarCatalogHdiSortInput>;
}
export interface QueryToVehiclesHdiResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesHdiArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesHdiByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogHdiFilterInput;
  order?: Array<IVehiclesCarCatalogHdiSortInput>;
}
export interface QueryToVehiclesHdiByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesHdiByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesHdiBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogHdiFilterInput;
  order?: Array<IVehiclesCarCatalogHdiSortInput>;
}
export interface QueryToVehiclesHdiBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesHdiBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesMapfreeArgs {
  filter?: IVehiclesCarCatalogMapfreFilterInput;
  order?: Array<IVehiclesCarCatalogMapfreSortInput>;
}
export interface QueryToVehiclesMapfreeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesMapfreeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesMapfreeByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogMapfreFilterInput;
  order?: Array<IVehiclesCarCatalogMapfreSortInput>;
}
export interface QueryToVehiclesMapfreeByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesMapfreeByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesMapfreeBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogMapfreFilterInput;
  order?: Array<IVehiclesCarCatalogMapfreSortInput>;
}
export interface QueryToVehiclesMapfreeBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesMapfreeBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesPArgs {
  filter?: IVehiclesCarCatalogPFilterInput;
  order?: Array<IVehiclesCarCatalogPSortInput>;
}
export interface QueryToVehiclesPResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesPArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesPByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogPFilterInput;
  order?: Array<IVehiclesCarCatalogPSortInput>;
}
export interface QueryToVehiclesPByBrandResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesPByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesPBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogPFilterInput;
  order?: Array<IVehiclesCarCatalogPSortInput>;
}
export interface QueryToVehiclesPBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesPBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesPotosiArgs {
  filter?: IVehiclesCarCatalogPotosiFilterInput;
  order?: Array<IVehiclesCarCatalogPotosiSortInput>;
}
export interface QueryToVehiclesPotosiResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesPotosiArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesPotosiByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogPotosiFilterInput;
  order?: Array<IVehiclesCarCatalogPotosiSortInput>;
}
export interface QueryToVehiclesPotosiByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesPotosiByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesPotosiBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogPotosiFilterInput;
  order?: Array<IVehiclesCarCatalogPotosiSortInput>;
}
export interface QueryToVehiclesPotosiBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesPotosiBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesQualitasArgs {
  filter?: IVehiclesCarCatalogQualitaFilterInput;
  order?: Array<IVehiclesCarCatalogQualitaSortInput>;
}
export interface QueryToVehiclesQualitasResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesQualitasArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesQualitasByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogQualitaFilterInput;
  order?: Array<IVehiclesCarCatalogQualitaSortInput>;
}
export interface QueryToVehiclesQualitasByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesQualitasByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesQualitasBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogQualitaFilterInput;
  order?: Array<IVehiclesCarCatalogQualitaSortInput>;
}
export interface QueryToVehiclesQualitasBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesQualitasBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesZurichArgs {
  filter?: IVehiclesCarCatalogZurichFilterInput;
  order?: Array<IVehiclesCarCatalogZurichSortInput>;
}
export interface QueryToVehiclesZurichResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToVehiclesZurichArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesZurichByBrandArgs {
  brand: string;
  filter?: IVehiclesCarCatalogZurichFilterInput;
  order?: Array<IVehiclesCarCatalogZurichSortInput>;
}
export interface QueryToVehiclesZurichByBrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesZurichByBrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesZurichBySubbrandArgs {
  subbrand: string;
  filter?: IVehiclesCarCatalogZurichFilterInput;
  order?: Array<IVehiclesCarCatalogZurichSortInput>;
}
export interface QueryToVehiclesZurichBySubbrandResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesZurichBySubbrandArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogAbaCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogAbaCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogAbaCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAbaCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogAbaCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogAfirmeCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogAxaCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogAxaCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogAxaCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAxaCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogAxaCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogAtlasCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogAtlasCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAtlasCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogAtlasCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogBanorteCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogBanorteCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogBanorteCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogBanorteCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogGnpCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogGnpCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogGnpCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogGnpCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogGnpCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogHdiCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogHdiCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogHdiCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogHdiCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogHdiCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogMapfreCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogQualitasCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogQualitasCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogQualitasCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogQualitasCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToVehiclesCarcatalogZurichCodeYearsCarIdArgs {
  carId: number;
  filter?: IVehiclesCarCatalogZurichCodeYearFilterInput;
  order?: Array<IVehiclesCarCatalogZurichCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogZurichCodeYearsCarIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVehiclesCarcatalogZurichCodeYearsCarIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListStaffQuoteArgs {
  projectId: IUUID;
  filter?: IStaffQuoteFilterInput;
  order?: Array<IStaffQuoteSortInput>;
}
export interface QueryToListStaffQuoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListStaffQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListProposalArgs {
  projectId: IUUID;
  filter?: IProposalFilterInput;
  order?: Array<IProposalSortInput>;
}
export interface QueryToListProposalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListProposalArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListCollaboratorArgs {
  projectId: IUUID;
  filter?: ICollaboratorFilterInput;
  order?: Array<ICollaboratorSortInput>;
}
export interface QueryToListCollaboratorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListCollaboratorArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicPageArgs {
  projectId: IUUID;
  filter?: IDynamicPageFilterInput;
  order?: Array<IDynamicPageSortInput>;
}
export interface QueryToListDynamicPageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDynamicPageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicBlockArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDynamicBlockFilterInput;
  order?: Array<IDynamicBlockSortInput>;
}
export interface QueryToListDynamicBlockResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDynamicBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicSectionArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDynamicSectionFilterInput;
  order?: Array<IDynamicSectionSortInput>;
}
export interface QueryToListDynamicSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDynamicSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicTabArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDynamicTabFilterInput;
  order?: Array<IDynamicTabSortInput>;
}
export interface QueryToListDynamicTabResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDynamicTabArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicSectionBlockArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDynamicSectionBlockFilterInput;
  order?: Array<IDynamicSectionBlockSortInput>;
}
export interface QueryToListDynamicSectionBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDynamicSectionBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicCustomMetaArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDynamicCustomMetaFilterInput;
  order?: Array<IDynamicCustomMetaSortInput>;
}
export interface QueryToListDynamicCustomMetaResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDynamicCustomMetaArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDynamicCustomValueArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDynamicCustomValueFilterInput;
  order?: Array<IDynamicCustomValueSortInput>;
}
export interface QueryToListDynamicCustomValueResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDynamicCustomValueArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListChargesArgs {
  skip?: number;
  take?: number;
  filter?: IChargeFilterInput;
  order?: Array<IChargeSortInput>;
}
export interface QueryToListChargesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListChargesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListClinicHistoryArgs {
  filter?: IClinicHistoryFilterInput;
  order?: Array<IClinicHistorySortInput>;
}
export interface QueryToListClinicHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListClinicHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListConsultArgs {
  skip?: number;
  take?: number;
  filter?: IEventDetailFilterInput;
  order?: Array<IEventDetailSortInput>;
}
export interface QueryToListConsultResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListConsultArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListFisicExamArgs {
  filter?: IFisicExamFilterInput;
  order?: Array<IFisicExamSortInput>;
}
export interface QueryToListFisicExamResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListFisicExamArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicalBackgroundsArgs {
  projectId: IUUID;
  memberId: IUUID;
  eventTypeId: IUUID;
  filter?: IMedicalBackgroundFilterInput;
  order?: Array<IMedicalBackgroundSortInput>;
}
export interface QueryToListMedicalBackgroundsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListMedicalBackgroundsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicBackgroundDetailsArgs {
  filter?: IMedicalBackgroundDetailFilterInput;
  order?: Array<IMedicalBackgroundDetailSortInput>;
}
export interface QueryToListMedicBackgroundDetailsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListMedicBackgroundDetailsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListClinicHistory_MedicalBackgroundDetailsArgs {
  filter?: IClinicHistoryMedicalBackgroundDetailFilterInput;
  order?: Array<IClinicHistoryMedicalBackgroundDetailSortInput>;
}
export interface QueryToListClinicHistory_MedicalBackgroundDetailsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListClinicHistory_MedicalBackgroundDetailsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicinesArgs {
  filter?: IMedicineFilterInput;
  order?: Array<IMedicineSortInput>;
}
export interface QueryToListMedicinesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListMedicinesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicalServicesArgs {
  filter?: IMedicalServiceFilterInput;
  order?: Array<IMedicalServiceSortInput>;
}
export interface QueryToListMedicalServicesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListMedicalServicesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListVaccinesArgs {
  filter?: IVaccineFilterInput;
  order?: Array<IVaccineSortInput>;
}
export interface QueryToListVaccinesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListVaccinesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListVitalSignsArgs {
  filter?: IVitalSignFilterInput;
  order?: Array<IVitalSignSortInput>;
}
export interface QueryToListVitalSignsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListVitalSignsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicalConfigsArgs {
  filter?: IMedicalConfigFilterInput;
  order?: Array<IMedicalConfigSortInput>;
}
export interface QueryToListMedicalConfigsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListMedicalConfigsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListRegistSesionsArgs {
  filter?: IRegistSesionFilterInput;
  order?: Array<IRegistSesionSortInput>;
}
export interface QueryToListRegistSesionsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListRegistSesionsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListTherapyArgs {
  skip?: number;
  take?: number;
  filter?: ITherapyFilterInput;
  order?: Array<ITherapySortInput>;
}
export interface QueryToListTherapyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListTherapyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListRecipeConfigArgs {
  filter?: IRecipeConfigFilterInput;
  order?: Array<IRecipeConfigSortInput>;
}
export interface QueryToListRecipeConfigResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListRecipeConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicRecipeArgs {
  filter?: IMedicRecipeFilterInput;
  order?: Array<IMedicRecipeSortInput>;
}
export interface QueryToListMedicRecipeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListMedicRecipeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListConsultNotesArgs {
  filter?: IConsultNoteFilterInput;
  order?: Array<IConsultNoteSortInput>;
}
export interface QueryToListConsultNotesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListConsultNotesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListPacientNoteArgs {
  filter?: IPacientNoteFilterInput;
  order?: Array<IPacientNoteSortInput>;
}
export interface QueryToListPacientNoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListPacientNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDiagnosticArgs {
  filter?: IDiagnosticFilterInput;
  order?: Array<IDiagnosticSortInput>;
}
export interface QueryToListDiagnosticResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDiagnosticArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListPacientMedicalBackgroundArgs {
  filter?: IPacientMedicalBackgroundFilterInput;
  order?: Array<IPacientMedicalBackgroundSortInput>;
}
export interface QueryToListPacientMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListPacientMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListBillingRequestsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListFormatsArgs {
  filter?: IFormatFilterInput;
  order?: Array<IFormatSortInput>;
}
export interface QueryToListFormatsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListFormatsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListPatientResponsesArgs {
  filter?: IPatientVitalSignsResponseFilterInput;
  order?: Array<IPatientVitalSignsResponseSortInput>;
}
export interface QueryToListPatientResponsesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListPatientResponsesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListChagesForPacientArgs {
  skip?: number;
  take?: number;
  memberId: IUUID;
  filter?: IEventDetailFilterInput;
  order?: Array<IEventDetailSortInput>;
}
export interface QueryToListChagesForPacientResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListChagesForPacientArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListPacientMedicalBackgroundByIdArgs {
  memberId: IUUID;
}
export interface QueryToListPacientMedicalBackgroundByIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListPacientMedicalBackgroundByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListEventDetailsByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListEventDetailsByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListEventDetailsByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListFisicExamsByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListFisicExamsByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListFisicExamsByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicalBackgroundByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListMedicalBackgroundByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListMedicalBackgroundByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListMedicRecipesByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListMedicRecipesByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListMedicRecipesByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListPatientNotesByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListPatientNotesByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListPatientNotesByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListVitalSignsByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListVitalSignsByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListVitalSignsByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListVaccinesByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToListVaccinesByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListVaccinesByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDiagnosticByEventIdArgs {
  eventId: IUUID;
}
export interface QueryToListDiagnosticByEventIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDiagnosticByEventIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToApiServicesArgs {
  projectId: IUUID;
}
export interface QueryToApiServicesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToApiServicesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToApiServiceBySecretAndProjectIdArgs {
  projectId: IUUID;
  secretkey: string;
}
export interface QueryToApiServiceBySecretAndProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToApiServiceBySecretAndProjectIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToDownloadFileArgs {
  token: string;
}
export interface QueryToDownloadFileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToDownloadFileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListFoldersArgs {
  first?: number;
  after?: string;
  last?: number;
  before?: string;
  filter?: IFolderFilterInput;
  order?: Array<IFolderSortInput>;
}
export interface QueryToListFoldersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListFoldersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToFoldersListArgs {
  first?: number;
  after?: string;
  last?: number;
  before?: string;
  filter?: IFolderFilterInput;
  order?: Array<IFolderSortInput>;
}
export interface QueryToFoldersListResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToFoldersListArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListFilesArgs {
  skip?: number;
  take?: number;
  filter?: IFileFilterInput;
  order?: Array<IFileSortInput>;
}
export interface QueryToListFilesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListFilesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListFilesByMemberIdArgs {
  memberId: IUUID;
  order?: Array<IFileSortInput>;
}
export interface QueryToListFilesByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListFilesByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToSharedFilesByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToSharedFilesByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSharedFilesByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToSharedFoldersByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToSharedFoldersByMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSharedFoldersByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryTo_serviceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetRoomTokenArgs {
  input: IRoomTokenInput;
}
export interface QueryToGetRoomTokenResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetRoomTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToGetRoomByIdArgs {
  roomId: string;
}
export interface QueryToGetRoomByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetRoomByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToGetRoomTokenLiveKitArgs {
  input: IRoomTokenLiveKitInput;
}
export interface QueryToGetRoomTokenLiveKitResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetRoomTokenLiveKitArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListRoomRecordingsArgs {
  userId?: string;
}
export interface QueryToListRoomRecordingsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListRoomRecordingsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToGetRoomRecordingArgs {
  path: string;
}
export interface QueryToGetRoomRecordingResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetRoomRecordingArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListHiringArgs {
  projectId: IUUID;
  filter?: IHiringFilterInput;
  order?: Array<IHiringSortInput>;
}
export interface QueryToListHiringResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListHiringArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListHiringTypeArgs {
  projectId: IUUID;
  filter?: IHiringTypeFilterInput;
  order?: Array<IHiringTypeSortInput>;
}
export interface QueryToListHiringTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListHiringTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListShiftArgs {
  projectId: IUUID;
  filter?: IShiftFilterInput;
  order?: Array<IShiftSortInput>;
}
export interface QueryToListShiftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListShiftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDayArgs {
  filter?: IDayFilterInput;
  order?: Array<IDaySortInput>;
}
export interface QueryToListDayResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDayArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListEnumHiringTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToHiringByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToHiringByMemberIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToHiringByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToShiftByMemberIdArgs {
  memberId: IUUID;
}
export interface QueryToShiftByMemberIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToShiftByMemberIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentCategoryArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDocumentCategoryFilterInput;
  order?: Array<IDocumentCategorySortInput>;
}
export interface QueryToListDocumentCategoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDocumentCategoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentCategoryDetailArgs {
  projectId: IUUID;
  filter?: IDocumentCategoryDetailFilterInput;
  order?: Array<IDocumentCategoryDetailSortInput>;
}
export interface QueryToListDocumentCategoryDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDocumentCategoryDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDocumentFilterInput;
  order?: Array<IDocumentSortInput>;
}
export interface QueryToListDocumentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDocumentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentTemplateArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDocumentTemplateFilterInput;
  order?: Array<IDocumentTemplateSortInput>;
}
export interface QueryToListDocumentTemplateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDocumentTemplateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListTemplatePageArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: ITemplatePageFilterInput;
  order?: Array<ITemplatePageSortInput>;
}
export interface QueryToListTemplatePageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListTemplatePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentTagArgs {
  projectId: IUUID;
  filter?: IDocumentTagFilterInput;
  order?: Array<IDocumentTagSortInput>;
}
export interface QueryToListDocumentTagResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDocumentTagArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentScanArgs {
  projectId: IUUID;
  filter?: IDocumentScanFilterInput;
  order?: Array<IDocumentScanSortInput>;
}
export interface QueryToListDocumentScanResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDocumentScanArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListDocumentReadArgs {
  skip?: number;
  take?: number;
  projectId: IUUID;
  filter?: IDocumentReadFilterInput;
  order?: Array<IDocumentReadSortInput>;
}
export interface QueryToListDocumentReadResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListDocumentReadArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface IGroupCollectionSegmentTypeResolver<TParent = any> {
  items?: GroupCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: GroupCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: GroupCollectionSegmentToTotalCountResolver<TParent>;
}

export interface GroupCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IGroupTypeResolver<TParent = any> {
  projectId?: GroupToProjectIdResolver<TParent>;
  project?: GroupToProjectResolver<TParent>;
  name?: GroupToNameResolver<TParent>;
  description?: GroupToDescriptionResolver<TParent>;
  members?: GroupToMembersResolver<TParent>;
  groupTaxonomies?: GroupToGroupTaxonomiesResolver<TParent>;
  id?: GroupToIdResolver<TParent>;
  createdAt?: GroupToCreatedAtResolver<TParent>;
  updatedAt?: GroupToUpdatedAtResolver<TParent>;
}

export interface GroupToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToGroupTaxonomiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProjectTypeResolver<TParent = any> {
  name?: ProjectToNameResolver<TParent>;
  description?: ProjectToDescriptionResolver<TParent>;
  logo?: ProjectToLogoResolver<TParent>;
  tagLine?: ProjectToTagLineResolver<TParent>;
  isReady?: ProjectToIsReadyResolver<TParent>;
  url?: ProjectToUrlResolver<TParent>;
  industryId?: ProjectToIndustryIdResolver<TParent>;
  industry?: ProjectToIndustryResolver<TParent>;
  companyId?: ProjectToCompanyIdResolver<TParent>;
  company?: ProjectToCompanyResolver<TParent>;
  projectRoles?: ProjectToProjectRolesResolver<TParent>;
  memberProjects?: ProjectToMemberProjectsResolver<TParent>;
  groups?: ProjectToGroupsResolver<TParent>;
  id?: ProjectToIdResolver<TParent>;
  createdAt?: ProjectToCreatedAtResolver<TParent>;
  updatedAt?: ProjectToUpdatedAtResolver<TParent>;
  services?: ProjectToServicesResolver<TParent>;
  shop?: ProjectToShopResolver<TParent>;
  site?: ProjectToSiteResolver<TParent>;
}

export interface ProjectToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToTagLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIsReadyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIndustryIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIndustryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCompanyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToProjectRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToMemberProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToServicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToShopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToSiteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IIndustryTypeResolver<TParent = any> {
  name?: IndustryToNameResolver<TParent>;
  slug?: IndustryToSlugResolver<TParent>;
  projects?: IndustryToProjectsResolver<TParent>;
  companies?: IndustryToCompaniesResolver<TParent>;
  id?: IndustryToIdResolver<TParent>;
  createdAt?: IndustryToCreatedAtResolver<TParent>;
  updatedAt?: IndustryToUpdatedAtResolver<TParent>;
}

export interface IndustryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IndustryToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IndustryToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IndustryToCompaniesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IndustryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IndustryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IndustryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICompanyTypeResolver<TParent = any> {
  name?: CompanyToNameResolver<TParent>;
  numberEmployees?: CompanyToNumberEmployeesResolver<TParent>;
  countryId?: CompanyToCountryIdResolver<TParent>;
  country?: CompanyToCountryResolver<TParent>;
  photo?: CompanyToPhotoResolver<TParent>;
  tagLine?: CompanyToTagLineResolver<TParent>;
  industryId?: CompanyToIndustryIdResolver<TParent>;
  industry?: CompanyToIndustryResolver<TParent>;
  memberCompanies?: CompanyToMemberCompaniesResolver<TParent>;
  projects?: CompanyToProjectsResolver<TParent>;
  id?: CompanyToIdResolver<TParent>;
  createdAt?: CompanyToCreatedAtResolver<TParent>;
  updatedAt?: CompanyToUpdatedAtResolver<TParent>;
}

export interface CompanyToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToNumberEmployeesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToCountryIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToTagLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToIndustryIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToIndustryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToMemberCompaniesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompanyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICountryTypeResolver<TParent = any> {
  name?: CountryToNameResolver<TParent>;
  code?: CountryToCodeResolver<TParent>;
  currencyId?: CountryToCurrencyIdResolver<TParent>;
  currency?: CountryToCurrencyResolver<TParent>;
  profile?: CountryToProfileResolver<TParent>;
  id?: CountryToIdResolver<TParent>;
  createdAt?: CountryToCreatedAtResolver<TParent>;
  updatedAt?: CountryToUpdatedAtResolver<TParent>;
}

export interface CountryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToCurrencyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICurrencyTypeResolver<TParent = any> {
  name?: CurrencyToNameResolver<TParent>;
  symbol?: CurrencyToSymbolResolver<TParent>;
  code?: CurrencyToCodeResolver<TParent>;
  exchangeRate?: CurrencyToExchangeRateResolver<TParent>;
  id?: CurrencyToIdResolver<TParent>;
  createdAt?: CurrencyToCreatedAtResolver<TParent>;
  updatedAt?: CurrencyToUpdatedAtResolver<TParent>;
}

export interface CurrencyToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToSymbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToExchangeRateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProfileTypeResolver<TParent = any> {
  firstName?: ProfileToFirstNameResolver<TParent>;
  lastName?: ProfileToLastNameResolver<TParent>;
  photo?: ProfileToPhotoResolver<TParent>;
  memberId?: ProfileToMemberIdResolver<TParent>;
  member?: ProfileToMemberResolver<TParent>;
  countryId?: ProfileToCountryIdResolver<TParent>;
  country?: ProfileToCountryResolver<TParent>;
  phone?: ProfileToPhoneResolver<TParent>;
  cURP?: ProfileToCURPResolver<TParent>;
  rFC?: ProfileToRFCResolver<TParent>;
  nSS?: ProfileToNSSResolver<TParent>;
  infonavitCredit?: ProfileToInfonavitCreditResolver<TParent>;
  nationality?: ProfileToNationalityResolver<TParent>;
  age?: ProfileToAgeResolver<TParent>;
  gender?: ProfileToGenderResolver<TParent>;
  dateOfBirth?: ProfileToDateOfBirthResolver<TParent>;
  maritalStatus?: ProfileToMaritalStatusResolver<TParent>;
  biography?: ProfileToBiographyResolver<TParent>;
  siteLogo?: ProfileToSiteLogoResolver<TParent>;
  siteUrl?: ProfileToSiteUrlResolver<TParent>;
  quatorProfileId?: ProfileToQuatorProfileIdResolver<TParent>;
  id?: ProfileToIdResolver<TParent>;
  createdAt?: ProfileToCreatedAtResolver<TParent>;
  updatedAt?: ProfileToUpdatedAtResolver<TParent>;
}

export interface ProfileToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToCountryIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToCURPResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToRFCResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToNSSResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToInfonavitCreditResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToNationalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToDateOfBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToMaritalStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToBiographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToSiteLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToSiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToQuatorProfileIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberTypeResolver<TParent = any> {
  email?: MemberToEmailResolver<TParent>;
  recoverToken?: MemberToRecoverTokenResolver<TParent>;
  recoverRegister?: MemberToRecoverRegisterResolver<TParent>;
  isActive?: MemberToIsActiveResolver<TParent>;
  firstTime?: MemberToFirstTimeResolver<TParent>;
  loginCount?: MemberToLoginCountResolver<TParent>;
  rFC?: MemberToRFCResolver<TParent>;
  businessName?: MemberToBusinessNameResolver<TParent>;
  memberCompanies?: MemberToMemberCompaniesResolver<TParent>;
  memberRoles?: MemberToMemberRolesResolver<TParent>;
  memberProjects?: MemberToMemberProjectsResolver<TParent>;
  profile?: MemberToProfileResolver<TParent>;
  lastLogin?: MemberToLastLoginResolver<TParent>;
  groups?: MemberToGroupsResolver<TParent>;
  taxonomies?: MemberToTaxonomiesResolver<TParent>;
  id?: MemberToIdResolver<TParent>;
  createdAt?: MemberToCreatedAtResolver<TParent>;
  updatedAt?: MemberToUpdatedAtResolver<TParent>;
  listEventDetails?: MemberToListEventDetailsResolver<TParent>;
  listFisicExams?: MemberToListFisicExamsResolver<TParent>;
  listMedicalBackgrounds?: MemberToListMedicalBackgroundsResolver<TParent>;
  listMedicRecipes?: MemberToListMedicRecipesResolver<TParent>;
  listPatientNotes?: MemberToListPatientNotesResolver<TParent>;
  listVitalSigns?: MemberToListVitalSignsResolver<TParent>;
  listVaccines?: MemberToListVaccinesResolver<TParent>;
  files?: MemberToFilesResolver<TParent>;
  sharedFiles?: MemberToSharedFilesResolver<TParent>;
  sharedFolders?: MemberToSharedFoldersResolver<TParent>;
  hiring?: MemberToHiringResolver<TParent>;
  shift?: MemberToShiftResolver<TParent>;
}

export interface MemberToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToRecoverTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToRecoverRegisterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToFirstTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToLoginCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToRFCResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToBusinessNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToMemberCompaniesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToMemberRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToMemberProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToLastLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToTaxonomiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListEventDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListFisicExamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListMedicalBackgroundsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListMedicRecipesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListPatientNotesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListVitalSignsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToListVaccinesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToSharedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToSharedFoldersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToHiringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberToShiftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberCompanyTypeResolver<TParent = any> {
  companyId?: MemberCompanyToCompanyIdResolver<TParent>;
  company?: MemberCompanyToCompanyResolver<TParent>;
  memberId?: MemberCompanyToMemberIdResolver<TParent>;
  member?: MemberCompanyToMemberResolver<TParent>;
  isDefault?: MemberCompanyToIsDefaultResolver<TParent>;
  id?: MemberCompanyToIdResolver<TParent>;
  createdAt?: MemberCompanyToCreatedAtResolver<TParent>;
  updatedAt?: MemberCompanyToUpdatedAtResolver<TParent>;
}

export interface MemberCompanyToCompanyIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToIsDefaultResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCompanyToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberRoleTypeResolver<TParent = any> {
  companyId?: MemberRoleToCompanyIdResolver<TParent>;
  company?: MemberRoleToCompanyResolver<TParent>;
  roleId?: MemberRoleToRoleIdResolver<TParent>;
  role?: MemberRoleToRoleResolver<TParent>;
  memberId?: MemberRoleToMemberIdResolver<TParent>;
  member?: MemberRoleToMemberResolver<TParent>;
  id?: MemberRoleToIdResolver<TParent>;
  createdAt?: MemberRoleToCreatedAtResolver<TParent>;
  updatedAt?: MemberRoleToUpdatedAtResolver<TParent>;
}

export interface MemberRoleToCompanyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToRoleIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberRoleToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRoleTypeResolver<TParent = any> {
  name?: RoleToNameResolver<TParent>;
  codeName?: RoleToCodeNameResolver<TParent>;
  description?: RoleToDescriptionResolver<TParent>;
  memberRoles?: RoleToMemberRolesResolver<TParent>;
  id?: RoleToIdResolver<TParent>;
  createdAt?: RoleToCreatedAtResolver<TParent>;
  updatedAt?: RoleToUpdatedAtResolver<TParent>;
}

export interface RoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToCodeNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToMemberRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberProjectTypeResolver<TParent = any> {
  memberId?: MemberProjectToMemberIdResolver<TParent>;
  member?: MemberProjectToMemberResolver<TParent>;
  projectId?: MemberProjectToProjectIdResolver<TParent>;
  project?: MemberProjectToProjectResolver<TParent>;
  memberProjectRoleProject?: MemberProjectToMemberProjectRoleProjectResolver<TParent>;
  id?: MemberProjectToIdResolver<TParent>;
  createdAt?: MemberProjectToCreatedAtResolver<TParent>;
  updatedAt?: MemberProjectToUpdatedAtResolver<TParent>;
}

export interface MemberProjectToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToMemberProjectRoleProjectResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberProjectRoleProjectTypeResolver<TParent = any> {
  memberProjectId?: MemberProjectRoleProjectToMemberProjectIdResolver<TParent>;
  memberProject?: MemberProjectRoleProjectToMemberProjectResolver<TParent>;
  projectRoleId?: MemberProjectRoleProjectToProjectRoleIdResolver<TParent>;
  projectRole?: MemberProjectRoleProjectToProjectRoleResolver<TParent>;
  id?: MemberProjectRoleProjectToIdResolver<TParent>;
  createdAt?: MemberProjectRoleProjectToCreatedAtResolver<TParent>;
  updatedAt?: MemberProjectRoleProjectToUpdatedAtResolver<TParent>;
}

export interface MemberProjectRoleProjectToMemberProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectRoleProjectToMemberProjectResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectRoleProjectToProjectRoleIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectRoleProjectToProjectRoleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectRoleProjectToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectRoleProjectToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectRoleProjectToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProjectRoleTypeResolver<TParent = any> {
  name?: ProjectRoleToNameResolver<TParent>;
  codeName?: ProjectRoleToCodeNameResolver<TParent>;
  label?: ProjectRoleToLabelResolver<TParent>;
  description?: ProjectRoleToDescriptionResolver<TParent>;
  isActive?: ProjectRoleToIsActiveResolver<TParent>;
  permission?: ProjectRoleToPermissionResolver<TParent>;
  projectId?: ProjectRoleToProjectIdResolver<TParent>;
  project?: ProjectRoleToProjectResolver<TParent>;
  id?: ProjectRoleToIdResolver<TParent>;
  createdAt?: ProjectRoleToCreatedAtResolver<TParent>;
  updatedAt?: ProjectRoleToUpdatedAtResolver<TParent>;
}

export interface ProjectRoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToCodeNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectRoleToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPermissionTypeResolver<TParent = any> {
  projectId?: PermissionToProjectIdResolver<TParent>;
  project?: PermissionToProjectResolver<TParent>;
  projectRoleId?: PermissionToProjectRoleIdResolver<TParent>;
  projectRole?: PermissionToProjectRoleResolver<TParent>;
  rules?: PermissionToRulesResolver<TParent>;
  id?: PermissionToIdResolver<TParent>;
  createdAt?: PermissionToCreatedAtResolver<TParent>;
  updatedAt?: PermissionToUpdatedAtResolver<TParent>;
}

export interface PermissionToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToProjectRoleIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToProjectRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToRulesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberTaxonomyTypeResolver<TParent = any> {
  memberId?: MemberTaxonomyToMemberIdResolver<TParent>;
  member?: MemberTaxonomyToMemberResolver<TParent>;
  taxonomyId?: MemberTaxonomyToTaxonomyIdResolver<TParent>;
}

export interface MemberTaxonomyToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberTaxonomyToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberTaxonomyToTaxonomyIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventDetailTypeResolver<TParent = any> {
  projectId?: EventDetailToProjectIdResolver<TParent>;
  memberId?: EventDetailToMemberIdResolver<TParent>;
  eventId?: EventDetailToEventIdResolver<TParent>;
  subTotal?: EventDetailToSubTotalResolver<TParent>;
  descuento?: EventDetailToDescuentoResolver<TParent>;
  tax?: EventDetailToTaxResolver<TParent>;
  total?: EventDetailToTotalResolver<TParent>;
  id?: EventDetailToIdResolver<TParent>;
  createdAt?: EventDetailToCreatedAtResolver<TParent>;
  updatedAt?: EventDetailToUpdatedAtResolver<TParent>;
}

export interface EventDetailToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToSubTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToDescuentoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFisicExamTypeResolver<TParent = any> {
  projectId?: FisicExamToProjectIdResolver<TParent>;
  memberId?: FisicExamToMemberIdResolver<TParent>;
  eventId?: FisicExamToEventIdResolver<TParent>;
  title?: FisicExamToTitleResolver<TParent>;
  content?: FisicExamToContentResolver<TParent>;
  isVisible?: FisicExamToIsVisibleResolver<TParent>;
  position?: FisicExamToPositionResolver<TParent>;
  id?: FisicExamToIdResolver<TParent>;
  createdAt?: FisicExamToCreatedAtResolver<TParent>;
  updatedAt?: FisicExamToUpdatedAtResolver<TParent>;
  member?: FisicExamToMemberResolver<TParent>;
}

export interface FisicExamToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToIsVisibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FisicExamToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMedicalBackgroundTypeResolver<TParent = any> {
  format?: MedicalBackgroundToFormatResolver<TParent>;
  projectId?: MedicalBackgroundToProjectIdResolver<TParent>;
  formatId?: MedicalBackgroundToFormatIdResolver<TParent>;
  label?: MedicalBackgroundToLabelResolver<TParent>;
  isVisible?: MedicalBackgroundToIsVisibleResolver<TParent>;
  position?: MedicalBackgroundToPositionResolver<TParent>;
  pacientMedicalBackground?: MedicalBackgroundToPacientMedicalBackgroundResolver<TParent>;
  medicalBackgroundDetails?: MedicalBackgroundToMedicalBackgroundDetailsResolver<TParent>;
  id?: MedicalBackgroundToIdResolver<TParent>;
  createdAt?: MedicalBackgroundToCreatedAtResolver<TParent>;
  updatedAt?: MedicalBackgroundToUpdatedAtResolver<TParent>;
  member?: MedicalBackgroundToMemberResolver<TParent>;
}

export interface MedicalBackgroundToFormatResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToFormatIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToLabelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToIsVisibleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToPositionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToPacientMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToMedicalBackgroundDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFormatTypeResolver<TParent = any> {
  projectId?: FormatToProjectIdResolver<TParent>;
  memberId?: FormatToMemberIdResolver<TParent>;
  eventTypeId?: FormatToEventTypeIdResolver<TParent>;
  nameFormat?: FormatToNameFormatResolver<TParent>;
  id?: FormatToIdResolver<TParent>;
  createdAt?: FormatToCreatedAtResolver<TParent>;
  updatedAt?: FormatToUpdatedAtResolver<TParent>;
}

export interface FormatToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FormatToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FormatToEventTypeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FormatToNameFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FormatToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FormatToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FormatToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPacientMedicalBackgroundTypeResolver<TParent = any> {
  medicalBackgroundDetail?: PacientMedicalBackgroundToMedicalBackgroundDetailResolver<TParent>;
  medicalBackgroundDetailId?: PacientMedicalBackgroundToMedicalBackgroundDetailIdResolver<TParent>;
  projectId?: PacientMedicalBackgroundToProjectIdResolver<TParent>;
  memberId?: PacientMedicalBackgroundToMemberIdResolver<TParent>;
  eventId?: PacientMedicalBackgroundToEventIdResolver<TParent>;
  text?: PacientMedicalBackgroundToTextResolver<TParent>;
  isResponse?: PacientMedicalBackgroundToIsResponseResolver<TParent>;
  id?: PacientMedicalBackgroundToIdResolver<TParent>;
  createdAt?: PacientMedicalBackgroundToCreatedAtResolver<TParent>;
  updatedAt?: PacientMedicalBackgroundToUpdatedAtResolver<TParent>;
}

export interface PacientMedicalBackgroundToMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToMedicalBackgroundDetailIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToEventIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToTextResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToIsResponseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientMedicalBackgroundToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMedicalBackgroundDetailTypeResolver<TParent = any> {
  medicalBackground?: MedicalBackgroundDetailToMedicalBackgroundResolver<TParent>;
  clinicHistoryMedicalBackgroundDetails?: MedicalBackgroundDetailToClinicHistoryMedicalBackgroundDetailsResolver<TParent>;
  projectId?: MedicalBackgroundDetailToProjectIdResolver<TParent>;
  medicalBackgroundId?: MedicalBackgroundDetailToMedicalBackgroundIdResolver<TParent>;
  label?: MedicalBackgroundDetailToLabelResolver<TParent>;
  backgroundTypeOption?: MedicalBackgroundDetailToBackgroundTypeOptionResolver<TParent>;
  isOption?: MedicalBackgroundDetailToIsOptionResolver<TParent>;
  isVisible?: MedicalBackgroundDetailToIsVisibleResolver<TParent>;
  position?: MedicalBackgroundDetailToPositionResolver<TParent>;
  pacientMedicalBackgrounds?: MedicalBackgroundDetailToPacientMedicalBackgroundsResolver<TParent>;
  id?: MedicalBackgroundDetailToIdResolver<TParent>;
  createdAt?: MedicalBackgroundDetailToCreatedAtResolver<TParent>;
  updatedAt?: MedicalBackgroundDetailToUpdatedAtResolver<TParent>;
}

export interface MedicalBackgroundDetailToMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToClinicHistoryMedicalBackgroundDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToMedicalBackgroundIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToLabelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToBackgroundTypeOptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToIsOptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToIsVisibleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToPositionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToPacientMedicalBackgroundsArgs {
  filter?: IPacientMedicalBackgroundFilterInput;
}
export interface MedicalBackgroundDetailToPacientMedicalBackgroundsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MedicalBackgroundDetailToPacientMedicalBackgroundsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MedicalBackgroundDetailToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalBackgroundDetailToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IClinicHistoryMedicalBackgroundDetailTypeResolver<
  TParent = any
> {
  medicalBackgroundDetail?: ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailResolver<TParent>;
  medicalBackgroundDetailId?: ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailIdResolver<TParent>;
  backgroundType?: ClinicHistoryMedicalBackgroundDetailToBackgroundTypeResolver<TParent>;
  id?: ClinicHistoryMedicalBackgroundDetailToIdResolver<TParent>;
  createdAt?: ClinicHistoryMedicalBackgroundDetailToCreatedAtResolver<TParent>;
  updatedAt?: ClinicHistoryMedicalBackgroundDetailToUpdatedAtResolver<TParent>;
}

export interface ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryMedicalBackgroundDetailToBackgroundTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryMedicalBackgroundDetailToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryMedicalBackgroundDetailToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryMedicalBackgroundDetailToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMedicRecipeTypeResolver<TParent = any> {
  projectId?: MedicRecipeToProjectIdResolver<TParent>;
  memberId?: MedicRecipeToMemberIdResolver<TParent>;
  profesionalCell?: MedicRecipeToProfesionalCellResolver<TParent>;
  speciality?: MedicRecipeToSpecialityResolver<TParent>;
  institute?: MedicRecipeToInstituteResolver<TParent>;
  electronicSing?: MedicRecipeToElectronicSingResolver<TParent>;
  isCorrect?: MedicRecipeToIsCorrectResolver<TParent>;
  id?: MedicRecipeToIdResolver<TParent>;
  createdAt?: MedicRecipeToCreatedAtResolver<TParent>;
  updatedAt?: MedicRecipeToUpdatedAtResolver<TParent>;
  member?: MedicRecipeToMemberResolver<TParent>;
}

export interface MedicRecipeToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToProfesionalCellResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToSpecialityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToInstituteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToElectronicSingResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToIsCorrectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicRecipeToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPacientNoteTypeResolver<TParent = any> {
  memberId?: PacientNoteToMemberIdResolver<TParent>;
  projectId?: PacientNoteToProjectIdResolver<TParent>;
  eventId?: PacientNoteToEventIdResolver<TParent>;
  note?: PacientNoteToNoteResolver<TParent>;
  id?: PacientNoteToIdResolver<TParent>;
  createdAt?: PacientNoteToCreatedAtResolver<TParent>;
  updatedAt?: PacientNoteToUpdatedAtResolver<TParent>;
  member?: PacientNoteToMemberResolver<TParent>;
}

export interface PacientNoteToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToNoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PacientNoteToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVitalSignTypeResolver<TParent = any> {
  projectId?: VitalSignToProjectIdResolver<TParent>;
  labelNameVt?: VitalSignToLabelNameVtResolver<TParent>;
  isVisible?: VitalSignToIsVisibleResolver<TParent>;
  position?: VitalSignToPositionResolver<TParent>;
  patientVitalSignsResponse?: VitalSignToPatientVitalSignsResponseResolver<TParent>;
  id?: VitalSignToIdResolver<TParent>;
  createdAt?: VitalSignToCreatedAtResolver<TParent>;
  updatedAt?: VitalSignToUpdatedAtResolver<TParent>;
  member?: VitalSignToMemberResolver<TParent>;
}

export interface VitalSignToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToLabelNameVtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToIsVisibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToPatientVitalSignsResponseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VitalSignToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPatientVitalSignsResponseTypeResolver<TParent = any> {
  vitalSignId?: PatientVitalSignsResponseToVitalSignIdResolver<TParent>;
  vitalSign?: PatientVitalSignsResponseToVitalSignResolver<TParent>;
  eventId?: PatientVitalSignsResponseToEventIdResolver<TParent>;
  memberId?: PatientVitalSignsResponseToMemberIdResolver<TParent>;
  value?: PatientVitalSignsResponseToValueResolver<TParent>;
  id?: PatientVitalSignsResponseToIdResolver<TParent>;
  createdAt?: PatientVitalSignsResponseToCreatedAtResolver<TParent>;
  updatedAt?: PatientVitalSignsResponseToUpdatedAtResolver<TParent>;
}

export interface PatientVitalSignsResponseToVitalSignIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToVitalSignResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToEventIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToValueResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PatientVitalSignsResponseToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVaccineTypeResolver<TParent = any> {
  projectId?: VaccineToProjectIdResolver<TParent>;
  memberId?: VaccineToMemberIdResolver<TParent>;
  nameVac?: VaccineToNameVacResolver<TParent>;
  dateAplicationVac?: VaccineToDateAplicationVacResolver<TParent>;
  nextVac?: VaccineToNextVacResolver<TParent>;
  notesVac?: VaccineToNotesVacResolver<TParent>;
  position?: VaccineToPositionResolver<TParent>;
  id?: VaccineToIdResolver<TParent>;
  createdAt?: VaccineToCreatedAtResolver<TParent>;
  updatedAt?: VaccineToUpdatedAtResolver<TParent>;
  member?: VaccineToMemberResolver<TParent>;
}

export interface VaccineToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToNameVacResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToDateAplicationVacResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToNextVacResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToNotesVacResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VaccineToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFileTypeResolver<TParent = any> {
  folderId?: FileToFolderIdResolver<TParent>;
  folder?: FileToFolderResolver<TParent>;
  memberId?: FileToMemberIdResolver<TParent>;
  isProfile?: FileToIsProfileResolver<TParent>;
  token?: FileToTokenResolver<TParent>;
  name?: FileToNameResolver<TParent>;
  description?: FileToDescriptionResolver<TParent>;
  id?: FileToIdResolver<TParent>;
  createdAt?: FileToCreatedAtResolver<TParent>;
  updatedAt?: FileToUpdatedAtResolver<TParent>;
  member?: FileToMemberResolver<TParent>;
}

export interface FileToFolderIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToFolderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToIsProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFolderTypeResolver<TParent = any> {
  projectId?: FolderToProjectIdResolver<TParent>;
  memberId?: FolderToMemberIdResolver<TParent>;
  label?: FolderToLabelResolver<TParent>;
  background?: FolderToBackgroundResolver<TParent>;
  parentId?: FolderToParentIdResolver<TParent>;
  isPersonal?: FolderToIsPersonalResolver<TParent>;
  parent?: FolderToParentResolver<TParent>;
  subFolders?: FolderToSubFoldersResolver<TParent>;
  files?: FolderToFilesResolver<TParent>;
  id?: FolderToIdResolver<TParent>;
  createdAt?: FolderToCreatedAtResolver<TParent>;
  updatedAt?: FolderToUpdatedAtResolver<TParent>;
}

export interface FolderToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToBackgroundResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToParentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToIsPersonalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToSubFoldersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FolderToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISharedFileTypeResolver<TParent = any> {
  fileId?: SharedFileToFileIdResolver<TParent>;
  file?: SharedFileToFileResolver<TParent>;
  memberId?: SharedFileToMemberIdResolver<TParent>;
  id?: SharedFileToIdResolver<TParent>;
  createdAt?: SharedFileToCreatedAtResolver<TParent>;
  updatedAt?: SharedFileToUpdatedAtResolver<TParent>;
}

export interface SharedFileToFileIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFileToFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFileToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFileToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFileToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISharedFolderTypeResolver<TParent = any> {
  folderId?: SharedFolderToFolderIdResolver<TParent>;
  folder?: SharedFolderToFolderResolver<TParent>;
  memberId?: SharedFolderToMemberIdResolver<TParent>;
  id?: SharedFolderToIdResolver<TParent>;
  createdAt?: SharedFolderToCreatedAtResolver<TParent>;
  updatedAt?: SharedFolderToUpdatedAtResolver<TParent>;
}

export interface SharedFolderToFolderIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFolderToFolderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFolderToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFolderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFolderToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SharedFolderToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IHiringTypeResolver<TParent = any> {
  hiringType?: HiringToHiringTypeResolver<TParent>;
  projectRoleId?: HiringToProjectRoleIdResolver<TParent>;
  memberId?: HiringToMemberIdResolver<TParent>;
  dateStart?: HiringToDateStartResolver<TParent>;
  dateEnd?: HiringToDateEndResolver<TParent>;
  description?: HiringToDescriptionResolver<TParent>;
  amount?: HiringToAmountResolver<TParent>;
  amountWritted?: HiringToAmountWrittedResolver<TParent>;
  amountPerHour?: HiringToAmountPerHourResolver<TParent>;
  benefits?: HiringToBenefitsResolver<TParent>;
  enumHiringType?: HiringToEnumHiringTypeResolver<TParent>;
  hiringTypeId?: HiringToHiringTypeIdResolver<TParent>;
  id?: HiringToIdResolver<TParent>;
  createdAt?: HiringToCreatedAtResolver<TParent>;
  updatedAt?: HiringToUpdatedAtResolver<TParent>;
}

export interface HiringToHiringTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToProjectRoleIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToDateStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToDateEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToAmountWrittedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToAmountPerHourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToBenefitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToEnumHiringTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToHiringTypeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IHiringTypeTypeResolver<TParent = any> {
  hirings?: HiringTypeToHiringsResolver<TParent>;
  projectId?: HiringTypeToProjectIdResolver<TParent>;
  name?: HiringTypeToNameResolver<TParent>;
  id?: HiringTypeToIdResolver<TParent>;
  createdAt?: HiringTypeToCreatedAtResolver<TParent>;
  updatedAt?: HiringTypeToUpdatedAtResolver<TParent>;
}

export interface HiringTypeToHiringsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringTypeToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringTypeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringTypeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HiringTypeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IShiftTypeResolver<TParent = any> {
  day?: ShiftToDayResolver<TParent>;
  projectId?: ShiftToProjectIdResolver<TParent>;
  memberId?: ShiftToMemberIdResolver<TParent>;
  timeStart?: ShiftToTimeStartResolver<TParent>;
  timeEnd?: ShiftToTimeEndResolver<TParent>;
  dayId?: ShiftToDayIdResolver<TParent>;
  id?: ShiftToIdResolver<TParent>;
  createdAt?: ShiftToCreatedAtResolver<TParent>;
  updatedAt?: ShiftToUpdatedAtResolver<TParent>;
}

export interface ShiftToDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToTimeStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToTimeEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToDayIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShiftToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDayTypeResolver<TParent = any> {
  shifts?: DayToShiftsResolver<TParent>;
  name?: DayToNameResolver<TParent>;
  codeDay?: DayToCodeDayResolver<TParent>;
  id?: DayToIdResolver<TParent>;
  createdAt?: DayToCreatedAtResolver<TParent>;
  updatedAt?: DayToUpdatedAtResolver<TParent>;
}

export interface DayToShiftsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DayToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DayToCodeDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DayToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DayToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DayToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceHelperTypeResolver<TParent = any> {
  id?: ServiceHelperToIdResolver<TParent>;
  name?: ServiceHelperToNameResolver<TParent>;
  label?: ServiceHelperToLabelResolver<TParent>;
  isActive?: ServiceHelperToIsActiveResolver<TParent>;
  codeName?: ServiceHelperToCodeNameResolver<TParent>;
  image?: ServiceHelperToImageResolver<TParent>;
  description?: ServiceHelperToDescriptionResolver<TParent>;
  priority?: ServiceHelperToPriorityResolver<TParent>;
  createdAt?: ServiceHelperToCreatedAtResolver<TParent>;
  updatedAt?: ServiceHelperToUpdatedAtResolver<TParent>;
  projectMicroservices?: ServiceHelperToProjectMicroservicesResolver<TParent>;
  functions?: ServiceHelperToFunctionsResolver<TParent>;
}

export interface ServiceHelperToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToCodeNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToProjectMicroservicesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceHelperToFunctionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProjectMicroserviceTypeResolver<TParent = any> {
  microserviceId?: ProjectMicroserviceToMicroserviceIdResolver<TParent>;
  microservice?: ProjectMicroserviceToMicroserviceResolver<TParent>;
  isActive?: ProjectMicroserviceToIsActiveResolver<TParent>;
  label?: ProjectMicroserviceToLabelResolver<TParent>;
  projectId?: ProjectMicroserviceToProjectIdResolver<TParent>;
  id?: ProjectMicroserviceToIdResolver<TParent>;
  createdAt?: ProjectMicroserviceToCreatedAtResolver<TParent>;
  updatedAt?: ProjectMicroserviceToUpdatedAtResolver<TParent>;
}

export interface ProjectMicroserviceToMicroserviceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToMicroserviceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToIsActiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToLabelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectMicroserviceToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMicroserviceTypeResolver<TParent = any> {
  name?: MicroserviceToNameResolver<TParent>;
  codeName?: MicroserviceToCodeNameResolver<TParent>;
  image?: MicroserviceToImageResolver<TParent>;
  description?: MicroserviceToDescriptionResolver<TParent>;
  priority?: MicroserviceToPriorityResolver<TParent>;
  isPublic?: MicroserviceToIsPublicResolver<TParent>;
  projectMicroservices?: MicroserviceToProjectMicroservicesResolver<TParent>;
  functions?: MicroserviceToFunctionsResolver<TParent>;
  id?: MicroserviceToIdResolver<TParent>;
  createdAt?: MicroserviceToCreatedAtResolver<TParent>;
  updatedAt?: MicroserviceToUpdatedAtResolver<TParent>;
}

export interface MicroserviceToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToCodeNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToProjectMicroservicesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToFunctionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicroserviceToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFunctionTypeResolver<TParent = any> {
  name?: FunctionToNameResolver<TParent>;
  codeName?: FunctionToCodeNameResolver<TParent>;
  functionType?: FunctionToFunctionTypeResolver<TParent>;
  microserviceId?: FunctionToMicroserviceIdResolver<TParent>;
  microservice?: FunctionToMicroserviceResolver<TParent>;
  id?: FunctionToIdResolver<TParent>;
  createdAt?: FunctionToCreatedAtResolver<TParent>;
  updatedAt?: FunctionToUpdatedAtResolver<TParent>;
}

export interface FunctionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToCodeNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToMicroserviceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToMicroserviceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IShopTypeResolver<TParent = any> {
  projectId?: ShopToProjectIdResolver<TParent>;
  shopType?: ShopToShopTypeResolver<TParent>;
  profileUrl?: ShopToProfileUrlResolver<TParent>;
  id?: ShopToIdResolver<TParent>;
  createdAt?: ShopToCreatedAtResolver<TParent>;
  updatedAt?: ShopToUpdatedAtResolver<TParent>;
}

export interface ShopToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopToShopTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopToProfileUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShopToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IConfigurationTypeResolver<TParent = any> {
  projectId?: ConfigurationToProjectIdResolver<TParent>;
  key?: ConfigurationToKeyResolver<TParent>;
  value?: ConfigurationToValueResolver<TParent>;
  id?: ConfigurationToIdResolver<TParent>;
  createdAt?: ConfigurationToCreatedAtResolver<TParent>;
  updatedAt?: ConfigurationToUpdatedAtResolver<TParent>;
}

export interface ConfigurationToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurationToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurationToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IGroupTaxonomyTypeResolver<TParent = any> {
  taxonomyId?: GroupTaxonomyToTaxonomyIdResolver<TParent>;
  groupId?: GroupTaxonomyToGroupIdResolver<TParent>;
  group?: GroupTaxonomyToGroupResolver<TParent>;
  taxonomy?: GroupTaxonomyToTaxonomyResolver<TParent>;
}

export interface GroupTaxonomyToTaxonomyIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupTaxonomyToGroupIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupTaxonomyToGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupTaxonomyToTaxonomyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITaxonomyTypeResolver<TParent = any> {
  projectId?: TaxonomyToProjectIdResolver<TParent>;
  name?: TaxonomyToNameResolver<TParent>;
  slug?: TaxonomyToSlugResolver<TParent>;
  description?: TaxonomyToDescriptionResolver<TParent>;
  termGroup?: TaxonomyToTermGroupResolver<TParent>;
  photo?: TaxonomyToPhotoResolver<TParent>;
  tagLine?: TaxonomyToTagLineResolver<TParent>;
  tagLine2?: TaxonomyToTagLine2Resolver<TParent>;
  parentId?: TaxonomyToParentIdResolver<TParent>;
  parent?: TaxonomyToParentResolver<TParent>;
  subCategories?: TaxonomyToSubCategoriesResolver<TParent>;
  isPublic?: TaxonomyToIsPublicResolver<TParent>;
  articles?: TaxonomyToArticlesResolver<TParent>;
  groupArticles?: TaxonomyToGroupArticlesResolver<TParent>;
  products?: TaxonomyToProductsResolver<TParent>;
  id?: TaxonomyToIdResolver<TParent>;
  createdAt?: TaxonomyToCreatedAtResolver<TParent>;
  updatedAt?: TaxonomyToUpdatedAtResolver<TParent>;
}

export interface TaxonomyToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToTermGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToTagLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToTagLine2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToParentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToSubCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToGroupArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArticleTypeResolver<TParent = any> {
  projectId?: ArticleToProjectIdResolver<TParent>;
  memberId?: ArticleToMemberIdResolver<TParent>;
  title?: ArticleToTitleResolver<TParent>;
  photo?: ArticleToPhotoResolver<TParent>;
  slug?: ArticleToSlugResolver<TParent>;
  resume?: ArticleToResumeResolver<TParent>;
  content?: ArticleToContentResolver<TParent>;
  active?: ArticleToActiveResolver<TParent>;
  views?: ArticleToViewsResolver<TParent>;
  status?: ArticleToStatusResolver<TParent>;
  releaseDate?: ArticleToReleaseDateResolver<TParent>;
  seoTitle?: ArticleToSeoTitleResolver<TParent>;
  seoDescription?: ArticleToSeoDescriptionResolver<TParent>;
  seoKeywords?: ArticleToSeoKeywordsResolver<TParent>;
  structuredMarking?: ArticleToStructuredMarkingResolver<TParent>;
  imageAlt?: ArticleToImageAltResolver<TParent>;
  seoArticle?: ArticleToSeoArticleResolver<TParent>;
  typeContent?: ArticleToTypeContentResolver<TParent>;
  embedContent?: ArticleToEmbedContentResolver<TParent>;
  groupId?: ArticleToGroupIdResolver<TParent>;
  group?: ArticleToGroupResolver<TParent>;
  subCategories?: ArticleToSubCategoriesResolver<TParent>;
  categories?: ArticleToCategoriesResolver<TParent>;
  tags?: ArticleToTagsResolver<TParent>;
  surveys?: ArticleToSurveysResolver<TParent>;
  id?: ArticleToIdResolver<TParent>;
  createdAt?: ArticleToCreatedAtResolver<TParent>;
  updatedAt?: ArticleToUpdatedAtResolver<TParent>;
  author?: ArticleToAuthorResolver<TParent>;
}

export interface ArticleToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToResumeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToViewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToReleaseDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSeoTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSeoDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSeoKeywordsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToStructuredMarkingResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToImageAltResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSeoArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToTypeContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToEmbedContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToGroupIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSubCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSurveysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISurveyTypeResolver<TParent = any> {
  title?: SurveyToTitleResolver<TParent>;
  description?: SurveyToDescriptionResolver<TParent>;
  isActive?: SurveyToIsActiveResolver<TParent>;
  thankYouMessage?: SurveyToThankYouMessageResolver<TParent>;
  articles?: SurveyToArticlesResolver<TParent>;
  questions?: SurveyToQuestionsResolver<TParent>;
  id?: SurveyToIdResolver<TParent>;
  createdAt?: SurveyToCreatedAtResolver<TParent>;
  updatedAt?: SurveyToUpdatedAtResolver<TParent>;
}

export interface SurveyToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToThankYouMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToQuestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SurveyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuestionTypeResolver<TParent = any> {
  surveyId?: QuestionToSurveyIdResolver<TParent>;
  survey?: QuestionToSurveyResolver<TParent>;
  title?: QuestionToTitleResolver<TParent>;
  type?: QuestionToTypeResolver<TParent>;
  image?: QuestionToImageResolver<TParent>;
  isRequired?: QuestionToIsRequiredResolver<TParent>;
  position?: QuestionToPositionResolver<TParent>;
  allowsFileUpload?: QuestionToAllowsFileUploadResolver<TParent>;
  options?: QuestionToOptionsResolver<TParent>;
  answers?: QuestionToAnswersResolver<TParent>;
  id?: QuestionToIdResolver<TParent>;
  createdAt?: QuestionToCreatedAtResolver<TParent>;
  updatedAt?: QuestionToUpdatedAtResolver<TParent>;
}

export interface QuestionToSurveyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToSurveyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToAllowsFileUploadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToAnswersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOptionTypeResolver<TParent = any> {
  questionId?: OptionToQuestionIdResolver<TParent>;
  question?: OptionToQuestionResolver<TParent>;
  title?: OptionToTitleResolver<TParent>;
  position?: OptionToPositionResolver<TParent>;
  count?: OptionToCountResolver<TParent>;
  answers?: OptionToAnswersResolver<TParent>;
  id?: OptionToIdResolver<TParent>;
  createdAt?: OptionToCreatedAtResolver<TParent>;
  updatedAt?: OptionToUpdatedAtResolver<TParent>;
}

export interface OptionToQuestionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToQuestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToAnswersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAnswerTypeResolver<TParent = any> {
  memberId?: AnswerToMemberIdResolver<TParent>;
  questionId?: AnswerToQuestionIdResolver<TParent>;
  question?: AnswerToQuestionResolver<TParent>;
  optionId?: AnswerToOptionIdResolver<TParent>;
  option?: AnswerToOptionResolver<TParent>;
  uploadFile?: AnswerToUploadFileResolver<TParent>;
  responseText?: AnswerToResponseTextResolver<TParent>;
  id?: AnswerToIdResolver<TParent>;
  createdAt?: AnswerToCreatedAtResolver<TParent>;
  updatedAt?: AnswerToUpdatedAtResolver<TParent>;
  member?: AnswerToMemberResolver<TParent>;
}

export interface AnswerToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToQuestionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToQuestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToOptionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToOptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToUploadFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToResponseTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnswerToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProductTypeResolver<TParent = any> {
  projectId?: ProductToProjectIdResolver<TParent>;
  memberId?: ProductToMemberIdResolver<TParent>;
  title?: ProductToTitleResolver<TParent>;
  photo?: ProductToPhotoResolver<TParent>;
  slug?: ProductToSlugResolver<TParent>;
  sku?: ProductToSkuResolver<TParent>;
  price?: ProductToPriceResolver<TParent>;
  offerPrice?: ProductToOfferPriceResolver<TParent>;
  stock?: ProductToStockResolver<TParent>;
  active?: ProductToActiveResolver<TParent>;
  shippingType?: ProductToShippingTypeResolver<TParent>;
  shippingPrice?: ProductToShippingPriceResolver<TParent>;
  description?: ProductToDescriptionResolver<TParent>;
  publishDate?: ProductToPublishDateResolver<TParent>;
  views?: ProductToViewsResolver<TParent>;
  status?: ProductToStatusResolver<TParent>;
  seoProduct?: ProductToSeoProductResolver<TParent>;
  subCategories?: ProductToSubCategoriesResolver<TParent>;
  categories?: ProductToCategoriesResolver<TParent>;
  details?: ProductToDetailsResolver<TParent>;
  images?: ProductToImagesResolver<TParent>;
  shopType?: ProductToShopTypeResolver<TParent>;
  id?: ProductToIdResolver<TParent>;
  createdAt?: ProductToCreatedAtResolver<TParent>;
  updatedAt?: ProductToUpdatedAtResolver<TParent>;
}

export interface ProductToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToOfferPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToShippingTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToShippingPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToPublishDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToViewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToSeoProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToSubCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToShopTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProductDetailTypeResolver<TParent = any> {
  productId?: ProductDetailToProductIdResolver<TParent>;
  product?: ProductDetailToProductResolver<TParent>;
  key?: ProductDetailToKeyResolver<TParent>;
  value?: ProductDetailToValueResolver<TParent>;
  id?: ProductDetailToIdResolver<TParent>;
  createdAt?: ProductDetailToCreatedAtResolver<TParent>;
  updatedAt?: ProductDetailToUpdatedAtResolver<TParent>;
}

export interface ProductDetailToProductIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDetailToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDetailToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDetailToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDetailToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDetailToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDetailToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IImageTypeResolver<TParent = any> {
  projectId?: ImageToProjectIdResolver<TParent>;
  original?: ImageToOriginalResolver<TParent>;
  title?: ImageToTitleResolver<TParent>;
  products?: ImageToProductsResolver<TParent>;
  id?: ImageToIdResolver<TParent>;
  createdAt?: ImageToCreatedAtResolver<TParent>;
  updatedAt?: ImageToUpdatedAtResolver<TParent>;
}

export interface ImageToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToOriginalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICollectionSegmentInfoTypeResolver<TParent = any> {
  hasNextPage?: CollectionSegmentInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: CollectionSegmentInfoToHasPreviousPageResolver<TParent>;
}

export interface CollectionSegmentInfoToHasNextPageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollectionSegmentInfoToHasPreviousPageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMyUrlTypeResolver<TParent = any> {
  url?: MyUrlToUrlResolver<TParent>;
}

export interface MyUrlToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberProjectCollectionSegmentTypeResolver<TParent = any> {
  items?: MemberProjectCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: MemberProjectCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: MemberProjectCollectionSegmentToTotalCountResolver<TParent>;
}

export interface MemberProjectCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberProjectCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberCollectionSegmentTypeResolver<TParent = any> {
  items?: MemberCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: MemberCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: MemberCollectionSegmentToTotalCountResolver<TParent>;
}

export interface MemberCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProjectsInfiniteConnectionTypeResolver<TParent = any> {
  pageInfo?: ProjectsInfiniteConnectionToPageInfoResolver<TParent>;
  edges?: ProjectsInfiniteConnectionToEdgesResolver<TParent>;
  nodes?: ProjectsInfiniteConnectionToNodesResolver<TParent>;
  totalCount?: ProjectsInfiniteConnectionToTotalCountResolver<TParent>;
}

export interface ProjectsInfiniteConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectsInfiniteConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectsInfiniteConnectionToNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectsInfiniteConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPageInfoTypeResolver<TParent = any> {
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  startCursor?: PageInfoToStartCursorResolver<TParent>;
  endCursor?: PageInfoToEndCursorResolver<TParent>;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProjectsInfiniteEdgeTypeResolver<TParent = any> {
  cursor?: ProjectsInfiniteEdgeToCursorResolver<TParent>;
  node?: ProjectsInfiniteEdgeToNodeResolver<TParent>;
}

export interface ProjectsInfiniteEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectsInfiniteEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberChatTypeResolver<TParent = any> {
  email?: MemberChatToEmailResolver<TParent>;
  name?: MemberChatToNameResolver<TParent>;
  lastName?: MemberChatToLastNameResolver<TParent>;
  photo?: MemberChatToPhotoResolver<TParent>;
}

export interface MemberChatToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberChatToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberChatToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberChatToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberFullNameTypeResolver<TParent = any> {
  fullName?: MemberFullNameToFullNameResolver<TParent>;
}

export interface MemberFullNameToFullNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICustomMemberDtoTypeResolver<TParent = any> {
  roleName?: CustomMemberDtoToRoleNameResolver<TParent>;
  roleCode?: CustomMemberDtoToRoleCodeResolver<TParent>;
  photo?: CustomMemberDtoToPhotoResolver<TParent>;
  email?: CustomMemberDtoToEmailResolver<TParent>;
  fullName?: CustomMemberDtoToFullNameResolver<TParent>;
  id?: CustomMemberDtoToIdResolver<TParent>;
  birthday?: CustomMemberDtoToBirthdayResolver<TParent>;
}

export interface CustomMemberDtoToRoleNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomMemberDtoToRoleCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomMemberDtoToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomMemberDtoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomMemberDtoToFullNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomMemberDtoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomMemberDtoToBirthdayResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMessageFixTypeResolver<TParent = any> {
  value?: MessageFixToValueResolver<TParent>;
}

export interface MessageFixToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IScheduleManagerTypeResolver<TParent = any> {
  projectId?: ScheduleManagerToProjectIdResolver<TParent>;
  memberId?: ScheduleManagerToMemberIdResolver<TParent>;
  eventTypeId?: ScheduleManagerToEventTypeIdResolver<TParent>;
  eventType?: ScheduleManagerToEventTypeResolver<TParent>;
  schedules?: ScheduleManagerToSchedulesResolver<TParent>;
  id?: ScheduleManagerToIdResolver<TParent>;
  createdAt?: ScheduleManagerToCreatedAtResolver<TParent>;
  updatedAt?: ScheduleManagerToUpdatedAtResolver<TParent>;
}

export interface ScheduleManagerToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToEventTypeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToSchedulesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleManagerToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventTypeTypeResolver<TParent = any> {
  projectId?: EventTypeToProjectIdResolver<TParent>;
  name?: EventTypeToNameResolver<TParent>;
  price?: EventTypeToPriceResolver<TParent>;
  subEventTypes?: EventTypeToSubEventTypesResolver<TParent>;
  image?: EventTypeToImageResolver<TParent>;
  description?: EventTypeToDescriptionResolver<TParent>;
  events?: EventTypeToEventsResolver<TParent>;
  id?: EventTypeToIdResolver<TParent>;
  createdAt?: EventTypeToCreatedAtResolver<TParent>;
  updatedAt?: EventTypeToUpdatedAtResolver<TParent>;
}

export interface EventTypeToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToSubEventTypesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToEventsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventTypeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISubEventTypeTypeResolver<TParent = any> {
  name?: SubEventTypeToNameResolver<TParent>;
  price?: SubEventTypeToPriceResolver<TParent>;
  eventTypes?: SubEventTypeToEventTypesResolver<TParent>;
  id?: SubEventTypeToIdResolver<TParent>;
  createdAt?: SubEventTypeToCreatedAtResolver<TParent>;
  updatedAt?: SubEventTypeToUpdatedAtResolver<TParent>;
}

export interface SubEventTypeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubEventTypeToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubEventTypeToEventTypesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubEventTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubEventTypeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubEventTypeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventTypeResolver<TParent = any> {
  projectId?: EventToProjectIdResolver<TParent>;
  memberId?: EventToMemberIdResolver<TParent>;
  title?: EventToTitleResolver<TParent>;
  location?: EventToLocationResolver<TParent>;
  color?: EventToColorResolver<TParent>;
  description?: EventToDescriptionResolver<TParent>;
  file?: EventToFileResolver<TParent>;
  roomId?: EventToRoomIdResolver<TParent>;
  eventDate?: EventToEventDateResolver<TParent>;
  finishDate?: EventToFinishDateResolver<TParent>;
  eventMode?: EventToEventModeResolver<TParent>;
  eventSessionId?: EventToEventSessionIdResolver<TParent>;
  eventSession?: EventToEventSessionResolver<TParent>;
  eventMembers?: EventToEventMembersResolver<TParent>;
  sendDetails?: EventToSendDetailsResolver<TParent>;
  sendRemember?: EventToSendRememberResolver<TParent>;
  totalPrice?: EventToTotalPriceResolver<TParent>;
  discount?: EventToDiscountResolver<TParent>;
  visibility?: EventToVisibilityResolver<TParent>;
  eventCharges?: EventToEventChargesResolver<TParent>;
  eventTypeId?: EventToEventTypeIdResolver<TParent>;
  eventType?: EventToEventTypeResolver<TParent>;
  id?: EventToIdResolver<TParent>;
  createdAt?: EventToCreatedAtResolver<TParent>;
  updatedAt?: EventToUpdatedAtResolver<TParent>;
  listDiagnostic?: EventToListDiagnosticResolver<TParent>;
}

export interface EventToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToRoomIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToFinishDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventSessionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventSessionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToSendDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToSendRememberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToTotalPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventChargesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventTypeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToEventTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventToListDiagnosticResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventSessionTypeResolver<TParent = any> {
  projectId?: EventSessionToProjectIdResolver<TParent>;
  title?: EventSessionToTitleResolver<TParent>;
  image?: EventSessionToImageResolver<TParent>;
  price?: EventSessionToPriceResolver<TParent>;
  description?: EventSessionToDescriptionResolver<TParent>;
  duration?: EventSessionToDurationResolver<TParent>;
  eventMode?: EventSessionToEventModeResolver<TParent>;
  event?: EventSessionToEventResolver<TParent>;
  id?: EventSessionToIdResolver<TParent>;
  createdAt?: EventSessionToCreatedAtResolver<TParent>;
  updatedAt?: EventSessionToUpdatedAtResolver<TParent>;
}

export interface EventSessionToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToDurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToEventModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventSessionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventMemberTypeResolver<TParent = any> {
  eventId?: EventMemberToEventIdResolver<TParent>;
  event?: EventMemberToEventResolver<TParent>;
  memberId?: EventMemberToMemberIdResolver<TParent>;
  id?: EventMemberToIdResolver<TParent>;
  createdAt?: EventMemberToCreatedAtResolver<TParent>;
  updatedAt?: EventMemberToUpdatedAtResolver<TParent>;
  member?: EventMemberToMemberResolver<TParent>;
}

export interface EventMemberToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventMemberToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventMemberToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventMemberToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventMemberToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventMemberToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventMemberToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventChargeTypeResolver<TParent = any> {
  eventId?: EventChargeToEventIdResolver<TParent>;
  event?: EventChargeToEventResolver<TParent>;
  price?: EventChargeToPriceResolver<TParent>;
  description?: EventChargeToDescriptionResolver<TParent>;
  id?: EventChargeToIdResolver<TParent>;
  createdAt?: EventChargeToCreatedAtResolver<TParent>;
  updatedAt?: EventChargeToUpdatedAtResolver<TParent>;
}

export interface EventChargeToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventChargeToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventChargeToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventChargeToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventChargeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventChargeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventChargeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDiagnosticTypeResolver<TParent = any> {
  medicines?: DiagnosticToMedicinesResolver<TParent>;
  eventId?: DiagnosticToEventIdResolver<TParent>;
  projectId?: DiagnosticToProjectIdResolver<TParent>;
  memberId?: DiagnosticToMemberIdResolver<TParent>;
  content?: DiagnosticToContentResolver<TParent>;
  isVisible?: DiagnosticToIsVisibleResolver<TParent>;
  id?: DiagnosticToIdResolver<TParent>;
  createdAt?: DiagnosticToCreatedAtResolver<TParent>;
  updatedAt?: DiagnosticToUpdatedAtResolver<TParent>;
}

export interface DiagnosticToMedicinesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToIsVisibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiagnosticToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMedicineTypeResolver<TParent = any> {
  projectId?: MedicineToProjectIdResolver<TParent>;
  memberId?: MedicineToMemberIdResolver<TParent>;
  eventId?: MedicineToEventIdResolver<TParent>;
  medicineName?: MedicineToMedicineNameResolver<TParent>;
  take?: MedicineToTakeResolver<TParent>;
  frecuency?: MedicineToFrecuencyResolver<TParent>;
  duration?: MedicineToDurationResolver<TParent>;
  isVisible?: MedicineToIsVisibleResolver<TParent>;
  position?: MedicineToPositionResolver<TParent>;
  id?: MedicineToIdResolver<TParent>;
  createdAt?: MedicineToCreatedAtResolver<TParent>;
  updatedAt?: MedicineToUpdatedAtResolver<TParent>;
}

export interface MedicineToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToMedicineNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToTakeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToFrecuencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToDurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToIsVisibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicineToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IScheduleTypeResolver<TParent = any> {
  scheduleManagerId?: ScheduleToScheduleManagerIdResolver<TParent>;
  scheduleManager?: ScheduleToScheduleManagerResolver<TParent>;
  day?: ScheduleToDayResolver<TParent>;
  turn?: ScheduleToTurnResolver<TParent>;
  weekDay?: ScheduleToWeekDayResolver<TParent>;
  id?: ScheduleToIdResolver<TParent>;
  createdAt?: ScheduleToCreatedAtResolver<TParent>;
  updatedAt?: ScheduleToUpdatedAtResolver<TParent>;
}

export interface ScheduleToScheduleManagerIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToScheduleManagerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToTurnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToWeekDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduleToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITurnTypeResolver<TParent = any> {
  scheduleId?: TurnToScheduleIdResolver<TParent>;
  schedule?: TurnToScheduleResolver<TParent>;
  timeEnd?: TurnToTimeEndResolver<TParent>;
  timeStart?: TurnToTimeStartResolver<TParent>;
  timeStartString?: TurnToTimeStartStringResolver<TParent>;
  timeEndString?: TurnToTimeEndStringResolver<TParent>;
  isActive?: TurnToIsActiveResolver<TParent>;
  id?: TurnToIdResolver<TParent>;
  createdAt?: TurnToCreatedAtResolver<TParent>;
  updatedAt?: TurnToUpdatedAtResolver<TParent>;
}

export interface TurnToScheduleIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToScheduleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToTimeEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToTimeStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToTimeStartStringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToTimeEndStringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TurnToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventCollectionSegmentTypeResolver<TParent = any> {
  items?: EventCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: EventCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: EventCollectionSegmentToTotalCountResolver<TParent>;
}

export interface EventCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IConversationReplyTypeResolver<TParent = any> {
  memberId?: ConversationReplyToMemberIdResolver<TParent>;
  reply?: ConversationReplyToReplyResolver<TParent>;
  registerDate?: ConversationReplyToRegisterDateResolver<TParent>;
  status?: ConversationReplyToStatusResolver<TParent>;
  conversationId?: ConversationReplyToConversationIdResolver<TParent>;
  conversation?: ConversationReplyToConversationResolver<TParent>;
  id?: ConversationReplyToIdResolver<TParent>;
  createdAt?: ConversationReplyToCreatedAtResolver<TParent>;
  updatedAt?: ConversationReplyToUpdatedAtResolver<TParent>;
  member?: ConversationReplyToMemberResolver<TParent>;
}

export interface ConversationReplyToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToReplyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToRegisterDateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToConversationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToConversationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationReplyToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IConversationTypeResolver<TParent = any> {
  projectId?: ConversationToProjectIdResolver<TParent>;
  memberOne?: ConversationToMemberOneResolver<TParent>;
  memberTwo?: ConversationToMemberTwoResolver<TParent>;
  registerDate?: ConversationToRegisterDateResolver<TParent>;
  status?: ConversationToStatusResolver<TParent>;
  replies?: ConversationToRepliesResolver<TParent>;
  id?: ConversationToIdResolver<TParent>;
  createdAt?: ConversationToCreatedAtResolver<TParent>;
  updatedAt?: ConversationToUpdatedAtResolver<TParent>;
}

export interface ConversationToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToMemberOneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToMemberTwoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToRegisterDateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToRepliesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConversationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberConversationTypeResolver<TParent = any> {
  memberId?: MemberConversationToMemberIdResolver<TParent>;
  conversationId?: MemberConversationToConversationIdResolver<TParent>;
  member?: MemberConversationToMemberResolver<TParent>;
}

export interface MemberConversationToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberConversationToConversationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberConversationToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuestionDTOTypeResolver<TParent = any> {
  title?: QuestionDTOToTitleResolver<TParent>;
  type?: QuestionDTOToTypeResolver<TParent>;
  image?: QuestionDTOToImageResolver<TParent>;
  options?: QuestionDTOToOptionsResolver<TParent>;
  answers?: QuestionDTOToAnswersResolver<TParent>;
}

export interface QuestionDTOToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionDTOToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionDTOToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionDTOToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuestionDTOToAnswersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArticlesConnectionTypeResolver<TParent = any> {
  pageInfo?: ArticlesConnectionToPageInfoResolver<TParent>;
  edges?: ArticlesConnectionToEdgesResolver<TParent>;
  nodes?: ArticlesConnectionToNodesResolver<TParent>;
  totalCount?: ArticlesConnectionToTotalCountResolver<TParent>;
}

export interface ArticlesConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlesConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlesConnectionToNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlesConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArticlesEdgeTypeResolver<TParent = any> {
  cursor?: ArticlesEdgeToCursorResolver<TParent>;
  node?: ArticlesEdgeToNodeResolver<TParent>;
}

export interface ArticlesEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlesEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IArticleCollectionSegmentTypeResolver<TParent = any> {
  items?: ArticleCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: ArticleCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: ArticleCollectionSegmentToTotalCountResolver<TParent>;
}

export interface ArticleCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddressTypeResolver<TParent = any> {
  projectId?: AddressToProjectIdResolver<TParent>;
  memberId?: AddressToMemberIdResolver<TParent>;
  rFC?: AddressToRFCResolver<TParent>;
  businessName?: AddressToBusinessNameResolver<TParent>;
  addressType?: AddressToAddressTypeResolver<TParent>;
  firstName?: AddressToFirstNameResolver<TParent>;
  lastName?: AddressToLastNameResolver<TParent>;
  countryName?: AddressToCountryNameResolver<TParent>;
  state?: AddressToStateResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  subUrb?: AddressToSubUrbResolver<TParent>;
  zipCode?: AddressToZipCodeResolver<TParent>;
  addressLine1?: AddressToAddressLine1Resolver<TParent>;
  addressLine2?: AddressToAddressLine2Resolver<TParent>;
  phone?: AddressToPhoneResolver<TParent>;
  addressDetails?: AddressToAddressDetailsResolver<TParent>;
  isPrincipal?: AddressToIsPrincipalResolver<TParent>;
  id?: AddressToIdResolver<TParent>;
  createdAt?: AddressToCreatedAtResolver<TParent>;
  updatedAt?: AddressToUpdatedAtResolver<TParent>;
}

export interface AddressToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToRFCResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToBusinessNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToAddressTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCountryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToSubUrbResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToZipCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToAddressLine1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToAddressLine2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToAddressDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToIsPrincipalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProductCollectionSegmentTypeResolver<TParent = any> {
  items?: ProductCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: ProductCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: ProductCollectionSegmentToTotalCountResolver<TParent>;
}

export interface ProductCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITaxonomyCollectionSegmentTypeResolver<TParent = any> {
  items?: TaxonomyCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: TaxonomyCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: TaxonomyCollectionSegmentToTotalCountResolver<TParent>;
}

export interface TaxonomyCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxonomyCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISeoDTOTypeResolver<TParent = any> {
  seo?: SeoDTOToSeoResolver<TParent>;
}

export interface SeoDTOToSeoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceCollectionSegmentTypeResolver<TParent = any> {
  items?: ServiceCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: ServiceCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: ServiceCollectionSegmentToTotalCountResolver<TParent>;
}

export interface ServiceCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceTypeResolver<TParent = any> {
  serviceQuizes?: ServiceToServiceQuizesResolver<TParent>;
  name?: ServiceToNameResolver<TParent>;
  description?: ServiceToDescriptionResolver<TParent>;
  projectId?: ServiceToProjectIdResolver<TParent>;
  id?: ServiceToIdResolver<TParent>;
  createdAt?: ServiceToCreatedAtResolver<TParent>;
  updatedAt?: ServiceToUpdatedAtResolver<TParent>;
}

export interface ServiceToServiceQuizesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceQuizTypeResolver<TParent = any> {
  quiz?: ServiceQuizToQuizResolver<TParent>;
  service?: ServiceQuizToServiceResolver<TParent>;
  serviceId?: ServiceQuizToServiceIdResolver<TParent>;
  quizId?: ServiceQuizToQuizIdResolver<TParent>;
  id?: ServiceQuizToIdResolver<TParent>;
  createdAt?: ServiceQuizToCreatedAtResolver<TParent>;
  updatedAt?: ServiceQuizToUpdatedAtResolver<TParent>;
}

export interface ServiceQuizToQuizResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizToServiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizToServiceIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizToQuizIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizTypeResolver<TParent = any> {
  serviceQuizes?: QuizToServiceQuizesResolver<TParent>;
  quizSections?: QuizToQuizSectionsResolver<TParent>;
  name?: QuizToNameResolver<TParent>;
  description?: QuizToDescriptionResolver<TParent>;
  projectId?: QuizToProjectIdResolver<TParent>;
  id?: QuizToIdResolver<TParent>;
  createdAt?: QuizToCreatedAtResolver<TParent>;
  updatedAt?: QuizToUpdatedAtResolver<TParent>;
}

export interface QuizToServiceQuizesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToQuizSectionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizSectionTypeResolver<TParent = any> {
  quizQuestions?: QuizSectionToQuizQuestionsResolver<TParent>;
  quiz?: QuizSectionToQuizResolver<TParent>;
  name?: QuizSectionToNameResolver<TParent>;
  description?: QuizSectionToDescriptionResolver<TParent>;
  quizId?: QuizSectionToQuizIdResolver<TParent>;
  id?: QuizSectionToIdResolver<TParent>;
  createdAt?: QuizSectionToCreatedAtResolver<TParent>;
  updatedAt?: QuizSectionToUpdatedAtResolver<TParent>;
}

export interface QuizSectionToQuizQuestionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToQuizResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToQuizIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizQuestionTypeResolver<TParent = any> {
  quizSection?: QuizQuestionToQuizSectionResolver<TParent>;
  quizQuestionAnswers?: QuizQuestionToQuizQuestionAnswersResolver<TParent>;
  quizMembers?: QuizQuestionToQuizMembersResolver<TParent>;
  question?: QuizQuestionToQuestionResolver<TParent>;
  questionType?: QuizQuestionToQuestionTypeResolver<TParent>;
  active?: QuizQuestionToActiveResolver<TParent>;
  memberId?: QuizQuestionToMemberIdResolver<TParent>;
  quizSectionId?: QuizQuestionToQuizSectionIdResolver<TParent>;
  id?: QuizQuestionToIdResolver<TParent>;
  createdAt?: QuizQuestionToCreatedAtResolver<TParent>;
  updatedAt?: QuizQuestionToUpdatedAtResolver<TParent>;
}

export interface QuizQuestionToQuizSectionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToQuizQuestionAnswersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToQuizMembersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToQuestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToQuestionTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToQuizSectionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizQuestionAnswerTypeResolver<TParent = any> {
  quizAnswer?: QuizQuestionAnswerToQuizAnswerResolver<TParent>;
  quizQuestion?: QuizQuestionAnswerToQuizQuestionResolver<TParent>;
  quizQuestionId?: QuizQuestionAnswerToQuizQuestionIdResolver<TParent>;
  quizAnswerId?: QuizQuestionAnswerToQuizAnswerIdResolver<TParent>;
  id?: QuizQuestionAnswerToIdResolver<TParent>;
  createdAt?: QuizQuestionAnswerToCreatedAtResolver<TParent>;
  updatedAt?: QuizQuestionAnswerToUpdatedAtResolver<TParent>;
}

export interface QuizQuestionAnswerToQuizAnswerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerToQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerToQuizQuestionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerToQuizAnswerIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizAnswerTypeResolver<TParent = any> {
  quizQuestionAnswers?: QuizAnswerToQuizQuestionAnswersResolver<TParent>;
  description?: QuizAnswerToDescriptionResolver<TParent>;
  active?: QuizAnswerToActiveResolver<TParent>;
  id?: QuizAnswerToIdResolver<TParent>;
  createdAt?: QuizAnswerToCreatedAtResolver<TParent>;
  updatedAt?: QuizAnswerToUpdatedAtResolver<TParent>;
}

export interface QuizAnswerToQuizQuestionAnswersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberTypeResolver<TParent = any> {
  quizMemberDescriptions?: QuizMemberToQuizMemberDescriptionsResolver<TParent>;
  quizMemberAnswers?: QuizMemberToQuizMemberAnswersResolver<TParent>;
  quizQuestion?: QuizMemberToQuizQuestionResolver<TParent>;
  quizQuestionId?: QuizMemberToQuizQuestionIdResolver<TParent>;
  memberId?: QuizMemberToMemberIdResolver<TParent>;
  active?: QuizMemberToActiveResolver<TParent>;
  id?: QuizMemberToIdResolver<TParent>;
  createdAt?: QuizMemberToCreatedAtResolver<TParent>;
  updatedAt?: QuizMemberToUpdatedAtResolver<TParent>;
}

export interface QuizMemberToQuizMemberDescriptionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToQuizMemberAnswersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToQuizQuestionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberDescriptionTypeResolver<TParent = any> {
  quizMember?: QuizMemberDescriptionToQuizMemberResolver<TParent>;
  quizMemberId?: QuizMemberDescriptionToQuizMemberIdResolver<TParent>;
  description?: QuizMemberDescriptionToDescriptionResolver<TParent>;
  active?: QuizMemberDescriptionToActiveResolver<TParent>;
  id?: QuizMemberDescriptionToIdResolver<TParent>;
  createdAt?: QuizMemberDescriptionToCreatedAtResolver<TParent>;
  updatedAt?: QuizMemberDescriptionToUpdatedAtResolver<TParent>;
}

export interface QuizMemberDescriptionToQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionToQuizMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionToActiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberAnswerTypeResolver<TParent = any> {
  quizMember?: QuizMemberAnswerToQuizMemberResolver<TParent>;
  quizAnswer?: QuizMemberAnswerToQuizAnswerResolver<TParent>;
  quizMemberId?: QuizMemberAnswerToQuizMemberIdResolver<TParent>;
  quizAnswerId?: QuizMemberAnswerToQuizAnswerIdResolver<TParent>;
  active?: QuizMemberAnswerToActiveResolver<TParent>;
  id?: QuizMemberAnswerToIdResolver<TParent>;
  createdAt?: QuizMemberAnswerToCreatedAtResolver<TParent>;
  updatedAt?: QuizMemberAnswerToUpdatedAtResolver<TParent>;
}

export interface QuizMemberAnswerToQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToQuizAnswerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToQuizMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToQuizAnswerIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToActiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceQuizCollectionSegmentTypeResolver<TParent = any> {
  items?: ServiceQuizCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: ServiceQuizCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: ServiceQuizCollectionSegmentToTotalCountResolver<TParent>;
}

export interface ServiceQuizCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceQuizCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizCollectionSegmentTypeResolver<TParent = any> {
  items?: QuizCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizSectionCollectionSegmentTypeResolver<TParent = any> {
  items?: QuizSectionCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizSectionCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizSectionCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizSectionCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizSectionCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizQuestionCollectionSegmentTypeResolver<TParent = any> {
  items?: QuizQuestionCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizQuestionCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizQuestionCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizQuestionCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizQuestionAnswerCollectionSegmentTypeResolver<
  TParent = any
> {
  items?: QuizQuestionAnswerCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizQuestionAnswerCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizQuestionAnswerCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizQuestionAnswerCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizQuestionAnswerCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizAnswerCollectionSegmentTypeResolver<TParent = any> {
  items?: QuizAnswerCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizAnswerCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizAnswerCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizAnswerCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizAnswerCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberCollectionSegmentTypeResolver<TParent = any> {
  items?: QuizMemberCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizMemberCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizMemberCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizMemberCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberAnswerCollectionSegmentTypeResolver<TParent = any> {
  items?: QuizMemberAnswerCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizMemberAnswerCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizMemberAnswerCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizMemberAnswerCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberAnswerCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberDescriptionCollectionSegmentTypeResolver<
  TParent = any
> {
  items?: QuizMemberDescriptionCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuizMemberDescriptionCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuizMemberDescriptionCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuizMemberDescriptionCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuizMemberDescriptionCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IContactEmailTypeResolver<TParent = any> {
  fullName?: ContactEmailToFullNameResolver<TParent>;
  email?: ContactEmailToEmailResolver<TParent>;
  sendGridKey?: ContactEmailToSendGridKeyResolver<TParent>;
  fromEmail?: ContactEmailToFromEmailResolver<TParent>;
  fromName?: ContactEmailToFromNameResolver<TParent>;
  sendGridTemplateId?: ContactEmailToSendGridTemplateIdResolver<TParent>;
  description?: ContactEmailToDescriptionResolver<TParent>;
  projectId?: ContactEmailToProjectIdResolver<TParent>;
  id?: ContactEmailToIdResolver<TParent>;
  createdAt?: ContactEmailToCreatedAtResolver<TParent>;
  updatedAt?: ContactEmailToUpdatedAtResolver<TParent>;
}

export interface ContactEmailToFullNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToSendGridKeyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToFromEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToFromNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToSendGridTemplateIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactEmailToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITransactionCollectionSegmentTypeResolver<TParent = any> {
  items?: TransactionCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: TransactionCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: TransactionCollectionSegmentToTotalCountResolver<TParent>;
}

export interface TransactionCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITransactionTypeResolver<TParent = any> {
  projectId?: TransactionToProjectIdResolver<TParent>;
  memberId?: TransactionToMemberIdResolver<TParent>;
  transactionNumber?: TransactionToTransactionNumberResolver<TParent>;
  transactionRequest?: TransactionToTransactionRequestResolver<TParent>;
  transactionToken?: TransactionToTransactionTokenResolver<TParent>;
  transactionType?: TransactionToTransactionTypeResolver<TParent>;
  transactionStatus?: TransactionToTransactionStatusResolver<TParent>;
  amount?: TransactionToAmountResolver<TParent>;
  trasactionResponse?: TransactionToTrasactionResponseResolver<TParent>;
  invoiceId?: TransactionToInvoiceIdResolver<TParent>;
  invoice?: TransactionToInvoiceResolver<TParent>;
  methodPaymentId?: TransactionToMethodPaymentIdResolver<TParent>;
  methodPayment?: TransactionToMethodPaymentResolver<TParent>;
  id?: TransactionToIdResolver<TParent>;
  createdAt?: TransactionToCreatedAtResolver<TParent>;
  updatedAt?: TransactionToUpdatedAtResolver<TParent>;
}

export interface TransactionToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTransactionNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTransactionRequestResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTransactionTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTransactionTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTransactionStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTrasactionResponseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToInvoiceIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToInvoiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToMethodPaymentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInvoiceTypeResolver<TParent = any> {
  invoiceNumber?: InvoiceToInvoiceNumberResolver<TParent>;
  invoiceStatus?: InvoiceToInvoiceStatusResolver<TParent>;
  projectId?: InvoiceToProjectIdResolver<TParent>;
  memberId?: InvoiceToMemberIdResolver<TParent>;
  invoiceDate?: InvoiceToInvoiceDateResolver<TParent>;
  observations?: InvoiceToObservationsResolver<TParent>;
  subTotal?: InvoiceToSubTotalResolver<TParent>;
  shippingSale?: InvoiceToShippingSaleResolver<TParent>;
  discount?: InvoiceToDiscountResolver<TParent>;
  total?: InvoiceToTotalResolver<TParent>;
  addressId?: InvoiceToAddressIdResolver<TParent>;
  details?: InvoiceToDetailsResolver<TParent>;
  id?: InvoiceToIdResolver<TParent>;
  createdAt?: InvoiceToCreatedAtResolver<TParent>;
  updatedAt?: InvoiceToUpdatedAtResolver<TParent>;
  address?: InvoiceToAddressResolver<TParent>;
}

export interface InvoiceToInvoiceNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToInvoiceStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToInvoiceDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToObservationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToSubTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToShippingSaleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToAddressIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInvoiceDetailTypeResolver<TParent = any> {
  invoiceId?: InvoiceDetailToInvoiceIdResolver<TParent>;
  invoice?: InvoiceDetailToInvoiceResolver<TParent>;
  productId?: InvoiceDetailToProductIdResolver<TParent>;
  quantity?: InvoiceDetailToQuantityResolver<TParent>;
  salePrice?: InvoiceDetailToSalePriceResolver<TParent>;
  totalPrice?: InvoiceDetailToTotalPriceResolver<TParent>;
  id?: InvoiceDetailToIdResolver<TParent>;
  createdAt?: InvoiceDetailToCreatedAtResolver<TParent>;
  updatedAt?: InvoiceDetailToUpdatedAtResolver<TParent>;
}

export interface InvoiceDetailToInvoiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToInvoiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToProductIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToSalePriceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToTotalPriceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceDetailToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMethodPaymentTypeResolver<TParent = any> {
  projectId?: MethodPaymentToProjectIdResolver<TParent>;
  memberId?: MethodPaymentToMemberIdResolver<TParent>;
  alias?: MethodPaymentToAliasResolver<TParent>;
  privateKey?: MethodPaymentToPrivateKeyResolver<TParent>;
  publicKey?: MethodPaymentToPublicKeyResolver<TParent>;
  active?: MethodPaymentToActiveResolver<TParent>;
  servicePayment?: MethodPaymentToServicePaymentResolver<TParent>;
  id?: MethodPaymentToIdResolver<TParent>;
  createdAt?: MethodPaymentToCreatedAtResolver<TParent>;
  updatedAt?: MethodPaymentToUpdatedAtResolver<TParent>;
}

export interface MethodPaymentToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToAliasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToPrivateKeyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToPublicKeyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToServicePaymentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMethodPaymentCollectionSegmentTypeResolver<TParent = any> {
  items?: MethodPaymentCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: MethodPaymentCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: MethodPaymentCollectionSegmentToTotalCountResolver<TParent>;
}

export interface MethodPaymentCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MethodPaymentCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlanCollectionSegmentTypeResolver<TParent = any> {
  items?: PlanCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: PlanCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: PlanCollectionSegmentToTotalCountResolver<TParent>;
}

export interface PlanCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPlanTypeResolver<TParent = any> {
  projectId?: PlanToProjectIdResolver<TParent>;
  description?: PlanToDescriptionResolver<TParent>;
  code?: PlanToCodeResolver<TParent>;
  codeStripe?: PlanToCodeStripeResolver<TParent>;
  status?: PlanToStatusResolver<TParent>;
  amount?: PlanToAmountResolver<TParent>;
  id?: PlanToIdResolver<TParent>;
  createdAt?: PlanToCreatedAtResolver<TParent>;
  updatedAt?: PlanToUpdatedAtResolver<TParent>;
}

export interface PlanToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToCodeStripeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlanToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInvoiceCollectionSegmentTypeResolver<TParent = any> {
  items?: InvoiceCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: InvoiceCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: InvoiceCollectionSegmentToTotalCountResolver<TParent>;
}

export interface InvoiceCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IComponentTypeResolver<TParent = any> {
  keyName?: ComponentToKeyNameResolver<TParent>;
  services?: ComponentToServicesResolver<TParent>;
  description?: ComponentToDescriptionResolver<TParent>;
  id?: ComponentToIdResolver<TParent>;
  createdAt?: ComponentToCreatedAtResolver<TParent>;
  updatedAt?: ComponentToUpdatedAtResolver<TParent>;
}

export interface ComponentToKeyNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToServicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IWebsitePageTypeResolver<TParent = any> {
  projectId?: WebsitePageToProjectIdResolver<TParent>;
  name?: WebsitePageToNameResolver<TParent>;
  url?: WebsitePageToUrlResolver<TParent>;
  seoWebSitePage?: WebsitePageToSeoWebSitePageResolver<TParent>;
  description?: WebsitePageToDescriptionResolver<TParent>;
  isActive?: WebsitePageToIsActiveResolver<TParent>;
  scriptHead?: WebsitePageToScriptHeadResolver<TParent>;
  scriptFooter?: WebsitePageToScriptFooterResolver<TParent>;
  position?: WebsitePageToPositionResolver<TParent>;
  websitePageComponents?: WebsitePageToWebsitePageComponentsResolver<TParent>;
  websitePageSeos?: WebsitePageToWebsitePageSeosResolver<TParent>;
  id?: WebsitePageToIdResolver<TParent>;
  createdAt?: WebsitePageToCreatedAtResolver<TParent>;
  updatedAt?: WebsitePageToUpdatedAtResolver<TParent>;
}

export interface WebsitePageToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToSeoWebSitePageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToScriptHeadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToScriptFooterResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToWebsitePageComponentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToWebsitePageSeosResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IWebsitePageComponentTypeResolver<TParent = any> {
  websitePageId?: WebsitePageComponentToWebsitePageIdResolver<TParent>;
  websitePage?: WebsitePageComponentToWebsitePageResolver<TParent>;
  keyName?: WebsitePageComponentToKeyNameResolver<TParent>;
  props?: WebsitePageComponentToPropsResolver<TParent>;
  position?: WebsitePageComponentToPositionResolver<TParent>;
  parentId?: WebsitePageComponentToParentIdResolver<TParent>;
  id?: WebsitePageComponentToIdResolver<TParent>;
  createdAt?: WebsitePageComponentToCreatedAtResolver<TParent>;
  updatedAt?: WebsitePageComponentToUpdatedAtResolver<TParent>;
}

export interface WebsitePageComponentToWebsitePageIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToWebsitePageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToKeyNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToPropsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToPositionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToParentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageComponentToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IWebsitePageSeoTypeResolver<TParent = any> {
  websitePageId?: WebsitePageSeoToWebsitePageIdResolver<TParent>;
  websitePage?: WebsitePageSeoToWebsitePageResolver<TParent>;
  title?: WebsitePageSeoToTitleResolver<TParent>;
  description?: WebsitePageSeoToDescriptionResolver<TParent>;
  keywords?: WebsitePageSeoToKeywordsResolver<TParent>;
  canonicalUrl?: WebsitePageSeoToCanonicalUrlResolver<TParent>;
  robots?: WebsitePageSeoToRobotsResolver<TParent>;
  googlebot?: WebsitePageSeoToGooglebotResolver<TParent>;
  author?: WebsitePageSeoToAuthorResolver<TParent>;
  language?: WebsitePageSeoToLanguageResolver<TParent>;
  twitterCard?: WebsitePageSeoToTwitterCardResolver<TParent>;
  twitterSite?: WebsitePageSeoToTwitterSiteResolver<TParent>;
  twitterCreator?: WebsitePageSeoToTwitterCreatorResolver<TParent>;
  twitterTitle?: WebsitePageSeoToTwitterTitleResolver<TParent>;
  twitterDescription?: WebsitePageSeoToTwitterDescriptionResolver<TParent>;
  twitterUrl?: WebsitePageSeoToTwitterUrlResolver<TParent>;
  twitterImageAlt?: WebsitePageSeoToTwitterImageAltResolver<TParent>;
  twitterImageTitle?: WebsitePageSeoToTwitterImageTitleResolver<TParent>;
  twitterImageWidth?: WebsitePageSeoToTwitterImageWidthResolver<TParent>;
  twitterImageHeight?: WebsitePageSeoToTwitterImageHeightResolver<TParent>;
  twitterImage?: WebsitePageSeoToTwitterImageResolver<TParent>;
  openGraphTitle?: WebsitePageSeoToOpenGraphTitleResolver<TParent>;
  openGraphDescription?: WebsitePageSeoToOpenGraphDescriptionResolver<TParent>;
  openGraphUrl?: WebsitePageSeoToOpenGraphUrlResolver<TParent>;
  openGraphImageAlt?: WebsitePageSeoToOpenGraphImageAltResolver<TParent>;
  openGraphImageTitle?: WebsitePageSeoToOpenGraphImageTitleResolver<TParent>;
  openGraphImageWidth?: WebsitePageSeoToOpenGraphImageWidthResolver<TParent>;
  openGraphImageHeight?: WebsitePageSeoToOpenGraphImageHeightResolver<TParent>;
  openGraphImage?: WebsitePageSeoToOpenGraphImageResolver<TParent>;
  openGraphType?: WebsitePageSeoToOpenGraphTypeResolver<TParent>;
  openGraphSiteName?: WebsitePageSeoToOpenGraphSiteNameResolver<TParent>;
  openGraphFacebookAppId?: WebsitePageSeoToOpenGraphFacebookAppIdResolver<TParent>;
  id?: WebsitePageSeoToIdResolver<TParent>;
  createdAt?: WebsitePageSeoToCreatedAtResolver<TParent>;
  updatedAt?: WebsitePageSeoToUpdatedAtResolver<TParent>;
}

export interface WebsitePageSeoToWebsitePageIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToWebsitePageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToKeywordsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToCanonicalUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToRobotsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToGooglebotResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToLanguageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterCardResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterSiteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterCreatorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterTitleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterImageAltResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterImageTitleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterImageWidthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterImageHeightResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToTwitterImageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphTitleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphImageAltResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphImageTitleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphImageWidthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphImageHeightResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphImageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphSiteNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToOpenGraphFacebookAppIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsitePageSeoToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVideoRoomTypeResolver<TParent = any> {
  projectId?: VideoRoomToProjectIdResolver<TParent>;
  sessionId?: VideoRoomToSessionIdResolver<TParent>;
  sessionName?: VideoRoomToSessionNameResolver<TParent>;
  url?: VideoRoomToUrlResolver<TParent>;
  creatorName?: VideoRoomToCreatorNameResolver<TParent>;
  creatorEmail?: VideoRoomToCreatorEmailResolver<TParent>;
  videoRoomMembers?: VideoRoomToVideoRoomMembersResolver<TParent>;
  id?: VideoRoomToIdResolver<TParent>;
  createdAt?: VideoRoomToCreatedAtResolver<TParent>;
  updatedAt?: VideoRoomToUpdatedAtResolver<TParent>;
}

export interface VideoRoomToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToSessionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToSessionNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToCreatorNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToCreatorEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToVideoRoomMembersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVideoRoomMemberTypeResolver<TParent = any> {
  videoRoomId?: VideoRoomMemberToVideoRoomIdResolver<TParent>;
  videoRoom?: VideoRoomMemberToVideoRoomResolver<TParent>;
  fullName?: VideoRoomMemberToFullNameResolver<TParent>;
  email?: VideoRoomMemberToEmailResolver<TParent>;
  photo?: VideoRoomMemberToPhotoResolver<TParent>;
  id?: VideoRoomMemberToIdResolver<TParent>;
  createdAt?: VideoRoomMemberToCreatedAtResolver<TParent>;
  updatedAt?: VideoRoomMemberToUpdatedAtResolver<TParent>;
}

export interface VideoRoomMemberToVideoRoomIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToVideoRoomResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToFullNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoRoomMemberToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVideoCallTypeResolver<TParent = any> {
  projectId?: VideoCallToProjectIdResolver<TParent>;
  memberId?: VideoCallToMemberIdResolver<TParent>;
  sessionId?: VideoCallToSessionIdResolver<TParent>;
  sessionName?: VideoCallToSessionNameResolver<TParent>;
  url?: VideoCallToUrlResolver<TParent>;
  members?: VideoCallToMembersResolver<TParent>;
  services?: VideoCallToServicesResolver<TParent>;
  id?: VideoCallToIdResolver<TParent>;
  createdAt?: VideoCallToCreatedAtResolver<TParent>;
  updatedAt?: VideoCallToUpdatedAtResolver<TParent>;
}

export interface VideoCallToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToSessionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToSessionNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToServicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVideoCallMemberTypeResolver<TParent = any> {
  videoCallId?: VideoCallMemberToVideoCallIdResolver<TParent>;
  videoCall?: VideoCallMemberToVideoCallResolver<TParent>;
  memberId?: VideoCallMemberToMemberIdResolver<TParent>;
  id?: VideoCallMemberToIdResolver<TParent>;
  createdAt?: VideoCallMemberToCreatedAtResolver<TParent>;
  updatedAt?: VideoCallMemberToUpdatedAtResolver<TParent>;
}

export interface VideoCallMemberToVideoCallIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallMemberToVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallMemberToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallMemberToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallMemberToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallMemberToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVideoCallServiceTypeResolver<TParent = any> {
  videoCallId?: VideoCallServiceToVideoCallIdResolver<TParent>;
  videoCall?: VideoCallServiceToVideoCallResolver<TParent>;
  serviceCode?: VideoCallServiceToServiceCodeResolver<TParent>;
  viewAdmin?: VideoCallServiceToViewAdminResolver<TParent>;
  viewUser?: VideoCallServiceToViewUserResolver<TParent>;
  id?: VideoCallServiceToIdResolver<TParent>;
  createdAt?: VideoCallServiceToCreatedAtResolver<TParent>;
  updatedAt?: VideoCallServiceToUpdatedAtResolver<TParent>;
}

export interface VideoCallServiceToVideoCallIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToServiceCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToViewAdminResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToViewUserResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoCallServiceToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVideoTypeResolver<TParent = any> {
  sessionId?: VideoToSessionIdResolver<TParent>;
  token?: VideoToTokenResolver<TParent>;
  videoCall?: VideoToVideoCallResolver<TParent>;
}

export interface VideoToSessionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoToVideoCallResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IStadisticsResultTypeResolver<TParent = any> {
  name?: StadisticsResultToNameResolver<TParent>;
  hg?: StadisticsResultToHgResolver<TParent>;
  percentaje?: StadisticsResultToPercentajeResolver<TParent>;
  color?: StadisticsResultToColorResolver<TParent>;
}

export interface StadisticsResultToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StadisticsResultToHgResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StadisticsResultToPercentajeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StadisticsResultToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListRQuoterProfilesByProjectIdConnectionTypeResolver<
  TParent = any
> {
  pageInfo?: ListRQuoterProfilesByProjectIdConnectionToPageInfoResolver<TParent>;
  edges?: ListRQuoterProfilesByProjectIdConnectionToEdgesResolver<TParent>;
  nodes?: ListRQuoterProfilesByProjectIdConnectionToNodesResolver<TParent>;
  totalCount?: ListRQuoterProfilesByProjectIdConnectionToTotalCountResolver<TParent>;
}

export interface ListRQuoterProfilesByProjectIdConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesByProjectIdConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesByProjectIdConnectionToNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesByProjectIdConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListRQuoterProfilesByProjectIdEdgeTypeResolver<
  TParent = any
> {
  cursor?: ListRQuoterProfilesByProjectIdEdgeToCursorResolver<TParent>;
  node?: ListRQuoterProfilesByProjectIdEdgeToNodeResolver<TParent>;
}

export interface ListRQuoterProfilesByProjectIdEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesByProjectIdEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoterProfileTypeResolver<TParent = any> {
  projectId?: QuoterProfileToProjectIdResolver<TParent>;
  name?: QuoterProfileToNameResolver<TParent>;
  officeId?: QuoterProfileToOfficeIdResolver<TParent>;
  office?: QuoterProfileToOfficeResolver<TParent>;
  quoterProfileInsurers?: QuoterProfileToQuoterProfileInsurersResolver<TParent>;
  id?: QuoterProfileToIdResolver<TParent>;
  createdAt?: QuoterProfileToCreatedAtResolver<TParent>;
  updatedAt?: QuoterProfileToUpdatedAtResolver<TParent>;
}

export interface QuoterProfileToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToOfficeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToQuoterProfileInsurersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOfficeTypeResolver<TParent = any> {
  projectId?: OfficeToProjectIdResolver<TParent>;
  name?: OfficeToNameResolver<TParent>;
  description?: OfficeToDescriptionResolver<TParent>;
  id?: OfficeToIdResolver<TParent>;
  createdAt?: OfficeToCreatedAtResolver<TParent>;
  updatedAt?: OfficeToUpdatedAtResolver<TParent>;
}

export interface OfficeToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoterProfileInsurerTypeResolver<TParent = any> {
  projectId?: QuoterProfileInsurerToProjectIdResolver<TParent>;
  quoterProfileId?: QuoterProfileInsurerToQuoterProfileIdResolver<TParent>;
  quoterProfile?: QuoterProfileInsurerToQuoterProfileResolver<TParent>;
  insurerId?: QuoterProfileInsurerToInsurerIdResolver<TParent>;
  insurer?: QuoterProfileInsurerToInsurerResolver<TParent>;
  percentageBase?: QuoterProfileInsurerToPercentageBaseResolver<TParent>;
  percentageMax?: QuoterProfileInsurerToPercentageMaxResolver<TParent>;
  portalAgentQuote?: QuoterProfileInsurerToPortalAgentQuoteResolver<TParent>;
  portalAgentEmits?: QuoterProfileInsurerToPortalAgentEmitsResolver<TParent>;
  portalPublicQuote?: QuoterProfileInsurerToPortalPublicQuoteResolver<TParent>;
  portalPublicEmits?: QuoterProfileInsurerToPortalPublicEmitsResolver<TParent>;
  id?: QuoterProfileInsurerToIdResolver<TParent>;
  createdAt?: QuoterProfileInsurerToCreatedAtResolver<TParent>;
  updatedAt?: QuoterProfileInsurerToUpdatedAtResolver<TParent>;
}

export interface QuoterProfileInsurerToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToQuoterProfileIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToQuoterProfileResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToInsurerIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToInsurerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToPercentageBaseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToPercentageMaxResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToPortalAgentQuoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToPortalAgentEmitsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToPortalPublicQuoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToPortalPublicEmitsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileInsurerToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInsurerTypeResolver<TParent = any> {
  projectId?: InsurerToProjectIdResolver<TParent>;
  insurerServiceId?: InsurerToInsurerServiceIdResolver<TParent>;
  insurerService?: InsurerToInsurerServiceResolver<TParent>;
  name?: InsurerToNameResolver<TParent>;
  percentageMax?: InsurerToPercentageMaxResolver<TParent>;
  id?: InsurerToIdResolver<TParent>;
  createdAt?: InsurerToCreatedAtResolver<TParent>;
  updatedAt?: InsurerToUpdatedAtResolver<TParent>;
}

export interface InsurerToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToInsurerServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToInsurerServiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToPercentageMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInsurerServiceTypeResolver<TParent = any> {
  name?: InsurerServiceToNameResolver<TParent>;
  codeName?: InsurerServiceToCodeNameResolver<TParent>;
  script?: InsurerServiceToScriptResolver<TParent>;
  template?: InsurerServiceToTemplateResolver<TParent>;
  autos?: InsurerServiceToAutosResolver<TParent>;
  type?: InsurerServiceToTypeResolver<TParent>;
  module?: InsurerServiceToModuleResolver<TParent>;
  priority?: InsurerServiceToPriorityResolver<TParent>;
  color?: InsurerServiceToColorResolver<TParent>;
  logo?: InsurerServiceToLogoResolver<TParent>;
  insurerServiceCredentials?: InsurerServiceToInsurerServiceCredentialsResolver<TParent>;
  insurerServiceEnvironments?: InsurerServiceToInsurerServiceEnvironmentsResolver<TParent>;
  insurers?: InsurerServiceToInsurersResolver<TParent>;
  id?: InsurerServiceToIdResolver<TParent>;
  createdAt?: InsurerServiceToCreatedAtResolver<TParent>;
  updatedAt?: InsurerServiceToUpdatedAtResolver<TParent>;
}

export interface InsurerServiceToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToCodeNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToScriptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToTemplateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToAutosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToModuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToPriorityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToInsurerServiceCredentialsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToInsurerServiceEnvironmentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToInsurersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInsurerServiceCredentialTypeResolver<TParent = any> {
  projectId?: InsurerServiceCredentialToProjectIdResolver<TParent>;
  insurerServiceId?: InsurerServiceCredentialToInsurerServiceIdResolver<TParent>;
  insurerService?: InsurerServiceCredentialToInsurerServiceResolver<TParent>;
  conduit?: InsurerServiceCredentialToConduitResolver<TParent>;
  username?: InsurerServiceCredentialToUsernameResolver<TParent>;
  password?: InsurerServiceCredentialToPasswordResolver<TParent>;
  rate?: InsurerServiceCredentialToRateResolver<TParent>;
  agent?: InsurerServiceCredentialToAgentResolver<TParent>;
  group?: InsurerServiceCredentialToGroupResolver<TParent>;
  deal?: InsurerServiceCredentialToDealResolver<TParent>;
  office?: InsurerServiceCredentialToOfficeResolver<TParent>;
  cprogram?: InsurerServiceCredentialToCprogramResolver<TParent>;
  default?: InsurerServiceCredentialToDefaultResolver<TParent>;
  active?: InsurerServiceCredentialToActiveResolver<TParent>;
  extra?: InsurerServiceCredentialToExtraResolver<TParent>;
  discount?: InsurerServiceCredentialToDiscountResolver<TParent>;
  owner?: InsurerServiceCredentialToOwnerResolver<TParent>;
  environment?: InsurerServiceCredentialToEnvironmentResolver<TParent>;
  id?: InsurerServiceCredentialToIdResolver<TParent>;
  createdAt?: InsurerServiceCredentialToCreatedAtResolver<TParent>;
  updatedAt?: InsurerServiceCredentialToUpdatedAtResolver<TParent>;
}

export interface InsurerServiceCredentialToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToInsurerServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToInsurerServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToConduitResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToUsernameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToPasswordResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToRateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToAgentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToDealResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToOfficeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToCprogramResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToDefaultResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToActiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToExtraResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToDiscountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToOwnerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToEnvironmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceCredentialToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInsurerServiceEnvironmentTypeResolver<TParent = any> {
  insurerServiceId?: InsurerServiceEnvironmentToInsurerServiceIdResolver<TParent>;
  insurerService?: InsurerServiceEnvironmentToInsurerServiceResolver<TParent>;
  environment?: InsurerServiceEnvironmentToEnvironmentResolver<TParent>;
  reference?: InsurerServiceEnvironmentToReferenceResolver<TParent>;
  endPoint?: InsurerServiceEnvironmentToEndPointResolver<TParent>;
  id?: InsurerServiceEnvironmentToIdResolver<TParent>;
  createdAt?: InsurerServiceEnvironmentToCreatedAtResolver<TParent>;
  updatedAt?: InsurerServiceEnvironmentToUpdatedAtResolver<TParent>;
}

export interface InsurerServiceEnvironmentToInsurerServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToInsurerServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToEnvironmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToReferenceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToEndPointResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerServiceEnvironmentToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListRQuoterProfilesInsurerByProjectIdConnectionTypeResolver<
  TParent = any
> {
  pageInfo?: ListRQuoterProfilesInsurerByProjectIdConnectionToPageInfoResolver<TParent>;
  edges?: ListRQuoterProfilesInsurerByProjectIdConnectionToEdgesResolver<TParent>;
  nodes?: ListRQuoterProfilesInsurerByProjectIdConnectionToNodesResolver<TParent>;
  totalCount?: ListRQuoterProfilesInsurerByProjectIdConnectionToTotalCountResolver<TParent>;
}

export interface ListRQuoterProfilesInsurerByProjectIdConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesInsurerByProjectIdConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesInsurerByProjectIdConnectionToNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesInsurerByProjectIdConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListRQuoterProfilesInsurerByProjectIdEdgeTypeResolver<
  TParent = any
> {
  cursor?: ListRQuoterProfilesInsurerByProjectIdEdgeToCursorResolver<TParent>;
  node?: ListRQuoterProfilesInsurerByProjectIdEdgeToNodeResolver<TParent>;
}

export interface ListRQuoterProfilesInsurerByProjectIdEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListRQuoterProfilesInsurerByProjectIdEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IHomologatorTypeResolver<TParent = any> {
  abaCodeId?: HomologatorToAbaCodeIdResolver<TParent>;
  afirmeCodeId?: HomologatorToAfirmeCodeIdResolver<TParent>;
  aigCodeId?: HomologatorToAigCodeIdResolver<TParent>;
  anaCodeId?: HomologatorToAnaCodeIdResolver<TParent>;
  atlasCodeId?: HomologatorToAtlasCodeIdResolver<TParent>;
  axaCodeId?: HomologatorToAxaCodeIdResolver<TParent>;
  banorteCodeId?: HomologatorToBanorteCodeIdResolver<TParent>;
  gnpCodeId?: HomologatorToGnpCodeIdResolver<TParent>;
  hdiCodeId?: HomologatorToHdiCodeIdResolver<TParent>;
  potosiCodeId?: HomologatorToPotosiCodeIdResolver<TParent>;
  psCodeId?: HomologatorToPsCodeIdResolver<TParent>;
  qualitasCodeId?: HomologatorToQualitasCodeIdResolver<TParent>;
  zurichCodeId?: HomologatorToZurichCodeIdResolver<TParent>;
  mapfreCodeId?: HomologatorToMapfreCodeIdResolver<TParent>;
  id?: HomologatorToIdResolver<TParent>;
  createdAt?: HomologatorToCreatedAtResolver<TParent>;
  updatedAt?: HomologatorToUpdatedAtResolver<TParent>;
}

export interface HomologatorToAbaCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToAfirmeCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToAigCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToAnaCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToAtlasCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToAxaCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToBanorteCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToGnpCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToHdiCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToPotosiCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToPsCodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToQualitasCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToZurichCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToMapfreCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologatorToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCodeRelationTypeResolver<TParent = any> {
  id?: VehiclesCarCodeRelationToIdResolver<TParent>;
  abaCodeId?: VehiclesCarCodeRelationToAbaCodeIdResolver<TParent>;
  afirmeCodeId?: VehiclesCarCodeRelationToAfirmeCodeIdResolver<TParent>;
  aigCodeId?: VehiclesCarCodeRelationToAigCodeIdResolver<TParent>;
  anaCodeId?: VehiclesCarCodeRelationToAnaCodeIdResolver<TParent>;
  atlasCodeId?: VehiclesCarCodeRelationToAtlasCodeIdResolver<TParent>;
  axaCodeId?: VehiclesCarCodeRelationToAxaCodeIdResolver<TParent>;
  banorteCodeId?: VehiclesCarCodeRelationToBanorteCodeIdResolver<TParent>;
  gnpCodeId?: VehiclesCarCodeRelationToGnpCodeIdResolver<TParent>;
  hdiCodeId?: VehiclesCarCodeRelationToHdiCodeIdResolver<TParent>;
  potosiCodeId?: VehiclesCarCodeRelationToPotosiCodeIdResolver<TParent>;
  psCodeId?: VehiclesCarCodeRelationToPsCodeIdResolver<TParent>;
  qualitasCodeId?: VehiclesCarCodeRelationToQualitasCodeIdResolver<TParent>;
  zurichCodeId?: VehiclesCarCodeRelationToZurichCodeIdResolver<TParent>;
  mapfreCodeId?: VehiclesCarCodeRelationToMapfreCodeIdResolver<TParent>;
  abaCode?: VehiclesCarCodeRelationToAbaCodeResolver<TParent>;
  afirmeCode?: VehiclesCarCodeRelationToAfirmeCodeResolver<TParent>;
  aigCode?: VehiclesCarCodeRelationToAigCodeResolver<TParent>;
  anaCode?: VehiclesCarCodeRelationToAnaCodeResolver<TParent>;
  atlasCode?: VehiclesCarCodeRelationToAtlasCodeResolver<TParent>;
  axaCode?: VehiclesCarCodeRelationToAxaCodeResolver<TParent>;
  banorteCode?: VehiclesCarCodeRelationToBanorteCodeResolver<TParent>;
  gnpCode?: VehiclesCarCodeRelationToGnpCodeResolver<TParent>;
  hdiCode?: VehiclesCarCodeRelationToHdiCodeResolver<TParent>;
  mapfreCode?: VehiclesCarCodeRelationToMapfreCodeResolver<TParent>;
  potosiCode?: VehiclesCarCodeRelationToPotosiCodeResolver<TParent>;
  psCode?: VehiclesCarCodeRelationToPsCodeResolver<TParent>;
  qualitasCode?: VehiclesCarCodeRelationToQualitasCodeResolver<TParent>;
  zurichCode?: VehiclesCarCodeRelationToZurichCodeResolver<TParent>;
}

export interface VehiclesCarCodeRelationToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAbaCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAfirmeCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAigCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAnaCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAtlasCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAxaCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToBanorteCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToGnpCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToHdiCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToPotosiCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToPsCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToQualitasCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToZurichCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToMapfreCodeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAbaCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAfirmeCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAigCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAnaCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAtlasCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToAxaCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToBanorteCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToGnpCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToHdiCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToMapfreCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToPotosiCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToPsCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToQualitasCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCodeRelationToZurichCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAbaTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAbaToIdResolver<TParent>;
  brand?: VehiclesCarCatalogAbaToBrandResolver<TParent>;
  description?: VehiclesCarCatalogAbaToDescriptionResolver<TParent>;
  subbrand?: VehiclesCarCatalogAbaToSubbrandResolver<TParent>;
  occupants?: VehiclesCarCatalogAbaToOccupantsResolver<TParent>;
  type?: VehiclesCarCatalogAbaToTypeResolver<TParent>;
  vehiclesCarCatalogAbaCodeYears?: VehiclesCarCatalogAbaToVehiclesCarCatalogAbaCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogAbaToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogAbaToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToOccupantsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToVehiclesCarCatalogAbaCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAbaCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAbaCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogAbaCodeYearToYearResolver<TParent>;
  cveveh?: VehiclesCarCatalogAbaCodeYearToCvevehResolver<TParent>;
  carId?: VehiclesCarCatalogAbaCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogAbaCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogAbaCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaCodeYearToCvevehResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAbaCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAfirmeTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAfirmeToIdResolver<TParent>;
  brand?: VehiclesCarCatalogAfirmeToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogAfirmeToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogAfirmeToDescriptionResolver<TParent>;
  vehiclesCarCatalogAfirmeCodeYears?: VehiclesCarCatalogAfirmeToVehiclesCarCatalogAfirmeCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogAfirmeToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogAfirmeToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeToVehiclesCarCatalogAfirmeCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAfirmeCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAfirmeCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogAfirmeCodeYearToYearResolver<TParent>;
  cAfirme?: VehiclesCarCatalogAfirmeCodeYearToCAfirmeResolver<TParent>;
  carId?: VehiclesCarCatalogAfirmeCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogAfirmeCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogAfirmeCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeCodeYearToCAfirmeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAfirmeCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAigTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAigToIdResolver<TParent>;
  brand?: VehiclesCarCatalogAigToBrandResolver<TParent>;
  year?: VehiclesCarCatalogAigToYearResolver<TParent>;
  description?: VehiclesCarCatalogAigToDescriptionResolver<TParent>;
  subbrand?: VehiclesCarCatalogAigToSubbrandResolver<TParent>;
  vehiclesCarcoderelations?: VehiclesCarCatalogAigToVehiclesCarcoderelationsResolver<TParent>;
}

export interface VehiclesCarCatalogAigToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAigToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAigToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAigToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAigToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAigToVehiclesCarcoderelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAnaTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAnaToIdResolver<TParent>;
  subbrand?: VehiclesCarCatalogAnaToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogAnaToDescriptionResolver<TParent>;
  brand?: VehiclesCarCatalogAnaToBrandResolver<TParent>;
  vehiclesCarCatalogAnaCodeYears?: VehiclesCarCatalogAnaToVehiclesCarCatalogAnaCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogAnaToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogAnaToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaToVehiclesCarCatalogAnaCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAnaCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAnaCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogAnaCodeYearToYearResolver<TParent>;
  cAna?: VehiclesCarCatalogAnaCodeYearToCAnaResolver<TParent>;
  carId?: VehiclesCarCatalogAnaCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogAnaCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogAnaCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaCodeYearToCAnaResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAnaCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAtlaTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAtlaToIdResolver<TParent>;
  brand?: VehiclesCarCatalogAtlaToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogAtlaToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogAtlaToDescriptionResolver<TParent>;
  vehiclesCarCatalogAtlasCodeYears?: VehiclesCarCatalogAtlaToVehiclesCarCatalogAtlasCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogAtlaToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogAtlaToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlaToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlaToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlaToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlaToVehiclesCarCatalogAtlasCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlaToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAtlasCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAtlasCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogAtlasCodeYearToYearResolver<TParent>;
  cAtlas?: VehiclesCarCatalogAtlasCodeYearToCAtlasResolver<TParent>;
  carId?: VehiclesCarCatalogAtlasCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogAtlasCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogAtlasCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlasCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlasCodeYearToCAtlasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlasCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAtlasCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAxaTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAxaToIdResolver<TParent>;
  brand?: VehiclesCarCatalogAxaToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogAxaToSubbrandResolver<TParent>;
  descriptionLinea?: VehiclesCarCatalogAxaToDescriptionLineaResolver<TParent>;
  description?: VehiclesCarCatalogAxaToDescriptionResolver<TParent>;
  camis?: VehiclesCarCatalogAxaToCamisResolver<TParent>;
  categoria?: VehiclesCarCatalogAxaToCategoriaResolver<TParent>;
  segmento?: VehiclesCarCatalogAxaToSegmentoResolver<TParent>;
  brandId?: VehiclesCarCatalogAxaToBrandIdResolver<TParent>;
  versionId?: VehiclesCarCatalogAxaToVersionIdResolver<TParent>;
  versionIdSec?: VehiclesCarCatalogAxaToVersionIdSecResolver<TParent>;
  categoriaId?: VehiclesCarCatalogAxaToCategoriaIdResolver<TParent>;
  lineaId?: VehiclesCarCatalogAxaToLineaIdResolver<TParent>;
  vehiclesCarCatalogAxaCodeYears?: VehiclesCarCatalogAxaToVehiclesCarCatalogAxaCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogAxaToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogAxaToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToDescriptionLineaResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToCamisResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToCategoriaResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToSegmentoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToBrandIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToVersionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToVersionIdSecResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToCategoriaIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToLineaIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToVehiclesCarCatalogAxaCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogAxaCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogAxaCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogAxaCodeYearToYearResolver<TParent>;
  cAxa?: VehiclesCarCatalogAxaCodeYearToCAxaResolver<TParent>;
  carId?: VehiclesCarCatalogAxaCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogAxaCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogAxaCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaCodeYearToCAxaResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogAxaCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogBanorteTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogBanorteToIdResolver<TParent>;
  brand?: VehiclesCarCatalogBanorteToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogBanorteToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogBanorteToDescriptionResolver<TParent>;
  vehiclesCarCatalogBanorteCodeYears?: VehiclesCarCatalogBanorteToVehiclesCarCatalogBanorteCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogBanorteToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogBanorteToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteToVehiclesCarCatalogBanorteCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogBanorteCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogBanorteCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogBanorteCodeYearToYearResolver<TParent>;
  cBanorte?: VehiclesCarCatalogBanorteCodeYearToCBanorteResolver<TParent>;
  carId?: VehiclesCarCatalogBanorteCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogBanorteCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogBanorteCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteCodeYearToCBanorteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogBanorteCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogGnpTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogGnpToIdResolver<TParent>;
  brand?: VehiclesCarCatalogGnpToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogGnpToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogGnpToDescriptionResolver<TParent>;
  vehiclesCarCatalogGnpCodeYears?: VehiclesCarCatalogGnpToVehiclesCarCatalogGnpCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogGnpToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogGnpToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpToVehiclesCarCatalogGnpCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogGnpCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogGnpCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogGnpCodeYearToYearResolver<TParent>;
  cGnp?: VehiclesCarCatalogGnpCodeYearToCGnpResolver<TParent>;
  carId?: VehiclesCarCatalogGnpCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogGnpCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogGnpCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpCodeYearToCGnpResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogGnpCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogHdiTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogHdiToIdResolver<TParent>;
  brand?: VehiclesCarCatalogHdiToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogHdiToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogHdiToDescriptionResolver<TParent>;
  vehiclesCarCatalogHdiCodeYears?: VehiclesCarCatalogHdiToVehiclesCarCatalogHdiCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogHdiToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogHdiToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiToVehiclesCarCatalogHdiCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogHdiCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogHdiCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogHdiCodeYearToYearResolver<TParent>;
  cHdi?: VehiclesCarCatalogHdiCodeYearToCHdiResolver<TParent>;
  carId?: VehiclesCarCatalogHdiCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogHdiCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogHdiCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiCodeYearToCHdiResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogHdiCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogMapfreTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogMapfreToIdResolver<TParent>;
  brand?: VehiclesCarCatalogMapfreToBrandResolver<TParent>;
  description?: VehiclesCarCatalogMapfreToDescriptionResolver<TParent>;
  subbrand?: VehiclesCarCatalogMapfreToSubbrandResolver<TParent>;
  vehiclesCarCatalogMapfreCodeYears?: VehiclesCarCatalogMapfreToVehiclesCarCatalogMapfreCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogMapfreToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogMapfreToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreToVehiclesCarCatalogMapfreCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogMapfreCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogMapfreCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogMapfreCodeYearToYearResolver<TParent>;
  cMapfre?: VehiclesCarCatalogMapfreCodeYearToCMapfreResolver<TParent>;
  brand?: VehiclesCarCatalogMapfreCodeYearToBrandResolver<TParent>;
  carId?: VehiclesCarCatalogMapfreCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogMapfreCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogMapfreCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreCodeYearToCMapfreResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreCodeYearToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogMapfreCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogPotosiTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogPotosiToIdResolver<TParent>;
  brand?: VehiclesCarCatalogPotosiToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogPotosiToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogPotosiToDescriptionResolver<TParent>;
  cPotosi?: VehiclesCarCatalogPotosiToCPotosiResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogPotosiToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogPotosiToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPotosiToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPotosiToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPotosiToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPotosiToCPotosiResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPotosiToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogPTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogPToIdResolver<TParent>;
  brand?: VehiclesCarCatalogPToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogPToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogPToDescriptionResolver<TParent>;
  cPs?: VehiclesCarCatalogPToCPsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogPToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogPToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPToCPsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogPToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogQualitaTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogQualitaToIdResolver<TParent>;
  brand?: VehiclesCarCatalogQualitaToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogQualitaToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogQualitaToDescriptionResolver<TParent>;
  brandCode?: VehiclesCarCatalogQualitaToBrandCodeResolver<TParent>;
  vehiclesCarCatalogQualitasCodeYears?: VehiclesCarCatalogQualitaToVehiclesCarCatalogQualitasCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogQualitaToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogQualitaToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitaToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitaToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitaToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitaToBrandCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitaToVehiclesCarCatalogQualitasCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitaToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogQualitasCodeYearTypeResolver<
  TParent = any
> {
  id?: VehiclesCarCatalogQualitasCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogQualitasCodeYearToYearResolver<TParent>;
  cQualitas?: VehiclesCarCatalogQualitasCodeYearToCQualitasResolver<TParent>;
  carId?: VehiclesCarCatalogQualitasCodeYearToCarIdResolver<TParent>;
  car?: VehiclesCarCatalogQualitasCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogQualitasCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitasCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitasCodeYearToCQualitasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitasCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogQualitasCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogZurichTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogZurichToIdResolver<TParent>;
  brand?: VehiclesCarCatalogZurichToBrandResolver<TParent>;
  subbrand?: VehiclesCarCatalogZurichToSubbrandResolver<TParent>;
  description?: VehiclesCarCatalogZurichToDescriptionResolver<TParent>;
  vehiclesCarCatalogZurichCodeYears?: VehiclesCarCatalogZurichToVehiclesCarCatalogZurichCodeYearsResolver<TParent>;
  vehiclesCarCodeRelations?: VehiclesCarCatalogZurichToVehiclesCarCodeRelationsResolver<TParent>;
}

export interface VehiclesCarCatalogZurichToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichToBrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichToSubbrandResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichToVehiclesCarCatalogZurichCodeYearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichToVehiclesCarCodeRelationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVehiclesCarCatalogZurichCodeYearTypeResolver<TParent = any> {
  id?: VehiclesCarCatalogZurichCodeYearToIdResolver<TParent>;
  year?: VehiclesCarCatalogZurichCodeYearToYearResolver<TParent>;
  carId?: VehiclesCarCatalogZurichCodeYearToCarIdResolver<TParent>;
  cZurich?: VehiclesCarCatalogZurichCodeYearToCZurichResolver<TParent>;
  car?: VehiclesCarCatalogZurichCodeYearToCarResolver<TParent>;
}

export interface VehiclesCarCatalogZurichCodeYearToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichCodeYearToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichCodeYearToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichCodeYearToCZurichResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VehiclesCarCatalogZurichCodeYearToCarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoteCollectionSegmentTypeResolver<TParent = any> {
  items?: QuoteCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuoteCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuoteCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuoteCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoteTypeResolver<TParent = any> {
  car?: QuoteToCarResolver<TParent>;
  projectId?: QuoteToProjectIdResolver<TParent>;
  memberId?: QuoteToMemberIdResolver<TParent>;
  firstName?: QuoteToFirstNameResolver<TParent>;
  lastName?: QuoteToLastNameResolver<TParent>;
  phone?: QuoteToPhoneResolver<TParent>;
  email?: QuoteToEmailResolver<TParent>;
  address?: QuoteToAddressResolver<TParent>;
  hiredSame?: QuoteToHiredSameResolver<TParent>;
  hiredFirstName?: QuoteToHiredFirstNameResolver<TParent>;
  hiredLastName?: QuoteToHiredLastNameResolver<TParent>;
  hiredPhone?: QuoteToHiredPhoneResolver<TParent>;
  hiredEmail?: QuoteToHiredEmailResolver<TParent>;
  hiredAddress?: QuoteToHiredAddressResolver<TParent>;
  frecuency?: QuoteToFrecuencyResolver<TParent>;
  packageName?: QuoteToPackageNameResolver<TParent>;
  gender?: QuoteToGenderResolver<TParent>;
  zipCode?: QuoteToZipCodeResolver<TParent>;
  dateOfBirth?: QuoteToDateOfBirthResolver<TParent>;
  carCode?: QuoteToCarCodeResolver<TParent>;
  startValidity?: QuoteToStartValidityResolver<TParent>;
  endValidity?: QuoteToEndValidityResolver<TParent>;
  year?: QuoteToYearResolver<TParent>;
  discount?: QuoteToDiscountResolver<TParent>;
  coverage?: QuoteToCoverageResolver<TParent>;
  primalTotal?: QuoteToPrimalTotalResolver<TParent>;
  deductible?: QuoteToDeductibleResolver<TParent>;
  typeFrecuency?: QuoteToTypeFrecuencyResolver<TParent>;
  firstPay?: QuoteToFirstPayResolver<TParent>;
  secondPay?: QuoteToSecondPayResolver<TParent>;
  status?: QuoteToStatusResolver<TParent>;
  plaque?: QuoteToPlaqueResolver<TParent>;
  compensationValue?: QuoteToCompensationValueResolver<TParent>;
  serialNumber?: QuoteToSerialNumberResolver<TParent>;
  carId?: QuoteToCarIdResolver<TParent>;
  colony?: QuoteToColonyResolver<TParent>;
  town?: QuoteToTownResolver<TParent>;
  state?: QuoteToStateResolver<TParent>;
  stateId?: QuoteToStateIdResolver<TParent>;
  brand?: QuoteToBrandResolver<TParent>;
  subBrand?: QuoteToSubBrandResolver<TParent>;
  description?: QuoteToDescriptionResolver<TParent>;
  id?: QuoteToIdResolver<TParent>;
  createdAt?: QuoteToCreatedAtResolver<TParent>;
  updatedAt?: QuoteToUpdatedAtResolver<TParent>;
  member?: QuoteToMemberResolver<TParent>;
}

export interface QuoteToCarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToHiredSameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToHiredFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToHiredLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToHiredPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToHiredEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToHiredAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToFrecuencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToPackageNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToZipCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToDateOfBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToCarCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToStartValidityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToEndValidityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToCoverageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToPrimalTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToDeductibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToTypeFrecuencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToFirstPayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToSecondPayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToPlaqueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToCompensationValueResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToSerialNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToCarIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToColonyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToTownResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToStateIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToSubBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICarQuotationTypeResolver<TParent = any> {
  id?: CarQuotationToIdResolver<TParent>;
  brand?: CarQuotationToBrandResolver<TParent>;
  description?: CarQuotationToDescriptionResolver<TParent>;
  subbrand?: CarQuotationToSubbrandResolver<TParent>;
}

export interface CarQuotationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CarQuotationToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CarQuotationToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CarQuotationToSubbrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRegistrationTypeResolver<TParent = any> {
  projectId?: RegistrationToProjectIdResolver<TParent>;
  name?: RegistrationToNameResolver<TParent>;
  email?: RegistrationToEmailResolver<TParent>;
  state?: RegistrationToStateResolver<TParent>;
  city?: RegistrationToCityResolver<TParent>;
  tradename?: RegistrationToTradenameResolver<TParent>;
  company?: RegistrationToCompanyResolver<TParent>;
  interests?: RegistrationToInterestsResolver<TParent>;
  id?: RegistrationToIdResolver<TParent>;
  createdAt?: RegistrationToCreatedAtResolver<TParent>;
  updatedAt?: RegistrationToUpdatedAtResolver<TParent>;
}

export interface RegistrationToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToTradenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToInterestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistrationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoterTypeResolver<TParent = any> {
  quote?: QuoterToQuoteResolver<TParent>;
  services?: QuoterToServicesResolver<TParent>;
}

export interface QuoterToQuoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterToServicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IGenericsServiceTypeResolver<TParent = any> {
  registerUser?: GenericsServiceToRegisterUserResolver<TParent>;
  runEmision?: GenericsServiceToRunEmisionResolver<TParent>;
  printPolice?: GenericsServiceToPrintPoliceResolver<TParent>;
  id?: GenericsServiceToIdResolver<TParent>;
  name?: GenericsServiceToNameResolver<TParent>;
  script?: GenericsServiceToScriptResolver<TParent>;
  template?: GenericsServiceToTemplateResolver<TParent>;
  autos?: GenericsServiceToAutosResolver<TParent>;
  type?: GenericsServiceToTypeResolver<TParent>;
  module?: GenericsServiceToModuleResolver<TParent>;
  priority?: GenericsServiceToPriorityResolver<TParent>;
  color?: GenericsServiceToColorResolver<TParent>;
  logo?: GenericsServiceToLogoResolver<TParent>;
  cotizacionCredentials?: GenericsServiceToCotizacionCredentialsResolver<TParent>;
  cotizacionPackages?: GenericsServiceToCotizacionPackagesResolver<TParent>;
  cotizacionQuotes?: GenericsServiceToCotizacionQuotesResolver<TParent>;
  coveragesCoverages?: GenericsServiceToCoveragesCoveragesResolver<TParent>;
}

export interface GenericsServiceToRegisterUserArgs {
  data: string;
}
export interface GenericsServiceToRegisterUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: GenericsServiceToRegisterUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface GenericsServiceToRunEmisionArgs {
  data: string;
}
export interface GenericsServiceToRunEmisionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: GenericsServiceToRunEmisionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface GenericsServiceToPrintPoliceArgs {
  quoteId: string;
}
export interface GenericsServiceToPrintPoliceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: GenericsServiceToPrintPoliceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface GenericsServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToScriptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToTemplateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToAutosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToModuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToPriorityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToCotizacionCredentialsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToCotizacionPackagesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToCotizacionQuotesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericsServiceToCoveragesCoveragesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceProcessPayloadTypeResolver<TParent = any> {
  name?: ServiceProcessPayloadToNameResolver<TParent>;
  error?: ServiceProcessPayloadToErrorResolver<TParent>;
  success?: ServiceProcessPayloadToSuccessResolver<TParent>;
  result?: ServiceProcessPayloadToResultResolver<TParent>;
}

export interface ServiceProcessPayloadToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceProcessPayloadToErrorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceProcessPayloadToSuccessResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ServiceProcessPayloadToResultResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICotizacionCredentialTypeResolver<TParent = any> {
  id?: CotizacionCredentialToIdResolver<TParent>;
  conduit?: CotizacionCredentialToConduitResolver<TParent>;
  username?: CotizacionCredentialToUsernameResolver<TParent>;
  password?: CotizacionCredentialToPasswordResolver<TParent>;
  rate?: CotizacionCredentialToRateResolver<TParent>;
  agent?: CotizacionCredentialToAgentResolver<TParent>;
  group?: CotizacionCredentialToGroupResolver<TParent>;
  deal?: CotizacionCredentialToDealResolver<TParent>;
  office?: CotizacionCredentialToOfficeResolver<TParent>;
  cprogram?: CotizacionCredentialToCprogramResolver<TParent>;
  default?: CotizacionCredentialToDefaultResolver<TParent>;
  active?: CotizacionCredentialToActiveResolver<TParent>;
  extra?: CotizacionCredentialToExtraResolver<TParent>;
  serviceId?: CotizacionCredentialToServiceIdResolver<TParent>;
  discount?: CotizacionCredentialToDiscountResolver<TParent>;
  owner?: CotizacionCredentialToOwnerResolver<TParent>;
  production?: CotizacionCredentialToProductionResolver<TParent>;
  service?: CotizacionCredentialToServiceResolver<TParent>;
}

export interface CotizacionCredentialToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToConduitResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToUsernameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToPasswordResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToRateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToAgentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToDealResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToOfficeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToCprogramResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToDefaultResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToActiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToExtraResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToDiscountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToOwnerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToProductionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCredentialToServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICotizacionPackageTypeResolver<TParent = any> {
  id?: CotizacionPackageToIdResolver<TParent>;
  sumassured?: CotizacionPackageToSumassuredResolver<TParent>;
  deductible?: CotizacionPackageToDeductibleResolver<TParent>;
  isbase?: CotizacionPackageToIsbaseResolver<TParent>;
  isactive?: CotizacionPackageToIsactiveResolver<TParent>;
  peroccupant?: CotizacionPackageToPeroccupantResolver<TParent>;
  coverageId?: CotizacionPackageToCoverageIdResolver<TParent>;
  packageId?: CotizacionPackageToPackageIdResolver<TParent>;
  serviceId?: CotizacionPackageToServiceIdResolver<TParent>;
  deductibleoptions?: CotizacionPackageToDeductibleoptionsResolver<TParent>;
  sumassuredoptions?: CotizacionPackageToSumassuredoptionsResolver<TParent>;
  priority?: CotizacionPackageToPriorityResolver<TParent>;
  coverage?: CotizacionPackageToCoverageResolver<TParent>;
  package?: CotizacionPackageToPackageResolver<TParent>;
  service?: CotizacionPackageToServiceResolver<TParent>;
}

export interface CotizacionPackageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToSumassuredResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToDeductibleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToIsbaseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToIsactiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToPeroccupantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToCoverageIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToPackageIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToDeductibleoptionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToSumassuredoptionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToPriorityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToCoverageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToPackageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionPackageToServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICoveragesCoverageTypeResolver<TParent = any> {
  id?: CoveragesCoverageToIdResolver<TParent>;
  code?: CoveragesCoverageToCodeResolver<TParent>;
  name?: CoveragesCoverageToNameResolver<TParent>;
  description?: CoveragesCoverageToDescriptionResolver<TParent>;
  insuranceId?: CoveragesCoverageToInsuranceIdResolver<TParent>;
  abbreviation?: CoveragesCoverageToAbbreviationResolver<TParent>;
  insurance?: CoveragesCoverageToInsuranceResolver<TParent>;
  cotizacionPackages?: CoveragesCoverageToCotizacionPackagesResolver<TParent>;
}

export interface CoveragesCoverageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToInsuranceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToAbbreviationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToInsuranceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesCoverageToCotizacionPackagesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICoveragesPackagesListTypeResolver<TParent = any> {
  id?: CoveragesPackagesListToIdResolver<TParent>;
  name?: CoveragesPackagesListToNameResolver<TParent>;
  description?: CoveragesPackagesListToDescriptionResolver<TParent>;
  ramo?: CoveragesPackagesListToRamoResolver<TParent>;
  active?: CoveragesPackagesListToActiveResolver<TParent>;
  cotizacionPackages?: CoveragesPackagesListToCotizacionPackagesResolver<TParent>;
}

export interface CoveragesPackagesListToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesPackagesListToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesPackagesListToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesPackagesListToRamoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesPackagesListToActiveResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoveragesPackagesListToCotizacionPackagesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICotizacionQuoteTypeResolver<TParent = any> {
  issued?: CotizacionQuoteToIssuedResolver<TParent>;
  id?: CotizacionQuoteToIdResolver<TParent>;
  createdAt?: CotizacionQuoteToCreatedAtResolver<TParent>;
  updatedAt?: CotizacionQuoteToUpdatedAtResolver<TParent>;
  paymentfrequency?: CotizacionQuoteToPaymentfrequencyResolver<TParent>;
  startvigency?: CotizacionQuoteToStartvigencyResolver<TParent>;
  endvigency?: CotizacionQuoteToEndvigencyResolver<TParent>;
  cardescription?: CotizacionQuoteToCardescriptionResolver<TParent>;
  totalamount?: CotizacionQuoteToTotalamountResolver<TParent>;
  surcharge?: CotizacionQuoteToSurchargeResolver<TParent>;
  folioquote?: CotizacionQuoteToFolioquoteResolver<TParent>;
  police?: CotizacionQuoteToPoliceResolver<TParent>;
  derecho?: CotizacionQuoteToDerechoResolver<TParent>;
  pdf?: CotizacionQuoteToPdfResolver<TParent>;
  receiptpdf?: CotizacionQuoteToReceiptpdfResolver<TParent>;
  package?: CotizacionQuoteToPackageResolver<TParent>;
  iva?: CotizacionQuoteToIvaResolver<TParent>;
  netAmount?: CotizacionQuoteToNetAmountResolver<TParent>;
  selected?: CotizacionQuoteToSelectedResolver<TParent>;
  carCompanyCode?: CotizacionQuoteToCarCompanyCodeResolver<TParent>;
  carFormId?: CotizacionQuoteToCarFormIdResolver<TParent>;
  serviceId?: CotizacionQuoteToServiceIdResolver<TParent>;
  status?: CotizacionQuoteToStatusResolver<TParent>;
  extra?: CotizacionQuoteToExtraResolver<TParent>;
  carForm?: CotizacionQuoteToCarFormResolver<TParent>;
  service?: CotizacionQuoteToServiceResolver<TParent>;
  cotizacionQuoteCoverages?: CotizacionQuoteToCotizacionQuoteCoveragesResolver<TParent>;
  cotizacionQuotePayForms?: CotizacionQuoteToCotizacionQuotePayFormsResolver<TParent>;
}

export interface CotizacionQuoteToIssuedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToPaymentfrequencyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToStartvigencyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToEndvigencyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCardescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToTotalamountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToSurchargeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToFolioquoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToPoliceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToDerechoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToPdfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToReceiptpdfResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToPackageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToIvaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToNetAmountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToSelectedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCarCompanyCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCarFormIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToExtraResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCarFormResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCotizacionQuoteCoveragesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteToCotizacionQuotePayFormsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICotizacionCarFormTypeResolver<TParent = any> {
  id?: CotizacionCarFormToIdResolver<TParent>;
  createdAt?: CotizacionCarFormToCreatedAtResolver<TParent>;
  updatedAt?: CotizacionCarFormToUpdatedAtResolver<TParent>;
  cardescription?: CotizacionCarFormToCardescriptionResolver<TParent>;
  carId?: CotizacionCarFormToCarIdResolver<TParent>;
  year?: CotizacionCarFormToYearResolver<TParent>;
  code?: CotizacionCarFormToCodeResolver<TParent>;
  serialNumber?: CotizacionCarFormToSerialNumberResolver<TParent>;
  engineNumber?: CotizacionCarFormToEngineNumberResolver<TParent>;
  paymentMethod?: CotizacionCarFormToPaymentMethodResolver<TParent>;
  plates?: CotizacionCarFormToPlatesResolver<TParent>;
  owner?: CotizacionCarFormToOwnerResolver<TParent>;
  clientId?: CotizacionCarFormToClientIdResolver<TParent>;
  origin?: CotizacionCarFormToOriginResolver<TParent>;
  client?: CotizacionCarFormToClientResolver<TParent>;
  cotizacionQuotes?: CotizacionCarFormToCotizacionQuotesResolver<TParent>;
}

export interface CotizacionCarFormToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToCardescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToCarIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToSerialNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToEngineNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToPaymentMethodResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToPlatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToOwnerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToClientIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToOriginResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToClientResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionCarFormToCotizacionQuotesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IClientsClientTypeResolver<TParent = any> {
  id?: ClientsClientToIdResolver<TParent>;
  createdAt?: ClientsClientToCreatedAtResolver<TParent>;
  updatedAt?: ClientsClientToUpdatedAtResolver<TParent>;
  firstname?: ClientsClientToFirstnameResolver<TParent>;
  lastname?: ClientsClientToLastnameResolver<TParent>;
  age?: ClientsClientToAgeResolver<TParent>;
  email?: ClientsClientToEmailResolver<TParent>;
  phone?: ClientsClientToPhoneResolver<TParent>;
  taxpayerid?: ClientsClientToTaxpayeridResolver<TParent>;
  secondlastname?: ClientsClientToSecondlastnameResolver<TParent>;
  birthdate?: ClientsClientToBirthdateResolver<TParent>;
  civilStatus?: ClientsClientToCivilStatusResolver<TParent>;
  gender?: ClientsClientToGenderResolver<TParent>;
  clientsAddresses?: ClientsClientToClientsAddressesResolver<TParent>;
  cotizacionCarForms?: ClientsClientToCotizacionCarFormsResolver<TParent>;
}

export interface ClientsClientToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToFirstnameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToTaxpayeridResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToSecondlastnameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToBirthdateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToCivilStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToClientsAddressesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsClientToCotizacionCarFormsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IClientsAddressTypeResolver<TParent = any> {
  id?: ClientsAddressToIdResolver<TParent>;
  city?: ClientsAddressToCityResolver<TParent>;
  state?: ClientsAddressToStateResolver<TParent>;
  zipcode?: ClientsAddressToZipcodeResolver<TParent>;
  clientId?: ClientsAddressToClientIdResolver<TParent>;
  suburb?: ClientsAddressToSuburbResolver<TParent>;
  internalnumber?: ClientsAddressToInternalnumberResolver<TParent>;
  number?: ClientsAddressToNumberResolver<TParent>;
  street?: ClientsAddressToStreetResolver<TParent>;
  country?: ClientsAddressToCountryResolver<TParent>;
  client?: ClientsAddressToClientResolver<TParent>;
}

export interface ClientsAddressToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToZipcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToClientIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToSuburbResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToInternalnumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientsAddressToClientResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICotizacionQuoteCoverageTypeResolver<TParent = any> {
  id?: CotizacionQuoteCoverageToIdResolver<TParent>;
  createdAt?: CotizacionQuoteCoverageToCreatedAtResolver<TParent>;
  updatedAt?: CotizacionQuoteCoverageToUpdatedAtResolver<TParent>;
  name?: CotizacionQuoteCoverageToNameResolver<TParent>;
  cobId?: CotizacionQuoteCoverageToCobIdResolver<TParent>;
  sumassured?: CotizacionQuoteCoverageToSumassuredResolver<TParent>;
  deductible?: CotizacionQuoteCoverageToDeductibleResolver<TParent>;
  total?: CotizacionQuoteCoverageToTotalResolver<TParent>;
  neto?: CotizacionQuoteCoverageToNetoResolver<TParent>;
  quoteId?: CotizacionQuoteCoverageToQuoteIdResolver<TParent>;
  priority?: CotizacionQuoteCoverageToPriorityResolver<TParent>;
  quote?: CotizacionQuoteCoverageToQuoteResolver<TParent>;
}

export interface CotizacionQuoteCoverageToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToCobIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToSumassuredResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToDeductibleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToNetoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToQuoteIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToPriorityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuoteCoverageToQuoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICotizacionQuotePayFormTypeResolver<TParent = any> {
  id?: CotizacionQuotePayFormToIdResolver<TParent>;
  netamount?: CotizacionQuotePayFormToNetamountResolver<TParent>;
  firstinstalment?: CotizacionQuotePayFormToFirstinstalmentResolver<TParent>;
  model?: CotizacionQuotePayFormToModelResolver<TParent>;
  iva?: CotizacionQuotePayFormToIvaResolver<TParent>;
  subsecuentinstalments?: CotizacionQuotePayFormToSubsecuentinstalmentsResolver<TParent>;
  rpf?: CotizacionQuotePayFormToRpfResolver<TParent>;
  totalamount?: CotizacionQuotePayFormToTotalamountResolver<TParent>;
  startvigency?: CotizacionQuotePayFormToStartvigencyResolver<TParent>;
  endvigency?: CotizacionQuotePayFormToEndvigencyResolver<TParent>;
  quoteId?: CotizacionQuotePayFormToQuoteIdResolver<TParent>;
  quantity?: CotizacionQuotePayFormToQuantityResolver<TParent>;
  quote?: CotizacionQuotePayFormToQuoteResolver<TParent>;
}

export interface CotizacionQuotePayFormToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToNetamountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToFirstinstalmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToModelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToIvaResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToSubsecuentinstalmentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToRpfResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToTotalamountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToStartvigencyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToEndvigencyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToQuoteIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToQuantityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CotizacionQuotePayFormToQuoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IGenderDTOTypeResolver<TParent = any> {
  name?: GenderDTOToNameResolver<TParent>;
}

export interface GenderDTOToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICarTypeDTOTypeResolver<TParent = any> {
  name?: CarTypeDTOToNameResolver<TParent>;
}

export interface CarTypeDTOToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListBrandDTOTypeResolver<TParent = any> {
  name?: ListBrandDTOToNameResolver<TParent>;
  insurer?: ListBrandDTOToInsurerResolver<TParent>;
}

export interface ListBrandDTOToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListBrandDTOToInsurerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListSubBrandDTOTypeResolver<TParent = any> {
  name?: ListSubBrandDTOToNameResolver<TParent>;
  insurer?: ListSubBrandDTOToInsurerResolver<TParent>;
}

export interface ListSubBrandDTOToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListSubBrandDTOToInsurerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListYearDTOTypeResolver<TParent = any> {
  year?: ListYearDTOToYearResolver<TParent>;
  insurer?: ListYearDTOToInsurerResolver<TParent>;
}

export interface ListYearDTOToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListYearDTOToInsurerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListVersionDTOTypeResolver<TParent = any> {
  carId?: ListVersionDTOToCarIdResolver<TParent>;
  version?: ListVersionDTOToVersionResolver<TParent>;
  cveveh?: ListVersionDTOToCvevehResolver<TParent>;
  insurer?: ListVersionDTOToInsurerResolver<TParent>;
}

export interface ListVersionDTOToCarIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListVersionDTOToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListVersionDTOToCvevehResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListVersionDTOToInsurerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IHomologationServiceTypeResolver<TParent = any> {
  homologated?: HomologationServiceToHomologatedResolver<TParent>;
  name?: HomologationServiceToNameResolver<TParent>;
  codeName?: HomologationServiceToCodeNameResolver<TParent>;
  homologateDescription?: HomologationServiceToHomologateDescriptionResolver<TParent>;
  color?: HomologationServiceToColorResolver<TParent>;
  logo?: HomologationServiceToLogoResolver<TParent>;
}

export interface HomologationServiceToHomologatedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologationServiceToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologationServiceToCodeNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologationServiceToHomologateDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologationServiceToColorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HomologationServiceToLogoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IColoniaDTOTypeResolver<TParent = any> {
  colonias?: ColoniaDTOToColoniasResolver<TParent>;
  estado?: ColoniaDTOToEstadoResolver<TParent>;
  municipio?: ColoniaDTOToMunicipioResolver<TParent>;
  munid?: ColoniaDTOToMunidResolver<TParent>;
}

export interface ColoniaDTOToColoniasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ColoniaDTOToEstadoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ColoniaDTOToMunicipioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ColoniaDTOToMunidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEstadoDTOTypeResolver<TParent = any> {
  name?: EstadoDTOToNameResolver<TParent>;
  value?: EstadoDTOToValueResolver<TParent>;
}

export interface EstadoDTOToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EstadoDTOToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICoverageDTOTypeResolver<TParent = any> {
  servicename?: CoverageDTOToServicenameResolver<TParent>;
  type?: CoverageDTOToTypeResolver<TParent>;
  obligatory?: CoverageDTOToObligatoryResolver<TParent>;
  optional?: CoverageDTOToOptionalResolver<TParent>;
}

export interface CoverageDTOToServicenameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageDTOToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageDTOToObligatoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageDTOToOptionalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICatalogTypeResolver<TParent = any> {
  brand?: CatalogToBrandResolver<TParent>;
  description?: CatalogToDescriptionResolver<TParent>;
  subBrand?: CatalogToSubBrandResolver<TParent>;
  catalogType?: CatalogToCatalogTypeResolver<TParent>;
  oldId?: CatalogToOldIdResolver<TParent>;
  years?: CatalogToYearsResolver<TParent>;
  id?: CatalogToIdResolver<TParent>;
  createdAt?: CatalogToCreatedAtResolver<TParent>;
  updatedAt?: CatalogToUpdatedAtResolver<TParent>;
}

export interface CatalogToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToSubBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToCatalogTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToOldIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToYearsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICatalogByYearTypeResolver<TParent = any> {
  year?: CatalogByYearToYearResolver<TParent>;
  cveveh?: CatalogByYearToCvevehResolver<TParent>;
  catalogId?: CatalogByYearToCatalogIdResolver<TParent>;
  catalog?: CatalogByYearToCatalogResolver<TParent>;
  id?: CatalogByYearToIdResolver<TParent>;
  createdAt?: CatalogByYearToCreatedAtResolver<TParent>;
  updatedAt?: CatalogByYearToUpdatedAtResolver<TParent>;
}

export interface CatalogByYearToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogByYearToCvevehResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogByYearToCatalogIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogByYearToCatalogResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogByYearToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogByYearToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogByYearToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICatalogCollectionSegmentTypeResolver<TParent = any> {
  items?: CatalogCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: CatalogCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: CatalogCollectionSegmentToTotalCountResolver<TParent>;
}

export interface CatalogCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CatalogCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IInsurerCollectionSegmentTypeResolver<TParent = any> {
  items?: InsurerCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: InsurerCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: InsurerCollectionSegmentToTotalCountResolver<TParent>;
}

export interface InsurerCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InsurerCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOfficeCollectionSegmentTypeResolver<TParent = any> {
  items?: OfficeCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: OfficeCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: OfficeCollectionSegmentToTotalCountResolver<TParent>;
}

export interface OfficeCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoterProfileCollectionSegmentTypeResolver<TParent = any> {
  items?: QuoterProfileCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: QuoterProfileCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: QuoterProfileCollectionSegmentToTotalCountResolver<TParent>;
}

export interface QuoterProfileCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterProfileCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IStaffQuoteTypeResolver<TParent = any> {
  proposals?: StaffQuoteToProposalsResolver<TParent>;
  collaborators?: StaffQuoteToCollaboratorsResolver<TParent>;
  solicitorId?: StaffQuoteToSolicitorIdResolver<TParent>;
  serviceId?: StaffQuoteToServiceIdResolver<TParent>;
  projectId?: StaffQuoteToProjectIdResolver<TParent>;
  status?: StaffQuoteToStatusResolver<TParent>;
  id?: StaffQuoteToIdResolver<TParent>;
  createdAt?: StaffQuoteToCreatedAtResolver<TParent>;
  updatedAt?: StaffQuoteToUpdatedAtResolver<TParent>;
}

export interface StaffQuoteToProposalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToCollaboratorsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToSolicitorIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToServiceIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StaffQuoteToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProposalTypeResolver<TParent = any> {
  staffQuote?: ProposalToStaffQuoteResolver<TParent>;
  staffQuoteId?: ProposalToStaffQuoteIdResolver<TParent>;
  methodology?: ProposalToMethodologyResolver<TParent>;
  status?: ProposalToStatusResolver<TParent>;
  id?: ProposalToIdResolver<TParent>;
  createdAt?: ProposalToCreatedAtResolver<TParent>;
  updatedAt?: ProposalToUpdatedAtResolver<TParent>;
}

export interface ProposalToStaffQuoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProposalToStaffQuoteIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProposalToMethodologyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProposalToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProposalToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProposalToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProposalToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICollaboratorTypeResolver<TParent = any> {
  staffQuote?: CollaboratorToStaffQuoteResolver<TParent>;
  memberId?: CollaboratorToMemberIdResolver<TParent>;
  projectRoleId?: CollaboratorToProjectRoleIdResolver<TParent>;
  staffQuoteId?: CollaboratorToStaffQuoteIdResolver<TParent>;
  estimatedTime?: CollaboratorToEstimatedTimeResolver<TParent>;
  amount?: CollaboratorToAmountResolver<TParent>;
  id?: CollaboratorToIdResolver<TParent>;
  createdAt?: CollaboratorToCreatedAtResolver<TParent>;
  updatedAt?: CollaboratorToUpdatedAtResolver<TParent>;
}

export interface CollaboratorToStaffQuoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToProjectRoleIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToStaffQuoteIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToEstimatedTimeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollaboratorToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicPageTypeResolver<TParent = any> {
  dynamicSections?: DynamicPageToDynamicSectionsResolver<TParent>;
  projectId?: DynamicPageToProjectIdResolver<TParent>;
  name?: DynamicPageToNameResolver<TParent>;
  label?: DynamicPageToLabelResolver<TParent>;
  id?: DynamicPageToIdResolver<TParent>;
  createdAt?: DynamicPageToCreatedAtResolver<TParent>;
  updatedAt?: DynamicPageToUpdatedAtResolver<TParent>;
}

export interface DynamicPageToDynamicSectionsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicPageToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicPageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicPageToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicPageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicPageToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicPageToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicSectionTypeResolver<TParent = any> {
  dynamicPage?: DynamicSectionToDynamicPageResolver<TParent>;
  dynamicTabs?: DynamicSectionToDynamicTabsResolver<TParent>;
  position?: DynamicSectionToPositionResolver<TParent>;
  isPrimary?: DynamicSectionToIsPrimaryResolver<TParent>;
  dynamicPageId?: DynamicSectionToDynamicPageIdResolver<TParent>;
  id?: DynamicSectionToIdResolver<TParent>;
  createdAt?: DynamicSectionToCreatedAtResolver<TParent>;
  updatedAt?: DynamicSectionToUpdatedAtResolver<TParent>;
}

export interface DynamicSectionToDynamicPageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToDynamicTabsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToPositionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToIsPrimaryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToDynamicPageIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicTabTypeResolver<TParent = any> {
  dynamicSection?: DynamicTabToDynamicSectionResolver<TParent>;
  dynamicSectionBlocks?: DynamicTabToDynamicSectionBlocksResolver<TParent>;
  name?: DynamicTabToNameResolver<TParent>;
  position?: DynamicTabToPositionResolver<TParent>;
  dynamicSectionId?: DynamicTabToDynamicSectionIdResolver<TParent>;
  id?: DynamicTabToIdResolver<TParent>;
  createdAt?: DynamicTabToCreatedAtResolver<TParent>;
  updatedAt?: DynamicTabToUpdatedAtResolver<TParent>;
}

export interface DynamicTabToDynamicSectionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToDynamicSectionBlocksResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToDynamicSectionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicSectionBlockTypeResolver<TParent = any> {
  dynamicTab?: DynamicSectionBlockToDynamicTabResolver<TParent>;
  dynamicBlock?: DynamicSectionBlockToDynamicBlockResolver<TParent>;
  dynamicCustomMetas?: DynamicSectionBlockToDynamicCustomMetasResolver<TParent>;
  label?: DynamicSectionBlockToLabelResolver<TParent>;
  position?: DynamicSectionBlockToPositionResolver<TParent>;
  style?: DynamicSectionBlockToStyleResolver<TParent>;
  dynamicBlockId?: DynamicSectionBlockToDynamicBlockIdResolver<TParent>;
  dynamicTabId?: DynamicSectionBlockToDynamicTabIdResolver<TParent>;
  id?: DynamicSectionBlockToIdResolver<TParent>;
  createdAt?: DynamicSectionBlockToCreatedAtResolver<TParent>;
  updatedAt?: DynamicSectionBlockToUpdatedAtResolver<TParent>;
}

export interface DynamicSectionBlockToDynamicTabResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToDynamicBlockResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToDynamicCustomMetasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToLabelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToPositionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToStyleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToDynamicBlockIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToDynamicTabIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicBlockTypeResolver<TParent = any> {
  dynamicSectionBlocks?: DynamicBlockToDynamicSectionBlocksResolver<TParent>;
  codeName?: DynamicBlockToCodeNameResolver<TParent>;
  description?: DynamicBlockToDescriptionResolver<TParent>;
  services?: DynamicBlockToServicesResolver<TParent>;
  components?: DynamicBlockToComponentsResolver<TParent>;
  style?: DynamicBlockToStyleResolver<TParent>;
  id?: DynamicBlockToIdResolver<TParent>;
  createdAt?: DynamicBlockToCreatedAtResolver<TParent>;
  updatedAt?: DynamicBlockToUpdatedAtResolver<TParent>;
}

export interface DynamicBlockToDynamicSectionBlocksResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToCodeNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToServicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToComponentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToStyleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicCustomMetaTypeResolver<TParent = any> {
  dynamicSectionBlocks?: DynamicCustomMetaToDynamicSectionBlocksResolver<TParent>;
  dynamicCustomValues?: DynamicCustomMetaToDynamicCustomValuesResolver<TParent>;
  metaKey?: DynamicCustomMetaToMetaKeyResolver<TParent>;
  metaType?: DynamicCustomMetaToMetaTypeResolver<TParent>;
  label?: DynamicCustomMetaToLabelResolver<TParent>;
  description?: DynamicCustomMetaToDescriptionResolver<TParent>;
  position?: DynamicCustomMetaToPositionResolver<TParent>;
  dynamicSectionBlockId?: DynamicCustomMetaToDynamicSectionBlockIdResolver<TParent>;
  id?: DynamicCustomMetaToIdResolver<TParent>;
  createdAt?: DynamicCustomMetaToCreatedAtResolver<TParent>;
  updatedAt?: DynamicCustomMetaToUpdatedAtResolver<TParent>;
}

export interface DynamicCustomMetaToDynamicSectionBlocksResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToDynamicCustomValuesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToMetaKeyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToMetaTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToLabelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToPositionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToDynamicSectionBlockIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicCustomValueTypeResolver<TParent = any> {
  dynamicCustomMetas?: DynamicCustomValueToDynamicCustomMetasResolver<TParent>;
  memberId?: DynamicCustomValueToMemberIdResolver<TParent>;
  dynamicCustomMetaId?: DynamicCustomValueToDynamicCustomMetaIdResolver<TParent>;
  value?: DynamicCustomValueToValueResolver<TParent>;
  id?: DynamicCustomValueToIdResolver<TParent>;
  createdAt?: DynamicCustomValueToCreatedAtResolver<TParent>;
  updatedAt?: DynamicCustomValueToUpdatedAtResolver<TParent>;
}

export interface DynamicCustomValueToDynamicCustomMetasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueToDynamicCustomMetaIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueToValueResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicBlockCollectionSegmentTypeResolver<TParent = any> {
  items?: DynamicBlockCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DynamicBlockCollectionSegmentToPageInfoResolver<TParent>;
}

export interface DynamicBlockCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicBlockCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicSectionCollectionSegmentTypeResolver<TParent = any> {
  items?: DynamicSectionCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DynamicSectionCollectionSegmentToPageInfoResolver<TParent>;
}

export interface DynamicSectionCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicTabCollectionSegmentTypeResolver<TParent = any> {
  items?: DynamicTabCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DynamicTabCollectionSegmentToPageInfoResolver<TParent>;
}

export interface DynamicTabCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicTabCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicSectionBlockCollectionSegmentTypeResolver<
  TParent = any
> {
  items?: DynamicSectionBlockCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DynamicSectionBlockCollectionSegmentToPageInfoResolver<TParent>;
}

export interface DynamicSectionBlockCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicSectionBlockCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicCustomMetaCollectionSegmentTypeResolver<
  TParent = any
> {
  items?: DynamicCustomMetaCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DynamicCustomMetaCollectionSegmentToPageInfoResolver<TParent>;
}

export interface DynamicCustomMetaCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomMetaCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicCustomValueCollectionSegmentTypeResolver<
  TParent = any
> {
  items?: DynamicCustomValueCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DynamicCustomValueCollectionSegmentToPageInfoResolver<TParent>;
}

export interface DynamicCustomValueCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DynamicCustomValueCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IChargeCollectionSegmentTypeResolver<TParent = any> {
  items?: ChargeCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: ChargeCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: ChargeCollectionSegmentToTotalCountResolver<TParent>;
}

export interface ChargeCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IChargeTypeResolver<TParent = any> {
  projectId?: ChargeToProjectIdResolver<TParent>;
  eventId?: ChargeToEventIdResolver<TParent>;
  memberId?: ChargeToMemberIdResolver<TParent>;
  total?: ChargeToTotalResolver<TParent>;
  id?: ChargeToIdResolver<TParent>;
  createdAt?: ChargeToCreatedAtResolver<TParent>;
  updatedAt?: ChargeToUpdatedAtResolver<TParent>;
}

export interface ChargeToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IClinicHistoryTypeResolver<TParent = any> {
  projectId?: ClinicHistoryToProjectIdResolver<TParent>;
  eventId?: ClinicHistoryToEventIdResolver<TParent>;
  memberId?: ClinicHistoryToMemberIdResolver<TParent>;
  notes?: ClinicHistoryToNotesResolver<TParent>;
  isVisible?: ClinicHistoryToIsVisibleResolver<TParent>;
  position?: ClinicHistoryToPositionResolver<TParent>;
  id?: ClinicHistoryToIdResolver<TParent>;
  createdAt?: ClinicHistoryToCreatedAtResolver<TParent>;
  updatedAt?: ClinicHistoryToUpdatedAtResolver<TParent>;
}

export interface ClinicHistoryToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToIsVisibleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClinicHistoryToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEventDetailCollectionSegmentTypeResolver<TParent = any> {
  items?: EventDetailCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: EventDetailCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: EventDetailCollectionSegmentToTotalCountResolver<TParent>;
}

export interface EventDetailCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EventDetailCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMedicalServiceTypeResolver<TParent = any> {
  projectId?: MedicalServiceToProjectIdResolver<TParent>;
  state?: MedicalServiceToStateResolver<TParent>;
  name?: MedicalServiceToNameResolver<TParent>;
  mode?: MedicalServiceToModeResolver<TParent>;
  cost?: MedicalServiceToCostResolver<TParent>;
  imgRoute?: MedicalServiceToImgRouteResolver<TParent>;
  description?: MedicalServiceToDescriptionResolver<TParent>;
  id?: MedicalServiceToIdResolver<TParent>;
  createdAt?: MedicalServiceToCreatedAtResolver<TParent>;
  updatedAt?: MedicalServiceToUpdatedAtResolver<TParent>;
}

export interface MedicalServiceToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToCostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToImgRouteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalServiceToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMedicalConfigTypeResolver<TParent = any> {
  projectId?: MedicalConfigToProjectIdResolver<TParent>;
  patologis?: MedicalConfigToPatologisResolver<TParent>;
  id?: MedicalConfigToIdResolver<TParent>;
  createdAt?: MedicalConfigToCreatedAtResolver<TParent>;
  updatedAt?: MedicalConfigToUpdatedAtResolver<TParent>;
}

export interface MedicalConfigToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalConfigToPatologisResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalConfigToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalConfigToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MedicalConfigToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRegistSesionTypeResolver<TParent = any> {
  projectId?: RegistSesionToProjectIdResolver<TParent>;
  therapyId?: RegistSesionToTherapyIdResolver<TParent>;
  therapy?: RegistSesionToTherapyResolver<TParent>;
  title?: RegistSesionToTitleResolver<TParent>;
  namePacient?: RegistSesionToNamePacientResolver<TParent>;
  terapist?: RegistSesionToTerapistResolver<TParent>;
  dateSesion?: RegistSesionToDateSesionResolver<TParent>;
  comments?: RegistSesionToCommentsResolver<TParent>;
  electronicsign?: RegistSesionToElectronicsignResolver<TParent>;
  legalType?: RegistSesionToLegalTypeResolver<TParent>;
  id?: RegistSesionToIdResolver<TParent>;
  createdAt?: RegistSesionToCreatedAtResolver<TParent>;
  updatedAt?: RegistSesionToUpdatedAtResolver<TParent>;
}

export interface RegistSesionToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToTherapyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToTherapyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToNamePacientResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToTerapistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToDateSesionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToElectronicsignResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToLegalTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegistSesionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITherapyTypeResolver<TParent = any> {
  projectId?: TherapyToProjectIdResolver<TParent>;
  eventId?: TherapyToEventIdResolver<TParent>;
  memberId?: TherapyToMemberIdResolver<TParent>;
  numSesion?: TherapyToNumSesionResolver<TParent>;
  content?: TherapyToContentResolver<TParent>;
  isVisible?: TherapyToIsVisibleResolver<TParent>;
  position?: TherapyToPositionResolver<TParent>;
  id?: TherapyToIdResolver<TParent>;
  createdAt?: TherapyToCreatedAtResolver<TParent>;
  updatedAt?: TherapyToUpdatedAtResolver<TParent>;
}

export interface TherapyToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToNumSesionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToIsVisibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITherapyCollectionSegmentTypeResolver<TParent = any> {
  items?: TherapyCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: TherapyCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: TherapyCollectionSegmentToTotalCountResolver<TParent>;
}

export interface TherapyCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TherapyCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRecipeConfigTypeResolver<TParent = any> {
  projectId?: RecipeConfigToProjectIdResolver<TParent>;
  medicRecipeId?: RecipeConfigToMedicRecipeIdResolver<TParent>;
  medicRecipe?: RecipeConfigToMedicRecipeResolver<TParent>;
  isActiveAllPacients?: RecipeConfigToIsActiveAllPacientsResolver<TParent>;
  isAccessDataPacient?: RecipeConfigToIsAccessDataPacientResolver<TParent>;
  id?: RecipeConfigToIdResolver<TParent>;
  createdAt?: RecipeConfigToCreatedAtResolver<TParent>;
  updatedAt?: RecipeConfigToUpdatedAtResolver<TParent>;
}

export interface RecipeConfigToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToMedicRecipeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToMedicRecipeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToIsActiveAllPacientsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToIsAccessDataPacientResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConfigToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IConsultNoteTypeResolver<TParent = any> {
  eventId?: ConsultNoteToEventIdResolver<TParent>;
  projectId?: ConsultNoteToProjectIdResolver<TParent>;
  memberId?: ConsultNoteToMemberIdResolver<TParent>;
  note?: ConsultNoteToNoteResolver<TParent>;
  isVisible?: ConsultNoteToIsVisibleResolver<TParent>;
  id?: ConsultNoteToIdResolver<TParent>;
  createdAt?: ConsultNoteToCreatedAtResolver<TParent>;
  updatedAt?: ConsultNoteToUpdatedAtResolver<TParent>;
}

export interface ConsultNoteToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToNoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToIsVisibleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConsultNoteToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IBillingRequestTypeResolver<TParent = any> {
  projectId?: BillingRequestToProjectIdResolver<TParent>;
  memberId?: BillingRequestToMemberIdResolver<TParent>;
  eventId?: BillingRequestToEventIdResolver<TParent>;
  socialReason?: BillingRequestToSocialReasonResolver<TParent>;
  rfc?: BillingRequestToRfcResolver<TParent>;
  cFDI?: BillingRequestToCFDIResolver<TParent>;
  socialRegiment?: BillingRequestToSocialRegimentResolver<TParent>;
  cP?: BillingRequestToCPResolver<TParent>;
  email?: BillingRequestToEmailResolver<TParent>;
  status?: BillingRequestToStatusResolver<TParent>;
  billingUrl?: BillingRequestToBillingUrlResolver<TParent>;
  emailContent?: BillingRequestToEmailContentResolver<TParent>;
  id?: BillingRequestToIdResolver<TParent>;
  createdAt?: BillingRequestToCreatedAtResolver<TParent>;
  updatedAt?: BillingRequestToUpdatedAtResolver<TParent>;
}

export interface BillingRequestToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToEventIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToSocialReasonResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToRfcResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToCFDIResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToSocialRegimentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToCPResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToBillingUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToEmailContentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingRequestToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IApiServiceTypeResolver<TParent = any> {
  projectId?: ApiServiceToProjectIdResolver<TParent>;
  label?: ApiServiceToLabelResolver<TParent>;
  serviceCode?: ApiServiceToServiceCodeResolver<TParent>;
  secretKey?: ApiServiceToSecretKeyResolver<TParent>;
  expiration?: ApiServiceToExpirationResolver<TParent>;
  url?: ApiServiceToUrlResolver<TParent>;
  id?: ApiServiceToIdResolver<TParent>;
  createdAt?: ApiServiceToCreatedAtResolver<TParent>;
  updatedAt?: ApiServiceToUpdatedAtResolver<TParent>;
}

export interface ApiServiceToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToServiceCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToSecretKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToExpirationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiServiceToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDownloadFileTypeResolver<TParent = any> {
  url?: DownloadFileToUrlResolver<TParent>;
}

export interface DownloadFileToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListFoldersConnectionTypeResolver<TParent = any> {
  pageInfo?: ListFoldersConnectionToPageInfoResolver<TParent>;
  edges?: ListFoldersConnectionToEdgesResolver<TParent>;
  nodes?: ListFoldersConnectionToNodesResolver<TParent>;
}

export interface ListFoldersConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListFoldersConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListFoldersConnectionToNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListFoldersEdgeTypeResolver<TParent = any> {
  cursor?: ListFoldersEdgeToCursorResolver<TParent>;
  node?: ListFoldersEdgeToNodeResolver<TParent>;
}

export interface ListFoldersEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListFoldersEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFoldersListConnectionTypeResolver<TParent = any> {
  pageInfo?: FoldersListConnectionToPageInfoResolver<TParent>;
  edges?: FoldersListConnectionToEdgesResolver<TParent>;
  nodes?: FoldersListConnectionToNodesResolver<TParent>;
}

export interface FoldersListConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoldersListConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoldersListConnectionToNodesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFoldersListEdgeTypeResolver<TParent = any> {
  cursor?: FoldersListEdgeToCursorResolver<TParent>;
  node?: FoldersListEdgeToNodeResolver<TParent>;
}

export interface FoldersListEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FoldersListEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFileCollectionSegmentTypeResolver<TParent = any> {
  items?: FileCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: FileCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: FileCollectionSegmentToTotalCountResolver<TParent>;
}

export interface FileCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface I_ServiceTypeResolver<TParent = any> {
  sdl?: _ServiceToSdlResolver<TParent>;
}

export interface _ServiceToSdlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRoomTokenTypeResolver<TParent = any> {
  createdAt?: RoomTokenToCreatedAtResolver<TParent>;
  updatedAt?: RoomTokenToUpdatedAtResolver<TParent>;
  token?: RoomTokenToTokenResolver<TParent>;
}

export interface RoomTokenToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomTokenToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomTokenToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRoomSessionTypeResolver<TParent = any> {
  _id?: RoomSessionTo_idResolver<TParent>;
  createdAt?: RoomSessionToCreatedAtResolver<TParent>;
  updatedAt?: RoomSessionToUpdatedAtResolver<TParent>;
  sessionRoomName?: RoomSessionToSessionRoomNameResolver<TParent>;
  sessionRoomId?: RoomSessionToSessionRoomIdResolver<TParent>;
  chat?: RoomSessionToChatResolver<TParent>;
}

export interface RoomSessionTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomSessionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomSessionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomSessionToSessionRoomNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomSessionToSessionRoomIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomSessionToChatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRoomTokenLiveKitTypeResolver<TParent = any> {
  createdAt?: RoomTokenLiveKitToCreatedAtResolver<TParent>;
  token?: RoomTokenLiveKitToTokenResolver<TParent>;
  roomName?: RoomTokenLiveKitToRoomNameResolver<TParent>;
  participantIdentity?: RoomTokenLiveKitToParticipantIdentityResolver<TParent>;
}

export interface RoomTokenLiveKitToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomTokenLiveKitToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomTokenLiveKitToRoomNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomTokenLiveKitToParticipantIdentityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentCategoryCollectionSegmentTypeResolver<TParent = any> {
  items?: DocumentCategoryCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DocumentCategoryCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: DocumentCategoryCollectionSegmentToTotalCountResolver<TParent>;
}

export interface DocumentCategoryCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentCategoryTypeResolver<TParent = any> {
  documentCategoryDetails?: DocumentCategoryToDocumentCategoryDetailsResolver<TParent>;
  name?: DocumentCategoryToNameResolver<TParent>;
  description?: DocumentCategoryToDescriptionResolver<TParent>;
  memberId?: DocumentCategoryToMemberIdResolver<TParent>;
  projectId?: DocumentCategoryToProjectIdResolver<TParent>;
  id?: DocumentCategoryToIdResolver<TParent>;
  createdAt?: DocumentCategoryToCreatedAtResolver<TParent>;
  updatedAt?: DocumentCategoryToUpdatedAtResolver<TParent>;
}

export interface DocumentCategoryToDocumentCategoryDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToProjectIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentCategoryDetailTypeResolver<TParent = any> {
  documentCategory?: DocumentCategoryDetailToDocumentCategoryResolver<TParent>;
  document?: DocumentCategoryDetailToDocumentResolver<TParent>;
  documentId?: DocumentCategoryDetailToDocumentIdResolver<TParent>;
  documentCategoryId?: DocumentCategoryDetailToDocumentCategoryIdResolver<TParent>;
  id?: DocumentCategoryDetailToIdResolver<TParent>;
  createdAt?: DocumentCategoryDetailToCreatedAtResolver<TParent>;
  updatedAt?: DocumentCategoryDetailToUpdatedAtResolver<TParent>;
}

export interface DocumentCategoryDetailToDocumentCategoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryDetailToDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryDetailToDocumentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryDetailToDocumentCategoryIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryDetailToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryDetailToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCategoryDetailToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentTypeResolver<TParent = any> {
  documentTemplates?: DocumentToDocumentTemplatesResolver<TParent>;
  documentCategoryDetails?: DocumentToDocumentCategoryDetailsResolver<TParent>;
  name?: DocumentToNameResolver<TParent>;
  url?: DocumentToUrlResolver<TParent>;
  memberId?: DocumentToMemberIdResolver<TParent>;
  projectId?: DocumentToProjectIdResolver<TParent>;
  id?: DocumentToIdResolver<TParent>;
  createdAt?: DocumentToCreatedAtResolver<TParent>;
  updatedAt?: DocumentToUpdatedAtResolver<TParent>;
}

export interface DocumentToDocumentTemplatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToDocumentCategoryDetailsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentTemplateTypeResolver<TParent = any> {
  document?: DocumentTemplateToDocumentResolver<TParent>;
  templatePages?: DocumentTemplateToTemplatePagesResolver<TParent>;
  name?: DocumentTemplateToNameResolver<TParent>;
  memberId?: DocumentTemplateToMemberIdResolver<TParent>;
  documentId?: DocumentTemplateToDocumentIdResolver<TParent>;
  id?: DocumentTemplateToIdResolver<TParent>;
  createdAt?: DocumentTemplateToCreatedAtResolver<TParent>;
  updatedAt?: DocumentTemplateToUpdatedAtResolver<TParent>;
}

export interface DocumentTemplateToDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToTemplatePagesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToMemberIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToDocumentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITemplatePageTypeResolver<TParent = any> {
  documentTemplate?: TemplatePageToDocumentTemplateResolver<TParent>;
  documentTags?: TemplatePageToDocumentTagsResolver<TParent>;
  page?: TemplatePageToPageResolver<TParent>;
  url?: TemplatePageToUrlResolver<TParent>;
  templateId?: TemplatePageToTemplateIdResolver<TParent>;
  id?: TemplatePageToIdResolver<TParent>;
  createdAt?: TemplatePageToCreatedAtResolver<TParent>;
  updatedAt?: TemplatePageToUpdatedAtResolver<TParent>;
}

export interface TemplatePageToDocumentTemplateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToDocumentTagsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToTemplateIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentTagTypeResolver<TParent = any> {
  templatePage?: DocumentTagToTemplatePageResolver<TParent>;
  documentScans?: DocumentTagToDocumentScansResolver<TParent>;
  name?: DocumentTagToNameResolver<TParent>;
  height?: DocumentTagToHeightResolver<TParent>;
  width?: DocumentTagToWidthResolver<TParent>;
  verticalAxis?: DocumentTagToVerticalAxisResolver<TParent>;
  horizontalAxis?: DocumentTagToHorizontalAxisResolver<TParent>;
  templatePageId?: DocumentTagToTemplatePageIdResolver<TParent>;
  id?: DocumentTagToIdResolver<TParent>;
  createdAt?: DocumentTagToCreatedAtResolver<TParent>;
  updatedAt?: DocumentTagToUpdatedAtResolver<TParent>;
}

export interface DocumentTagToTemplatePageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToDocumentScansResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToVerticalAxisResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToHorizontalAxisResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToTemplatePageIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTagToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentScanTypeResolver<TParent = any> {
  documentTag?: DocumentScanToDocumentTagResolver<TParent>;
  documentRead?: DocumentScanToDocumentReadResolver<TParent>;
  value?: DocumentScanToValueResolver<TParent>;
  documentTagId?: DocumentScanToDocumentTagIdResolver<TParent>;
  documentReadId?: DocumentScanToDocumentReadIdResolver<TParent>;
  id?: DocumentScanToIdResolver<TParent>;
  createdAt?: DocumentScanToCreatedAtResolver<TParent>;
  updatedAt?: DocumentScanToUpdatedAtResolver<TParent>;
}

export interface DocumentScanToDocumentTagResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToDocumentReadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToDocumentTagIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToDocumentReadIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentScanToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentReadTypeResolver<TParent = any> {
  documentScans?: DocumentReadToDocumentScansResolver<TParent>;
  memberId?: DocumentReadToMemberIdResolver<TParent>;
  projectId?: DocumentReadToProjectIdResolver<TParent>;
  url?: DocumentReadToUrlResolver<TParent>;
  id?: DocumentReadToIdResolver<TParent>;
  createdAt?: DocumentReadToCreatedAtResolver<TParent>;
  updatedAt?: DocumentReadToUpdatedAtResolver<TParent>;
}

export interface DocumentReadToDocumentScansResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentCollectionSegmentTypeResolver<TParent = any> {
  items?: DocumentCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DocumentCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: DocumentCollectionSegmentToTotalCountResolver<TParent>;
}

export interface DocumentCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentTemplateCollectionSegmentTypeResolver<TParent = any> {
  items?: DocumentTemplateCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DocumentTemplateCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: DocumentTemplateCollectionSegmentToTotalCountResolver<TParent>;
}

export interface DocumentTemplateCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentTemplateCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITemplatePageCollectionSegmentTypeResolver<TParent = any> {
  items?: TemplatePageCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: TemplatePageCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: TemplatePageCollectionSegmentToTotalCountResolver<TParent>;
}

export interface TemplatePageCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TemplatePageCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentReadCollectionSegmentTypeResolver<TParent = any> {
  items?: DocumentReadCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: DocumentReadCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: DocumentReadCollectionSegmentToTotalCountResolver<TParent>;
}

export interface DocumentReadCollectionSegmentToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadCollectionSegmentToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocumentReadCollectionSegmentToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMutationTypeResolver<TParent = any> {
  createMember?: MutationToCreateMemberResolver<TParent>;
  loginMember?: MutationToLoginMemberResolver<TParent>;
  createCompany?: MutationToCreateCompanyResolver<TParent>;
  createProject?: MutationToCreateProjectResolver<TParent>;
  generateSlug?: MutationToGenerateSlugResolver<TParent>;
  createNewRoles?: MutationToCreateNewRolesResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  createUserWithoutMail?: MutationToCreateUserWithoutMailResolver<TParent>;
  updateProfile?: MutationToUpdateProfileResolver<TParent>;
  updatePassword?: MutationToUpdatePasswordResolver<TParent>;
  activeMember?: MutationToActiveMemberResolver<TParent>;
  createProjectRole?: MutationToCreateProjectRoleResolver<TParent>;
  removeAccent?: MutationToRemoveAccentResolver<TParent>;
  uploadPhotoProfile?: MutationToUploadPhotoProfileResolver<TParent>;
  deleteProject?: MutationToDeleteProjectResolver<TParent>;
  updateCompany?: MutationToUpdateCompanyResolver<TParent>;
  restorePassword?: MutationToRestorePasswordResolver<TParent>;
  recoverPassword?: MutationToRecoverPasswordResolver<TParent>;
  verifyToken?: MutationToVerifyTokenResolver<TParent>;
  createGroup?: MutationToCreateGroupResolver<TParent>;
  addGroupToMember?: MutationToAddGroupToMemberResolver<TParent>;
  addGroupToTaxonomy?: MutationToAddGroupToTaxonomyResolver<TParent>;
  addTaxonomyToMember?: MutationToAddTaxonomyToMemberResolver<TParent>;
  deleteGroup?: MutationToDeleteGroupResolver<TParent>;
  deleteGroupTaxonomy?: MutationToDeleteGroupTaxonomyResolver<TParent>;
  deleteMemberGroup?: MutationToDeleteMemberGroupResolver<TParent>;
  deleteMemberTaxonomy?: MutationToDeleteMemberTaxonomyResolver<TParent>;
  deleteMember?: MutationToDeleteMemberResolver<TParent>;
  deleteProjectRole?: MutationToDeleteProjectRoleResolver<TParent>;
  createUpdatePermission?: MutationToCreateUpdatePermissionResolver<TParent>;
  updateProject?: MutationToUpdateProjectResolver<TParent>;
  updateProjectRole?: MutationToUpdateProjectRoleResolver<TParent>;
  updateGroup?: MutationToUpdateGroupResolver<TParent>;
  associationServiceToProject?: MutationToAssociationServiceToProjectResolver<TParent>;
  createArrayFunction?: MutationToCreateArrayFunctionResolver<TParent>;
  deleteArrayFunction?: MutationToDeleteArrayFunctionResolver<TParent>;
  updateServiceProject?: MutationToUpdateServiceProjectResolver<TParent>;
  deleteServiceProject?: MutationToDeleteServiceProjectResolver<TParent>;
  createEventType?: MutationToCreateEventTypeResolver<TParent>;
  createSubEventType?: MutationToCreateSubEventTypeResolver<TParent>;
  deleteSubEventType?: MutationToDeleteSubEventTypeResolver<TParent>;
  updateSubEventType?: MutationToUpdateSubEventTypeResolver<TParent>;
  addSubTypeToEventType?: MutationToAddSubTypeToEventTypeResolver<TParent>;
  deleteEventType?: MutationToDeleteEventTypeResolver<TParent>;
  updateEventType?: MutationToUpdateEventTypeResolver<TParent>;
  createEvent?: MutationToCreateEventResolver<TParent>;
  createEventMember?: MutationToCreateEventMemberResolver<TParent>;
  updateEvent?: MutationToUpdateEventResolver<TParent>;
  deleteEvent?: MutationToDeleteEventResolver<TParent>;
  createEventSession?: MutationToCreateEventSessionResolver<TParent>;
  updateEventSession?: MutationToUpdateEventSessionResolver<TParent>;
  deleteEventSession?: MutationToDeleteEventSessionResolver<TParent>;
  sendRecordatory?: MutationToSendRecordatoryResolver<TParent>;
  createSchedule?: MutationToCreateScheduleResolver<TParent>;
  associationMemberToConsult?: MutationToAssociationMemberToConsultResolver<TParent>;
  cancellationMemberToConsult?: MutationToCancellationMemberToConsultResolver<TParent>;
  addChatMember?: MutationToAddChatMemberResolver<TParent>;
  addChatMemberWs?: MutationToAddChatMemberWsResolver<TParent>;
  conversationId?: MutationToConversationIdResolver<TParent>;
  deleteReply?: MutationToDeleteReplyResolver<TParent>;
  createArticle?: MutationToCreateArticleResolver<TParent>;
  blog_generateSlug?: MutationToBlog_generateSlugResolver<TParent>;
  updateStatusArticle?: MutationToUpdateStatusArticleResolver<TParent>;
  createTaxonomy?: MutationToCreateTaxonomyResolver<TParent>;
  updateArticle?: MutationToUpdateArticleResolver<TParent>;
  updateTaxonomy?: MutationToUpdateTaxonomyResolver<TParent>;
  deleteArticle?: MutationToDeleteArticleResolver<TParent>;
  deleteTaxonomy?: MutationToDeleteTaxonomyResolver<TParent>;
  newSurvey?: MutationToNewSurveyResolver<TParent>;
  updateSurvey?: MutationToUpdateSurveyResolver<TParent>;
  deleteSurvey?: MutationToDeleteSurveyResolver<TParent>;
  newQuestion?: MutationToNewQuestionResolver<TParent>;
  deleteQuestion?: MutationToDeleteQuestionResolver<TParent>;
  updateQuestion?: MutationToUpdateQuestionResolver<TParent>;
  newOption?: MutationToNewOptionResolver<TParent>;
  deleteOption?: MutationToDeleteOptionResolver<TParent>;
  updateOption?: MutationToUpdateOptionResolver<TParent>;
  answerQuestion?: MutationToAnswerQuestionResolver<TParent>;
  createProduct?: MutationToCreateProductResolver<TParent>;
  updateProduct?: MutationToUpdateProductResolver<TParent>;
  deleteProduct?: MutationToDeleteProductResolver<TParent>;
  createAddress?: MutationToCreateAddressResolver<TParent>;
  updateAddress?: MutationToUpdateAddressResolver<TParent>;
  deleteAddress?: MutationToDeleteAddressResolver<TParent>;
  createUpdateShop?: MutationToCreateUpdateShopResolver<TParent>;
  createService?: MutationToCreateServiceResolver<TParent>;
  updateService?: MutationToUpdateServiceResolver<TParent>;
  deleteService?: MutationToDeleteServiceResolver<TParent>;
  createServiceQuiz?: MutationToCreateServiceQuizResolver<TParent>;
  updateServiceQuiz?: MutationToUpdateServiceQuizResolver<TParent>;
  deleteServiceQuiz?: MutationToDeleteServiceQuizResolver<TParent>;
  createQuiz?: MutationToCreateQuizResolver<TParent>;
  updateQuiz?: MutationToUpdateQuizResolver<TParent>;
  deleteQuiz?: MutationToDeleteQuizResolver<TParent>;
  createQuizSection?: MutationToCreateQuizSectionResolver<TParent>;
  updateQuizSection?: MutationToUpdateQuizSectionResolver<TParent>;
  deleteQuizSection?: MutationToDeleteQuizSectionResolver<TParent>;
  createQuizQuestion?: MutationToCreateQuizQuestionResolver<TParent>;
  updateQuizQuestion?: MutationToUpdateQuizQuestionResolver<TParent>;
  deleteQuizQuestion?: MutationToDeleteQuizQuestionResolver<TParent>;
  updateBatchQuizQuestion?: MutationToUpdateBatchQuizQuestionResolver<TParent>;
  createQuizQuestionAnswer?: MutationToCreateQuizQuestionAnswerResolver<TParent>;
  updateQuizQuestionAnswer?: MutationToUpdateQuizQuestionAnswerResolver<TParent>;
  deleteQuizQuestionAnswer?: MutationToDeleteQuizQuestionAnswerResolver<TParent>;
  createQuizAnswer?: MutationToCreateQuizAnswerResolver<TParent>;
  updateQuizAnswer?: MutationToUpdateQuizAnswerResolver<TParent>;
  deleteQuizAnswer?: MutationToDeleteQuizAnswerResolver<TParent>;
  createQuizMember?: MutationToCreateQuizMemberResolver<TParent>;
  updateQuizMember?: MutationToUpdateQuizMemberResolver<TParent>;
  deleteQuizMember?: MutationToDeleteQuizMemberResolver<TParent>;
  updateBatchQuizMember?: MutationToUpdateBatchQuizMemberResolver<TParent>;
  createQuizMemberAnswer?: MutationToCreateQuizMemberAnswerResolver<TParent>;
  updateQuizMemberAnswer?: MutationToUpdateQuizMemberAnswerResolver<TParent>;
  deleteQuizMemberAnswer?: MutationToDeleteQuizMemberAnswerResolver<TParent>;
  updateBatchQuizMemberAnswer?: MutationToUpdateBatchQuizMemberAnswerResolver<TParent>;
  createQuizMemberDescription?: MutationToCreateQuizMemberDescriptionResolver<TParent>;
  updateQuizMemberDescription?: MutationToUpdateQuizMemberDescriptionResolver<TParent>;
  deleteQuizMemberDescription?: MutationToDeleteQuizMemberDescriptionResolver<TParent>;
  updateBatchQuizMemberDescription?: MutationToUpdateBatchQuizMemberDescriptionResolver<TParent>;
  createUpdateContactEmail?: MutationToCreateUpdateContactEmailResolver<TParent>;
  sendEmail?: MutationToSendEmailResolver<TParent>;
  deleteContactEmail?: MutationToDeleteContactEmailResolver<TParent>;
  createMethodPayment?: MutationToCreateMethodPaymentResolver<TParent>;
  updateMethodPayment?: MutationToUpdateMethodPaymentResolver<TParent>;
  deleteMethodPayment?: MutationToDeleteMethodPaymentResolver<TParent>;
  createPaymentStripe?: MutationToCreatePaymentStripeResolver<TParent>;
  createPaymentStripeToAccount?: MutationToCreatePaymentStripeToAccountResolver<TParent>;
  createSuscriptionStripe?: MutationToCreateSuscriptionStripeResolver<TParent>;
  createAccountStripe?: MutationToCreateAccountStripeResolver<TParent>;
  deletePayment?: MutationToDeletePaymentResolver<TParent>;
  updatePayment?: MutationToUpdatePaymentResolver<TParent>;
  createInvoice?: MutationToCreateInvoiceResolver<TParent>;
  updateStatusInvoice?: MutationToUpdateStatusInvoiceResolver<TParent>;
  putConfig?: MutationToPutConfigResolver<TParent>;
  deleteConfig?: MutationToDeleteConfigResolver<TParent>;
  updateOrderPages?: MutationToUpdateOrderPagesResolver<TParent>;
  updateBatchWewbsiteComponent?: MutationToUpdateBatchWewbsiteComponentResolver<TParent>;
  createComponent?: MutationToCreateComponentResolver<TParent>;
  createWebsiteComponent?: MutationToCreateWebsiteComponentResolver<TParent>;
  createWebsitePage?: MutationToCreateWebsitePageResolver<TParent>;
  createWebsiteSeo?: MutationToCreateWebsiteSeoResolver<TParent>;
  updateComponent?: MutationToUpdateComponentResolver<TParent>;
  updateWebsiteComponent?: MutationToUpdateWebsiteComponentResolver<TParent>;
  updateWebsitePage?: MutationToUpdateWebsitePageResolver<TParent>;
  updateWebsiteSeo?: MutationToUpdateWebsiteSeoResolver<TParent>;
  deleteComponent?: MutationToDeleteComponentResolver<TParent>;
  deleteWebsiteComponent?: MutationToDeleteWebsiteComponentResolver<TParent>;
  deleteWebsitePage?: MutationToDeleteWebsitePageResolver<TParent>;
  deleteWebsiteSeo?: MutationToDeleteWebsiteSeoResolver<TParent>;
  createVideoCall?: MutationToCreateVideoCallResolver<TParent>;
  updateVideoCall?: MutationToUpdateVideoCallResolver<TParent>;
  deleteVideoCall?: MutationToDeleteVideoCallResolver<TParent>;
  createAccessToken?: MutationToCreateAccessTokenResolver<TParent>;
  createVideoRoom?: MutationToCreateVideoRoomResolver<TParent>;
  sendNotification?: MutationToSendNotificationResolver<TParent>;
  sendEmailDownload?: MutationToSendEmailDownloadResolver<TParent>;
  createQuote?: MutationToCreateQuoteResolver<TParent>;
  createNewOffices?: MutationToCreateNewOfficesResolver<TParent>;
  createNewProfiles?: MutationToCreateNewProfilesResolver<TParent>;
  createInsurer?: MutationToCreateInsurerResolver<TParent>;
  createOffice?: MutationToCreateOfficeResolver<TParent>;
  createRegistration?: MutationToCreateRegistrationResolver<TParent>;
  createQuatorProfile?: MutationToCreateQuatorProfileResolver<TParent>;
  deleteInsurer?: MutationToDeleteInsurerResolver<TParent>;
  deleteOffice?: MutationToDeleteOfficeResolver<TParent>;
  deleteQuoterProfile?: MutationToDeleteQuoterProfileResolver<TParent>;
  updateInsurer?: MutationToUpdateInsurerResolver<TParent>;
  updateOffice?: MutationToUpdateOfficeResolver<TParent>;
  updateQuoterProfile?: MutationToUpdateQuoterProfileResolver<TParent>;
  createCatalog?: MutationToCreateCatalogResolver<TParent>;
  populateCredentials?: MutationToPopulateCredentialsResolver<TParent>;
  populateServices?: MutationToPopulateServicesResolver<TParent>;
  runServiceQuote?: MutationToRunServiceQuoteResolver<TParent>;
  emissionCar?: MutationToEmissionCarResolver<TParent>;
  createStaffQuote?: MutationToCreateStaffQuoteResolver<TParent>;
  updateStaffQuote?: MutationToUpdateStaffQuoteResolver<TParent>;
  deleteStaffQuote?: MutationToDeleteStaffQuoteResolver<TParent>;
  createProposal?: MutationToCreateProposalResolver<TParent>;
  updateProposal?: MutationToUpdateProposalResolver<TParent>;
  deleteProposal?: MutationToDeleteProposalResolver<TParent>;
  createCollaborator?: MutationToCreateCollaboratorResolver<TParent>;
  updateCollaborator?: MutationToUpdateCollaboratorResolver<TParent>;
  deleteCollaborator?: MutationToDeleteCollaboratorResolver<TParent>;
  associationWithQuoterProfile?: MutationToAssociationWithQuoterProfileResolver<TParent>;
  updateQuote?: MutationToUpdateQuoteResolver<TParent>;
  createInsurerCredential?: MutationToCreateInsurerCredentialResolver<TParent>;
  updateInsurerCredential?: MutationToUpdateInsurerCredentialResolver<TParent>;
  runJobInsurerMutation?: MutationToRunJobInsurerMutationResolver<TParent>;
  associationRelationCar?: MutationToAssociationRelationCarResolver<TParent>;
  createDynamicCustomMeta?: MutationToCreateDynamicCustomMetaResolver<TParent>;
  updateDynamicCustomMeta?: MutationToUpdateDynamicCustomMetaResolver<TParent>;
  deleteDynamicCustomMeta?: MutationToDeleteDynamicCustomMetaResolver<TParent>;
  updateBatchDynamicCustomMeta?: MutationToUpdateBatchDynamicCustomMetaResolver<TParent>;
  createDynamicCustomValue?: MutationToCreateDynamicCustomValueResolver<TParent>;
  updateDynamicCustomValue?: MutationToUpdateDynamicCustomValueResolver<TParent>;
  deleteDynamicCustomValue?: MutationToDeleteDynamicCustomValueResolver<TParent>;
  updateBatchDynamicCustomValue?: MutationToUpdateBatchDynamicCustomValueResolver<TParent>;
  createDynamicPage?: MutationToCreateDynamicPageResolver<TParent>;
  updateDynamicPage?: MutationToUpdateDynamicPageResolver<TParent>;
  deleteDynamicPage?: MutationToDeleteDynamicPageResolver<TParent>;
  createDynamicBlock?: MutationToCreateDynamicBlockResolver<TParent>;
  updateDynamicBlock?: MutationToUpdateDynamicBlockResolver<TParent>;
  deleteDynamicBlock?: MutationToDeleteDynamicBlockResolver<TParent>;
  createDynamicSection?: MutationToCreateDynamicSectionResolver<TParent>;
  updateDynamicSection?: MutationToUpdateDynamicSectionResolver<TParent>;
  deleteDynamicSection?: MutationToDeleteDynamicSectionResolver<TParent>;
  createDynamicSectionBlock?: MutationToCreateDynamicSectionBlockResolver<TParent>;
  updateDynamicSectionBlock?: MutationToUpdateDynamicSectionBlockResolver<TParent>;
  deleteDynamicSectionBlock?: MutationToDeleteDynamicSectionBlockResolver<TParent>;
  createDynamicTab?: MutationToCreateDynamicTabResolver<TParent>;
  updateDynamicTabBlock?: MutationToUpdateDynamicTabBlockResolver<TParent>;
  deleteDynamicTab?: MutationToDeleteDynamicTabResolver<TParent>;
  createCharge?: MutationToCreateChargeResolver<TParent>;
  createClinicHistory?: MutationToCreateClinicHistoryResolver<TParent>;
  createClinicHistoryMedicalBackgroundDetail?: MutationToCreateClinicHistoryMedicalBackgroundDetailResolver<TParent>;
  createEventDetail?: MutationToCreateEventDetailResolver<TParent>;
  createFisicExam?: MutationToCreateFisicExamResolver<TParent>;
  createFormat?: MutationToCreateFormatResolver<TParent>;
  createMedicalBackgroundDetail?: MutationToCreateMedicalBackgroundDetailResolver<TParent>;
  createMedicalBackground?: MutationToCreateMedicalBackgroundResolver<TParent>;
  createMedicalConfig?: MutationToCreateMedicalConfigResolver<TParent>;
  createMedicalService?: MutationToCreateMedicalServiceResolver<TParent>;
  createMedicine?: MutationToCreateMedicineResolver<TParent>;
  createVaccine?: MutationToCreateVaccineResolver<TParent>;
  createVitalSigns?: MutationToCreateVitalSignsResolver<TParent>;
  createMedicRecipe?: MutationToCreateMedicRecipeResolver<TParent>;
  createRecipeConfig?: MutationToCreateRecipeConfigResolver<TParent>;
  createRegistSesion?: MutationToCreateRegistSesionResolver<TParent>;
  createPacientNote?: MutationToCreatePacientNoteResolver<TParent>;
  createTherapy?: MutationToCreateTherapyResolver<TParent>;
  createDiagnostic?: MutationToCreateDiagnosticResolver<TParent>;
  createConsultNote?: MutationToCreateConsultNoteResolver<TParent>;
  createMedicalBackgroundSet?: MutationToCreateMedicalBackgroundSetResolver<TParent>;
  createMedicalBackgroundTemplate?: MutationToCreateMedicalBackgroundTemplateResolver<TParent>;
  createVitalSignsTemplate?: MutationToCreateVitalSignsTemplateResolver<TParent>;
  createPacientMedicalBackground?: MutationToCreatePacientMedicalBackgroundResolver<TParent>;
  createPatientVitalSignsResponse?: MutationToCreatePatientVitalSignsResponseResolver<TParent>;
  updateCharge?: MutationToUpdateChargeResolver<TParent>;
  updateClinicHistory?: MutationToUpdateClinicHistoryResolver<TParent>;
  updateClinicHistoryMedicalBackgroundDetail?: MutationToUpdateClinicHistoryMedicalBackgroundDetailResolver<TParent>;
  updateEventDetail?: MutationToUpdateEventDetailResolver<TParent>;
  updateFisicExam?: MutationToUpdateFisicExamResolver<TParent>;
  updateFormat?: MutationToUpdateFormatResolver<TParent>;
  updateMedicalBackgroundDetail?: MutationToUpdateMedicalBackgroundDetailResolver<TParent>;
  updateMedicalBackground?: MutationToUpdateMedicalBackgroundResolver<TParent>;
  updateMedicalConfig?: MutationToUpdateMedicalConfigResolver<TParent>;
  updateMedicalService?: MutationToUpdateMedicalServiceResolver<TParent>;
  updateMedicine?: MutationToUpdateMedicineResolver<TParent>;
  updateVaccine?: MutationToUpdateVaccineResolver<TParent>;
  updateVitalSigns?: MutationToUpdateVitalSignsResolver<TParent>;
  updateMedicRecipe?: MutationToUpdateMedicRecipeResolver<TParent>;
  updateRecipeConfig?: MutationToUpdateRecipeConfigResolver<TParent>;
  updateRegistSesion?: MutationToUpdateRegistSesionResolver<TParent>;
  updatePacientNote?: MutationToUpdatePacientNoteResolver<TParent>;
  updateTherapy?: MutationToUpdateTherapyResolver<TParent>;
  updateDiagnostic?: MutationToUpdateDiagnosticResolver<TParent>;
  updateConsultNote?: MutationToUpdateConsultNoteResolver<TParent>;
  updatePacientMedicalBackground?: MutationToUpdatePacientMedicalBackgroundResolver<TParent>;
  updateBillingRequest?: MutationToUpdateBillingRequestResolver<TParent>;
  updateSortFormat?: MutationToUpdateSortFormatResolver<TParent>;
  updatePatientVitalSignsResponse?: MutationToUpdatePatientVitalSignsResponseResolver<TParent>;
  deleteCharge?: MutationToDeleteChargeResolver<TParent>;
  deleteClinicHistory?: MutationToDeleteClinicHistoryResolver<TParent>;
  deleteClinicHistoryMedicalBackgrounDetail?: MutationToDeleteClinicHistoryMedicalBackgrounDetailResolver<TParent>;
  deleteConsult?: MutationToDeleteConsultResolver<TParent>;
  deleteFisicExam?: MutationToDeleteFisicExamResolver<TParent>;
  deleteMedicalBackgroundDetail?: MutationToDeleteMedicalBackgroundDetailResolver<TParent>;
  deleteMedicalBackground?: MutationToDeleteMedicalBackgroundResolver<TParent>;
  deleteMedicalConfig?: MutationToDeleteMedicalConfigResolver<TParent>;
  deleteMedicalService?: MutationToDeleteMedicalServiceResolver<TParent>;
  deleteMedicine?: MutationToDeleteMedicineResolver<TParent>;
  deleteVaccine?: MutationToDeleteVaccineResolver<TParent>;
  deleteVitalSign?: MutationToDeleteVitalSignResolver<TParent>;
  deleteMedicRecipe?: MutationToDeleteMedicRecipeResolver<TParent>;
  deleteRecipeConfig?: MutationToDeleteRecipeConfigResolver<TParent>;
  deleteRegistSesion?: MutationToDeleteRegistSesionResolver<TParent>;
  deleteTherapy?: MutationToDeleteTherapyResolver<TParent>;
  deleteDiagnostic?: MutationToDeleteDiagnosticResolver<TParent>;
  deleteConsultNote?: MutationToDeleteConsultNoteResolver<TParent>;
  deletePacientNote?: MutationToDeletePacientNoteResolver<TParent>;
  deletePacientMedicalBackground?: MutationToDeletePacientMedicalBackgroundResolver<TParent>;
  deleteBillingRequest?: MutationToDeleteBillingRequestResolver<TParent>;
  deleteFormat?: MutationToDeleteFormatResolver<TParent>;
  printWithImageFromUrl?: MutationToPrintWithImageFromUrlResolver<TParent>;
  createApiService?: MutationToCreateApiServiceResolver<TParent>;
  updateApiService?: MutationToUpdateApiServiceResolver<TParent>;
  createFolder?: MutationToCreateFolderResolver<TParent>;
  updateFolder?: MutationToUpdateFolderResolver<TParent>;
  deleteFolder?: MutationToDeleteFolderResolver<TParent>;
  createFile?: MutationToCreateFileResolver<TParent>;
  updateFile?: MutationToUpdateFileResolver<TParent>;
  deleteFile?: MutationToDeleteFileResolver<TParent>;
  shareFile?: MutationToShareFileResolver<TParent>;
  shareFolder?: MutationToShareFolderResolver<TParent>;
  stopSharingFolder?: MutationToStopSharingFolderResolver<TParent>;
  stopSharingFile?: MutationToStopSharingFileResolver<TParent>;
  uploadFilePrivate?: MutationToUploadFilePrivateResolver<TParent>;
  createRoomSession?: MutationToCreateRoomSessionResolver<TParent>;
  deleteRoomSession?: MutationToDeleteRoomSessionResolver<TParent>;
  startRoomRecorder?: MutationToStartRoomRecorderResolver<TParent>;
  stopRoomRecorder?: MutationToStopRoomRecorderResolver<TParent>;
  createHiring?: MutationToCreateHiringResolver<TParent>;
  updateHiring?: MutationToUpdateHiringResolver<TParent>;
  deleteHiring?: MutationToDeleteHiringResolver<TParent>;
  createHiringType?: MutationToCreateHiringTypeResolver<TParent>;
  updateHiringType?: MutationToUpdateHiringTypeResolver<TParent>;
  deleteHiringType?: MutationToDeleteHiringTypeResolver<TParent>;
  createShift?: MutationToCreateShiftResolver<TParent>;
  updateShift?: MutationToUpdateShiftResolver<TParent>;
  deleteShift?: MutationToDeleteShiftResolver<TParent>;
  createDocumentCategory?: MutationToCreateDocumentCategoryResolver<TParent>;
  updateDocumentCategory?: MutationToUpdateDocumentCategoryResolver<TParent>;
  deleteDocumentCategory?: MutationToDeleteDocumentCategoryResolver<TParent>;
  createDocumentCategoryDetail?: MutationToCreateDocumentCategoryDetailResolver<TParent>;
  updateDocumentCategoryDetail?: MutationToUpdateDocumentCategoryDetailResolver<TParent>;
  deleteDocumentCategoryDetail?: MutationToDeleteDocumentCategoryDetailResolver<TParent>;
  createDocument?: MutationToCreateDocumentResolver<TParent>;
  updateDocument?: MutationToUpdateDocumentResolver<TParent>;
  deleteDocument?: MutationToDeleteDocumentResolver<TParent>;
  createDocumentTemplate?: MutationToCreateDocumentTemplateResolver<TParent>;
  updateDocumentTemplate?: MutationToUpdateDocumentTemplateResolver<TParent>;
  deleteDocumentTemplate?: MutationToDeleteDocumentTemplateResolver<TParent>;
  createTemplatePage?: MutationToCreateTemplatePageResolver<TParent>;
  updateTemplatePage?: MutationToUpdateTemplatePageResolver<TParent>;
  deleteTemplatePage?: MutationToDeleteTemplatePageResolver<TParent>;
  createDocumentTag?: MutationToCreateDocumentTagResolver<TParent>;
  updateDocumentTag?: MutationToUpdateDocumentTagResolver<TParent>;
  deleteDocumentTag?: MutationToDeleteDocumentTagResolver<TParent>;
  createDocumentScan?: MutationToCreateDocumentScanResolver<TParent>;
  updateDocumentScan?: MutationToUpdateDocumentScanResolver<TParent>;
  deleteDocumentScan?: MutationToDeleteDocumentScanResolver<TParent>;
  createDocumentRead?: MutationToCreateDocumentReadResolver<TParent>;
  updateDocumentRead?: MutationToUpdateDocumentReadResolver<TParent>;
  deleteDocumentRead?: MutationToDeleteDocumentReadResolver<TParent>;
  readTextFromImage?: MutationToReadTextFromImageResolver<TParent>;
}

export interface MutationToCreateMemberArgs {
  input: ICreateMemberInput;
}
export interface MutationToCreateMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToLoginMemberArgs {
  input: ILoginMemberInput;
}
export interface MutationToLoginMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToLoginMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateCompanyArgs {
  input: ICreateCompanyInput;
}
export interface MutationToCreateCompanyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateCompanyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateProjectArgs {
  input: ICreateProjectInput;
}
export interface MutationToCreateProjectResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToGenerateSlugArgs {
  phrase: string;
}
export interface MutationToGenerateSlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToGenerateSlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateNewRolesArgs {
  projectId: IUUID;
}
export interface MutationToCreateNewRolesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateNewRolesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateUserArgs {
  input: ICreateUserInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateUserWithoutMailArgs {
  input: ICreateUserWithoutMailInput;
}
export interface MutationToCreateUserWithoutMailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateUserWithoutMailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateProfileArgs {
  input: IUpdateProfileInput;
}
export interface MutationToUpdateProfileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateProfileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePasswordArgs {
  input: IUpdatePasswordInput;
}
export interface MutationToUpdatePasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdatePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToActiveMemberArgs {
  input: IActiveMemberInput;
}
export interface MutationToActiveMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToActiveMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateProjectRoleArgs {
  input: ICreateProjectRoleInput;
}
export interface MutationToCreateProjectRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateProjectRoleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToRemoveAccentArgs {
  txt: string;
}
export interface MutationToRemoveAccentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToRemoveAccentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUploadPhotoProfileArgs {
  input: IUploadPhotoProfileInput;
}
export interface MutationToUploadPhotoProfileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUploadPhotoProfileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteProjectArgs {
  input: IDeleteProjectInput;
}
export interface MutationToDeleteProjectResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateCompanyArgs {
  input: IUpdateCompanyInput;
}
export interface MutationToUpdateCompanyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateCompanyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToRestorePasswordArgs {
  input: IRestorePasswordInput;
}
export interface MutationToRestorePasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRestorePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToRecoverPasswordArgs {
  input: IRecoverPasswordInput;
}
export interface MutationToRecoverPasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRecoverPasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToVerifyTokenArgs {
  input: IVerifyTokenInput;
}
export interface MutationToVerifyTokenResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToVerifyTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateGroupArgs {
  input: ICreateGroupInput;
}
export interface MutationToCreateGroupResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateGroupArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAddGroupToMemberArgs {
  input: IAddGroupToMemberInput;
}
export interface MutationToAddGroupToMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddGroupToMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAddGroupToTaxonomyArgs {
  input: IAddGroupToTaxonomyInput;
}
export interface MutationToAddGroupToTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddGroupToTaxonomyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAddTaxonomyToMemberArgs {
  input: IAddTaxonomyToMemberInput;
}
export interface MutationToAddTaxonomyToMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddTaxonomyToMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteGroupArgs {
  input: IDeleteGroupInput;
}
export interface MutationToDeleteGroupResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteGroupArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteGroupTaxonomyArgs {
  input: IDeleteGroupTaxonomyInput;
}
export interface MutationToDeleteGroupTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteGroupTaxonomyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMemberGroupArgs {
  input: IDeleteMemberGroupMutationInput;
}
export interface MutationToDeleteMemberGroupResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMemberGroupArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMemberTaxonomyArgs {
  input: IDeleteMemberTaxonomyInput;
}
export interface MutationToDeleteMemberTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMemberTaxonomyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMemberArgs {
  id: IUUID;
}
export interface MutationToDeleteMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteProjectRoleArgs {
  input: IDeleteProjectRoleInput;
}
export interface MutationToDeleteProjectRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteProjectRoleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateUpdatePermissionArgs {
  input: ICreateUpdatePermissionInput;
}
export interface MutationToCreateUpdatePermissionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateUpdatePermissionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateProjectArgs {
  input: IUpdateProjectInput;
}
export interface MutationToUpdateProjectResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateProjectRoleArgs {
  input: IUpdateProjectRoleInput;
}
export interface MutationToUpdateProjectRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateProjectRoleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateGroupArgs {
  input: IUpdateGroupInput;
}
export interface MutationToUpdateGroupResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateGroupArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAssociationServiceToProjectArgs {
  input: IAssociationServiceToProjectInput;
}
export interface MutationToAssociationServiceToProjectResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAssociationServiceToProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateArrayFunctionArgs {
  input: ICreateArrayFunctionInput;
}
export interface MutationToCreateArrayFunctionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateArrayFunctionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteArrayFunctionArgs {
  input: IDeleteArrayFunctionInput;
}
export interface MutationToDeleteArrayFunctionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteArrayFunctionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateServiceProjectArgs {
  input: IUpdateServiceProjectInput;
}
export interface MutationToUpdateServiceProjectResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateServiceProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteServiceProjectArgs {
  input: IDeleteServiceProjectInput;
}
export interface MutationToDeleteServiceProjectResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteServiceProjectArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateEventTypeArgs {
  input: ICreateEventTypeInput;
}
export interface MutationToCreateEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateSubEventTypeArgs {
  input: ICreateSubEventTypeInput;
}
export interface MutationToCreateSubEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateSubEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteSubEventTypeArgs {
  input: IDeleteSubEventTypeInput;
}
export interface MutationToDeleteSubEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteSubEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateSubEventTypeArgs {
  input: IUpdateSubEventTypeInput;
}
export interface MutationToUpdateSubEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateSubEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAddSubTypeToEventTypeArgs {
  input: IAddSubTypeToEventTypeInput;
}
export interface MutationToAddSubTypeToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddSubTypeToEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteEventTypeArgs {
  eventTypeId: IUUID;
}
export interface MutationToDeleteEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateEventTypeArgs {
  input: IUpdateEventTypeInput;
}
export interface MutationToUpdateEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateEventTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateEventArgs {
  input: ICreateEventInput;
}
export interface MutationToCreateEventResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateEventArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateEventMemberArgs {
  input: ICreateEventMemberInput;
}
export interface MutationToCreateEventMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateEventMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateEventArgs {
  input: IUpdateEventInput;
}
export interface MutationToUpdateEventResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateEventArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteEventArgs {
  input: IDeleteEventInput;
}
export interface MutationToDeleteEventResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteEventArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateEventSessionArgs {
  input: ICreateEventSessionInput;
}
export interface MutationToCreateEventSessionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateEventSessionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateEventSessionArgs {
  input: IUpdateEventSessionInput;
}
export interface MutationToUpdateEventSessionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateEventSessionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteEventSessionArgs {
  input: IDeleteEventSessionInput;
}
export interface MutationToDeleteEventSessionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteEventSessionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToSendRecordatoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateScheduleArgs {
  input: ICreateScheduleInput;
}
export interface MutationToCreateScheduleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateScheduleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAssociationMemberToConsultArgs {
  input: IAssociationMemberToConsultInput;
}
export interface MutationToAssociationMemberToConsultResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAssociationMemberToConsultArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCancellationMemberToConsultArgs {
  input: ICancellationMemberToConsultInput;
}
export interface MutationToCancellationMemberToConsultResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCancellationMemberToConsultArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAddChatMemberArgs {
  input: IAddChatMemberInput;
}
export interface MutationToAddChatMemberResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAddChatMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAddChatMemberWsArgs {
  input: IAddChatMemberWsInput;
}
export interface MutationToAddChatMemberWsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddChatMemberWsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToConversationIdArgs {
  input: IGetConversationIdInput;
}
export interface MutationToConversationIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConversationIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteReplyArgs {
  input: IDeleteReplyInput;
}
export interface MutationToDeleteReplyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteReplyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateArticleArgs {
  input: ICreateArticleInput;
}
export interface MutationToCreateArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToBlog_generateSlugArgs {
  phrase: string;
}
export interface MutationToBlog_generateSlugResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToBlog_generateSlugArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateStatusArticleArgs {
  input: IUpdateStatusArticleInput;
}
export interface MutationToUpdateStatusArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateStatusArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateTaxonomyArgs {
  input: ICreateTaxonomyInput;
}
export interface MutationToCreateTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateTaxonomyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateArticleArgs {
  input: IUpdateArticleInput;
}
export interface MutationToUpdateArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateTaxonomyArgs {
  input: IUpdateTaxonomyInput;
}
export interface MutationToUpdateTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateTaxonomyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteArticleArgs {
  input: IDeleteArticleInput;
}
export interface MutationToDeleteArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteArticleArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteTaxonomyArgs {
  input: IDeleteTaxonomyInput;
}
export interface MutationToDeleteTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteTaxonomyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToNewSurveyArgs {
  input: INewSurveyInput;
}
export interface MutationToNewSurveyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToNewSurveyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateSurveyArgs {
  input: IUpdateSurveyInput;
}
export interface MutationToUpdateSurveyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateSurveyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteSurveyArgs {
  input: IDeleteSurveyInput;
}
export interface MutationToDeleteSurveyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteSurveyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToNewQuestionArgs {
  input: INewQuestionInput;
}
export interface MutationToNewQuestionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToNewQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuestionArgs {
  input: IDeleteQuestionInput;
}
export interface MutationToDeleteQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuestionArgs {
  input: IUpdateQuestionInput;
}
export interface MutationToUpdateQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToNewOptionArgs {
  input: INewOptionInput;
}
export interface MutationToNewOptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToNewOptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteOptionArgs {
  input: IDeleteOptionInput;
}
export interface MutationToDeleteOptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteOptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateOptionArgs {
  input: IUpdateOptionInput;
}
export interface MutationToUpdateOptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateOptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAnswerQuestionArgs {
  input: IAnswerQuestionInput;
}
export interface MutationToAnswerQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAnswerQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateProductArgs {
  input: ICreateProductInput;
}
export interface MutationToCreateProductResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateProductArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateProductArgs {
  input: IUpdateProductInput;
}
export interface MutationToUpdateProductResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateProductArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteProductArgs {
  input: IDeleteProductInput;
}
export interface MutationToDeleteProductResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteProductArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateAddressArgs {
  input: ICreateAddressInput;
}
export interface MutationToCreateAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateAddressArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateAddressArgs {
  input: IUpdateAddressInput;
}
export interface MutationToUpdateAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateAddressArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteAddressArgs {
  input: IDeleteAddressInput;
}
export interface MutationToDeleteAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteAddressArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateUpdateShopArgs {
  input: ICreateUpdateShopInput;
}
export interface MutationToCreateUpdateShopResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateUpdateShopArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateServiceArgs {
  input: IServiceInput;
}
export interface MutationToCreateServiceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateServiceArgs {
  id: IUUID;
  input: IServiceInput;
}
export interface MutationToUpdateServiceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteServiceArgs {
  id: IUUID;
}
export interface MutationToDeleteServiceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateServiceQuizArgs {
  input: IServiceQuizInput;
}
export interface MutationToCreateServiceQuizResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateServiceQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateServiceQuizArgs {
  id: IUUID;
  input: IServiceQuizInput;
}
export interface MutationToUpdateServiceQuizResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateServiceQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteServiceQuizArgs {
  id: IUUID;
}
export interface MutationToDeleteServiceQuizResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteServiceQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizArgs {
  input: IQuizInput;
}
export interface MutationToCreateQuizResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizArgs {
  id: IUUID;
  input: IQuizInput;
}
export interface MutationToUpdateQuizResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteQuizArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizSectionArgs {
  input: IQuizSectionInput;
}
export interface MutationToCreateQuizSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizSectionArgs {
  id: IUUID;
  input: IQuizSectionInput;
}
export interface MutationToUpdateQuizSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizSectionArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizQuestionArgs {
  input: IQuizQuestionInput;
}
export interface MutationToCreateQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizQuestionArgs {
  id: IUUID;
  input: IQuizQuestionInput;
}
export interface MutationToUpdateQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizQuestionArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchQuizQuestionArgs {
  input: IUpdateBatchQuizQuestionInput;
}
export interface MutationToUpdateBatchQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchQuizQuestionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizQuestionAnswerArgs {
  input: IQuizQuestionAnswerInput;
}
export interface MutationToCreateQuizQuestionAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizQuestionAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizQuestionAnswerArgs {
  id: IUUID;
  input: IQuizQuestionAnswerInput;
}
export interface MutationToUpdateQuizQuestionAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizQuestionAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizQuestionAnswerArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizQuestionAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizQuestionAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizAnswerArgs {
  input: IQuizAnswerInput;
}
export interface MutationToCreateQuizAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizAnswerArgs {
  id: IUUID;
  input: IQuizAnswerInput;
}
export interface MutationToUpdateQuizAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizAnswerArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizMemberArgs {
  input: IQuizMemberInput;
}
export interface MutationToCreateQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizMemberArgs {
  id: IUUID;
  input: IQuizMemberInput;
}
export interface MutationToUpdateQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizMemberArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchQuizMemberArgs {
  input: IUpdateBatchQuizMemberInput;
}
export interface MutationToUpdateBatchQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchQuizMemberArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizMemberAnswerArgs {
  input: IQuizMemberAnswerInput;
}
export interface MutationToCreateQuizMemberAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizMemberAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizMemberAnswerArgs {
  id: IUUID;
  input: IQuizMemberAnswerInput;
}
export interface MutationToUpdateQuizMemberAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizMemberAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizMemberAnswerArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizMemberAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizMemberAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchQuizMemberAnswerArgs {
  input: IUpdateBatchQuizMemberAnswerInput;
}
export interface MutationToUpdateBatchQuizMemberAnswerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchQuizMemberAnswerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuizMemberDescriptionArgs {
  input: IQuizMemberDescriptionInput;
}
export interface MutationToCreateQuizMemberDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuizMemberDescriptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuizMemberDescriptionArgs {
  id: IUUID;
  input: IQuizMemberDescriptionInput;
}
export interface MutationToUpdateQuizMemberDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuizMemberDescriptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuizMemberDescriptionArgs {
  id: IUUID;
}
export interface MutationToDeleteQuizMemberDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuizMemberDescriptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchQuizMemberDescriptionArgs {
  input: IUpdateBatchQuizMemberDescriptionInput;
}
export interface MutationToUpdateBatchQuizMemberDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchQuizMemberDescriptionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateUpdateContactEmailArgs {
  input: ICreateUpdateContactEmailInput;
}
export interface MutationToCreateUpdateContactEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateUpdateContactEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToSendEmailArgs {
  input: ISendEmailInput;
}
export interface MutationToSendEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSendEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteContactEmailArgs {
  input: IDeleteContactEmailInput;
}
export interface MutationToDeleteContactEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteContactEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMethodPaymentArgs {
  input: ICreateMethodPaymentInput;
}
export interface MutationToCreateMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMethodPaymentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMethodPaymentArgs {
  input: IUpdateMethodPaymentInput;
}
export interface MutationToUpdateMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMethodPaymentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMethodPaymentArgs {
  input: IDeleteMethodPaymentInput;
}
export interface MutationToDeleteMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMethodPaymentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePaymentStripeArgs {
  input: ICreatePaymentStripeInput;
}
export interface MutationToCreatePaymentStripeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreatePaymentStripeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePaymentStripeToAccountArgs {
  input: ICreatePaymentStripeToAccountInput;
}
export interface MutationToCreatePaymentStripeToAccountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreatePaymentStripeToAccountArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateSuscriptionStripeArgs {
  input: ICreateSuscriptionStripeInput;
}
export interface MutationToCreateSuscriptionStripeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateSuscriptionStripeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateAccountStripeArgs {
  input: ICreateStripeAccountInput;
}
export interface MutationToCreateAccountStripeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateAccountStripeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeletePaymentArgs {
  input: IDeletePaymentInput;
}
export interface MutationToDeletePaymentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeletePaymentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePaymentArgs {
  input: IUpdatePaymentInput;
}
export interface MutationToUpdatePaymentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdatePaymentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateInvoiceArgs {
  input: ICreateInvoiceInput;
}
export interface MutationToCreateInvoiceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateInvoiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateStatusInvoiceArgs {
  input: IUpdateStatusInvoiceInput;
}
export interface MutationToUpdateStatusInvoiceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateStatusInvoiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToPutConfigArgs {
  input: IPutConfigInput;
}
export interface MutationToPutConfigResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteConfigArgs {
  input: IDeleteConfigInput;
}
export interface MutationToDeleteConfigResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateOrderPagesArgs {
  input: IUpdateOrderPageInput;
}
export interface MutationToUpdateOrderPagesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateOrderPagesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchWewbsiteComponentArgs {
  input: IUpdateBatchWewbsiteComponentInput;
}
export interface MutationToUpdateBatchWewbsiteComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchWewbsiteComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateComponentArgs {
  input: ICreateComponentInput;
}
export interface MutationToCreateComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateWebsiteComponentArgs {
  input: ICreateWebsiteComponentInput;
}
export interface MutationToCreateWebsiteComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateWebsiteComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateWebsitePageArgs {
  input: ICreateWebsitePageInput;
}
export interface MutationToCreateWebsitePageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateWebsitePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateWebsiteSeoArgs {
  input: ICreateWebsiteSeoInput;
}
export interface MutationToCreateWebsiteSeoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateWebsiteSeoArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateComponentArgs {
  input: IUpdateComponentInput;
}
export interface MutationToUpdateComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateWebsiteComponentArgs {
  input: IUpdateWebsiteComponentInput;
}
export interface MutationToUpdateWebsiteComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateWebsiteComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateWebsitePageArgs {
  input: IUpdateWebsitePageInput;
}
export interface MutationToUpdateWebsitePageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateWebsitePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateWebsiteSeoArgs {
  input: IUpdateWebsiteSeoInput;
}
export interface MutationToUpdateWebsiteSeoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateWebsiteSeoArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteComponentArgs {
  input: IDeleteComponentInput;
}
export interface MutationToDeleteComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteWebsiteComponentArgs {
  input: IDeleteWebsiteComponentInput;
}
export interface MutationToDeleteWebsiteComponentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteWebsiteComponentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteWebsitePageArgs {
  input: IDeleteWebsitePageInput;
}
export interface MutationToDeleteWebsitePageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteWebsitePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteWebsiteSeoArgs {
  input: IDeleteWebsiteSeoInput;
}
export interface MutationToDeleteWebsiteSeoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteWebsiteSeoArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateVideoCallArgs {
  input: ICreateVideoCallInput;
}
export interface MutationToCreateVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateVideoCallArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateVideoCallArgs {
  input: IUpdateVideoCallInput;
}
export interface MutationToUpdateVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateVideoCallArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteVideoCallArgs {
  input: IDeleteVideoCallInput;
}
export interface MutationToDeleteVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteVideoCallArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateAccessTokenArgs {
  input: ICreateAccessTokenInput;
}
export interface MutationToCreateAccessTokenResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateAccessTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateVideoRoomArgs {
  input: ICreateVideoRoomInput;
}
export interface MutationToCreateVideoRoomResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateVideoRoomArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToSendNotificationArgs {
  input: ISendNotificationUsersInput;
}
export interface MutationToSendNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSendNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToSendEmailDownloadArgs {
  input: ISendEmailDownloadInput;
}
export interface MutationToSendEmailDownloadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSendEmailDownloadArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuoteArgs {
  input: ICreateQuoteInput;
}
export interface MutationToCreateQuoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateNewOfficesArgs {
  projectId: IUUID;
}
export interface MutationToCreateNewOfficesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateNewOfficesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateNewProfilesArgs {
  projectId: IUUID;
}
export interface MutationToCreateNewProfilesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateNewProfilesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateInsurerArgs {
  input: ICreateInsurerInput;
}
export interface MutationToCreateInsurerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateInsurerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateOfficeArgs {
  input: ICreateOfficeInput;
}
export interface MutationToCreateOfficeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateOfficeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateRegistrationArgs {
  input: ICreateRegistrationInput;
}
export interface MutationToCreateRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateQuatorProfileArgs {
  input: ICreateQuatorProfileInput;
}
export interface MutationToCreateQuatorProfileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateQuatorProfileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteInsurerArgs {
  input: IDeleteInsurerInput;
}
export interface MutationToDeleteInsurerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteInsurerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteOfficeArgs {
  input: IDeleteOfficeInput;
}
export interface MutationToDeleteOfficeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteOfficeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteQuoterProfileArgs {
  input: IDeleteQuoterProfileInput;
}
export interface MutationToDeleteQuoterProfileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteQuoterProfileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateInsurerArgs {
  input: IUpdateInsurerInput;
}
export interface MutationToUpdateInsurerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateInsurerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateOfficeArgs {
  input: IUpdateOfficeInput;
}
export interface MutationToUpdateOfficeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateOfficeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuoterProfileArgs {
  input: IUpdateQuoterProfileInput;
}
export interface MutationToUpdateQuoterProfileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateQuoterProfileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateCatalogArgs {
  input: ICreateCatalogInput;
}
export interface MutationToCreateCatalogResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateCatalogArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToPopulateCredentialsArgs {
  input: IPopulateCredentialsInput;
}
export interface MutationToPopulateCredentialsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPopulateCredentialsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToPopulateServicesArgs {
  input: IPopulateServicesInput;
}
export interface MutationToPopulateServicesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPopulateServicesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToRunServiceQuoteArgs {
  input: IQuoterRequestInput;
}
export interface MutationToRunServiceQuoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRunServiceQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToEmissionCarArgs {
  input: IEmissionCarInput;
}
export interface MutationToEmissionCarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToEmissionCarArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateStaffQuoteArgs {
  input: IStaffQuoteInput;
}
export interface MutationToCreateStaffQuoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateStaffQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateStaffQuoteArgs {
  id: IUUID;
  input: IStaffQuoteInput;
}
export interface MutationToUpdateStaffQuoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateStaffQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteStaffQuoteArgs {
  id: IUUID;
}
export interface MutationToDeleteStaffQuoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteStaffQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateProposalArgs {
  input: IProposalInput;
}
export interface MutationToCreateProposalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateProposalArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateProposalArgs {
  id: IUUID;
  input: IProposalInput;
}
export interface MutationToUpdateProposalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateProposalArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteProposalArgs {
  id: IUUID;
}
export interface MutationToDeleteProposalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteProposalArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateCollaboratorArgs {
  input: ICollaboratorInput;
}
export interface MutationToCreateCollaboratorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateCollaboratorArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateCollaboratorArgs {
  id: IUUID;
  input: ICollaboratorInput;
}
export interface MutationToUpdateCollaboratorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateCollaboratorArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteCollaboratorArgs {
  id: IUUID;
}
export interface MutationToDeleteCollaboratorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteCollaboratorArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAssociationWithQuoterProfileArgs {
  input: IAssociationWithQuoterProfileInput;
}
export interface MutationToAssociationWithQuoterProfileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAssociationWithQuoterProfileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateQuoteArgs {
  input: IUpdateQuoteInput;
}
export interface MutationToUpdateQuoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateQuoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateInsurerCredentialArgs {
  input: ICreateInsurerCredentialInput;
}
export interface MutationToCreateInsurerCredentialResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateInsurerCredentialArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateInsurerCredentialArgs {
  input: IUpdateInsurerCredentialInput;
}
export interface MutationToUpdateInsurerCredentialResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateInsurerCredentialArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToRunJobInsurerMutationArgs {
  input: IRunJobInsurerMutationInput;
}
export interface MutationToRunJobInsurerMutationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRunJobInsurerMutationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToAssociationRelationCarArgs {
  input: IAssociationRelationCarInput;
}
export interface MutationToAssociationRelationCarResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAssociationRelationCarArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicCustomMetaArgs {
  input: IDynamicCustomMetaInput;
}
export interface MutationToCreateDynamicCustomMetaResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicCustomMetaArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicCustomMetaArgs {
  id: IUUID;
  input: IDynamicCustomMetaInput;
}
export interface MutationToUpdateDynamicCustomMetaResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicCustomMetaArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicCustomMetaArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicCustomMetaResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicCustomMetaArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchDynamicCustomMetaArgs {
  input: IUpdateBatchDynamicCustomMetaInput;
}
export interface MutationToUpdateBatchDynamicCustomMetaResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchDynamicCustomMetaArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicCustomValueArgs {
  input: IDynamicCustomValueInput;
}
export interface MutationToCreateDynamicCustomValueResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicCustomValueArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicCustomValueArgs {
  id: IUUID;
  input: IDynamicCustomValueInput;
}
export interface MutationToUpdateDynamicCustomValueResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicCustomValueArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicCustomValueArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicCustomValueResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicCustomValueArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBatchDynamicCustomValueArgs {
  input: IUpdateBatchDynamicCustomValueInput;
}
export interface MutationToUpdateBatchDynamicCustomValueResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBatchDynamicCustomValueArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicPageArgs {
  input: IDynamicPageInput;
}
export interface MutationToCreateDynamicPageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicPageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicPageArgs {
  id: IUUID;
  input: IDynamicPageInput;
}
export interface MutationToUpdateDynamicPageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicPageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicPageArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicPageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicPageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicBlockArgs {
  input: IDynamicBlockInput;
}
export interface MutationToCreateDynamicBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicBlockArgs {
  id: IUUID;
  input: IDynamicBlockInput;
}
export interface MutationToUpdateDynamicBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicBlockArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicSectionArgs {
  input: IDynamicSectionInput;
}
export interface MutationToCreateDynamicSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicSectionArgs {
  id: IUUID;
  input: IDynamicSectionInput;
}
export interface MutationToUpdateDynamicSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicSectionArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicSectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicSectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicSectionBlockArgs {
  input: IDynamicSectionBlockInput;
}
export interface MutationToCreateDynamicSectionBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicSectionBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicSectionBlockArgs {
  id: IUUID;
  input: IDynamicSectionBlockInput;
}
export interface MutationToUpdateDynamicSectionBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicSectionBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicSectionBlockArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicSectionBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicSectionBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDynamicTabArgs {
  input: IDynamicTabInput;
}
export interface MutationToCreateDynamicTabResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDynamicTabArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDynamicTabBlockArgs {
  id: IUUID;
  input: IDynamicTabInput;
}
export interface MutationToUpdateDynamicTabBlockResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDynamicTabBlockArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDynamicTabArgs {
  id: IUUID;
}
export interface MutationToDeleteDynamicTabResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDynamicTabArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateChargeArgs {
  input: ICreateChargeInput;
}
export interface MutationToCreateChargeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateChargeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateClinicHistoryArgs {
  input: ICreateClinicHistoryInput;
}
export interface MutationToCreateClinicHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateClinicHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateClinicHistoryMedicalBackgroundDetailArgs {
  input: ICreateClinicHistoryMedicalBackgroundDetailInput;
}
export interface MutationToCreateClinicHistoryMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateClinicHistoryMedicalBackgroundDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateEventDetailArgs {
  input: ICreateEventDetailInput;
}
export interface MutationToCreateEventDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateEventDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateFisicExamArgs {
  input: ICreateFisicExamInput;
}
export interface MutationToCreateFisicExamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateFisicExamArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateFormatArgs {
  input: ICreateFormatInput;
}
export interface MutationToCreateFormatResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateFormatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicalBackgroundDetailArgs {
  input: ICreateMedicalBackgroundDetailInput;
}
export interface MutationToCreateMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicalBackgroundDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicalBackgroundArgs {
  input: ICreateMedicalBackgroundInput;
}
export interface MutationToCreateMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicalConfigArgs {
  input: ICreateMedicalConfigInput;
}
export interface MutationToCreateMedicalConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicalConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicalServiceArgs {
  input: ICreateMedicalServiceInput;
}
export interface MutationToCreateMedicalServiceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicalServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicineArgs {
  input: ICreateMedicineInput;
}
export interface MutationToCreateMedicineResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicineArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateVaccineArgs {
  input: ICreateVaccineInput;
}
export interface MutationToCreateVaccineResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateVaccineArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateVitalSignsArgs {
  input: ICreateVitalSignsInput;
}
export interface MutationToCreateVitalSignsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateVitalSignsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicRecipeArgs {
  input: ICreateMedicRecipeInput;
}
export interface MutationToCreateMedicRecipeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicRecipeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateRecipeConfigArgs {
  input: ICreateRecipeConfigInput;
}
export interface MutationToCreateRecipeConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateRecipeConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateRegistSesionArgs {
  input: ICreateRegistSesionInput;
}
export interface MutationToCreateRegistSesionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateRegistSesionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePacientNoteArgs {
  input: ICreatePacientNoteInput;
}
export interface MutationToCreatePacientNoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreatePacientNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateTherapyArgs {
  input: ICreateTherapyInput;
}
export interface MutationToCreateTherapyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateTherapyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDiagnosticArgs {
  input: ICreateDiagnosticInput;
}
export interface MutationToCreateDiagnosticResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDiagnosticArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateConsultNoteArgs {
  input: ICreateConsultNoteInput;
}
export interface MutationToCreateConsultNoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateConsultNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicalBackgroundSetArgs {
  input: ICreateMedicalBackgroundSetInput;
}
export interface MutationToCreateMedicalBackgroundSetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicalBackgroundSetArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateMedicalBackgroundTemplateArgs {
  projectId: IUUID;
  formatId: IUUID;
}
export interface MutationToCreateMedicalBackgroundTemplateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateMedicalBackgroundTemplateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateVitalSignsTemplateArgs {
  input: ICreateVitalSignsTemplateInput;
}
export interface MutationToCreateVitalSignsTemplateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateVitalSignsTemplateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePacientMedicalBackgroundArgs {
  input: ICreatePacientMedicalBackgroundInput;
}
export interface MutationToCreatePacientMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreatePacientMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePatientVitalSignsResponseArgs {
  input: ICreatePatientVitalSignsResponseInput;
}
export interface MutationToCreatePatientVitalSignsResponseResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreatePatientVitalSignsResponseArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateChargeArgs {
  input: IUpdateChargeInput;
}
export interface MutationToUpdateChargeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateChargeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateClinicHistoryArgs {
  input: IUpdateClinicHistoryInput;
}
export interface MutationToUpdateClinicHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateClinicHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateClinicHistoryMedicalBackgroundDetailArgs {
  input: IUpdateClinicHistoryMedicalBackgroundDetailInput;
}
export interface MutationToUpdateClinicHistoryMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateClinicHistoryMedicalBackgroundDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateEventDetailArgs {
  input: IUpdateEventDetailInput;
}
export interface MutationToUpdateEventDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateEventDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateFisicExamArgs {
  input: IUpdateFisicExamInput;
}
export interface MutationToUpdateFisicExamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateFisicExamArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateFormatArgs {
  input: IUpdateFormatInput;
}
export interface MutationToUpdateFormatResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateFormatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMedicalBackgroundDetailArgs {
  input: IUpdateMedicalBackgroundDetailInput;
}
export interface MutationToUpdateMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMedicalBackgroundDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMedicalBackgroundArgs {
  input: IUpdateMedicalBackgroundInput;
}
export interface MutationToUpdateMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMedicalConfigArgs {
  input: IUpdateMedicalConfigInput;
}
export interface MutationToUpdateMedicalConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMedicalConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMedicalServiceArgs {
  input: IUpdateMedicalServiceInput;
}
export interface MutationToUpdateMedicalServiceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMedicalServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMedicineArgs {
  input: IUpdateMedicineInput;
}
export interface MutationToUpdateMedicineResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMedicineArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateVaccineArgs {
  input: IUpdateVaccineInput;
}
export interface MutationToUpdateVaccineResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateVaccineArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateVitalSignsArgs {
  input: IUpdateVitalSingsInput;
}
export interface MutationToUpdateVitalSignsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateVitalSignsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateMedicRecipeArgs {
  input: IUpdateMedicRecipeInput;
}
export interface MutationToUpdateMedicRecipeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateMedicRecipeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateRecipeConfigArgs {
  input: IUpdateRecipeConfigInput;
}
export interface MutationToUpdateRecipeConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateRecipeConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateRegistSesionArgs {
  input: IUpdateRegistSesionInput;
}
export interface MutationToUpdateRegistSesionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateRegistSesionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePacientNoteArgs {
  input: IUpdatePacientNoteInput;
}
export interface MutationToUpdatePacientNoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdatePacientNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateTherapyArgs {
  input: IUpdateTherapyInput;
}
export interface MutationToUpdateTherapyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateTherapyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDiagnosticArgs {
  input: IUpdateDiagnosticInput;
}
export interface MutationToUpdateDiagnosticResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDiagnosticArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateConsultNoteArgs {
  input: IUpdateConsultNoteInput;
}
export interface MutationToUpdateConsultNoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateConsultNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePacientMedicalBackgroundArgs {
  input: IUpdatePacientMedicalBackgroundInput;
}
export interface MutationToUpdatePacientMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdatePacientMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateBillingRequestArgs {
  input: IUpdateBillingRequestInput;
}
export interface MutationToUpdateBillingRequestResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBillingRequestArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateSortFormatArgs {
  input: IUpdateSortFormatInput;
}
export interface MutationToUpdateSortFormatResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateSortFormatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePatientVitalSignsResponseArgs {
  input: IUpdatePatientVitalSignsResponseInput;
}
export interface MutationToUpdatePatientVitalSignsResponseResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdatePatientVitalSignsResponseArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteChargeArgs {
  input: IDeleteChargeInput;
}
export interface MutationToDeleteChargeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteChargeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteClinicHistoryArgs {
  input: IDeleteClinicHistoryInput;
}
export interface MutationToDeleteClinicHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteClinicHistoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteClinicHistoryMedicalBackgrounDetailArgs {
  input: IDeleteClinicHistoryMedicalBackgroundDetailInput;
}
export interface MutationToDeleteClinicHistoryMedicalBackgrounDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteClinicHistoryMedicalBackgrounDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteConsultArgs {
  input: IDeleteConsultInput;
}
export interface MutationToDeleteConsultResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteConsultArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteFisicExamArgs {
  input: IDeleteFisicalExamInput;
}
export interface MutationToDeleteFisicExamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteFisicExamArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMedicalBackgroundDetailArgs {
  input: IDeleteMedicalBackgroundDetailInput;
}
export interface MutationToDeleteMedicalBackgroundDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMedicalBackgroundDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMedicalBackgroundArgs {
  input: IDeleteMedicalBackgroundInput;
}
export interface MutationToDeleteMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMedicalConfigArgs {
  input: IDeleteMedicalConfigInput;
}
export interface MutationToDeleteMedicalConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMedicalConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMedicalServiceArgs {
  input: IDeleteMedicalServiceinputInput;
}
export interface MutationToDeleteMedicalServiceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMedicalServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMedicineArgs {
  input: IDeleteMedicineinputInput;
}
export interface MutationToDeleteMedicineResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMedicineArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteVaccineArgs {
  input: IDeleteVaccineinputInput;
}
export interface MutationToDeleteVaccineResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteVaccineArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteVitalSignArgs {
  input: IDeleteVitalSignInput;
}
export interface MutationToDeleteVitalSignResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteVitalSignArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteMedicRecipeArgs {
  input: IDeleteMedicRecipeinputInput;
}
export interface MutationToDeleteMedicRecipeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteMedicRecipeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteRecipeConfigArgs {
  input: IDeleteRecipeConfiginputInput;
}
export interface MutationToDeleteRecipeConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteRecipeConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteRegistSesionArgs {
  input: IDeleteRegisSesioninputInput;
}
export interface MutationToDeleteRegistSesionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteRegistSesionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteTherapyArgs {
  input: IDeleteTherapyinputInput;
}
export interface MutationToDeleteTherapyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteTherapyArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDiagnosticArgs {
  input: IDeleteDiagnosticInput;
}
export interface MutationToDeleteDiagnosticResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDiagnosticArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteConsultNoteArgs {
  input: IDeleteConsultNoteInput;
}
export interface MutationToDeleteConsultNoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteConsultNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeletePacientNoteArgs {
  input: IDeletePacientNoteInput;
}
export interface MutationToDeletePacientNoteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeletePacientNoteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeletePacientMedicalBackgroundArgs {
  input: IDeletePacientMedicalBackgroundInput;
}
export interface MutationToDeletePacientMedicalBackgroundResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeletePacientMedicalBackgroundArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteBillingRequestArgs {
  input: IDeleteBillingRequestinputInput;
}
export interface MutationToDeleteBillingRequestResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteBillingRequestArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteFormatArgs {
  input: IDeleteFormatInput;
}
export interface MutationToDeleteFormatResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteFormatArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToPrintWithImageFromUrlArgs {
  input: ICreatePdfInput;
}
export interface MutationToPrintWithImageFromUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPrintWithImageFromUrlArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateApiServiceArgs {
  input: ICreateApiServiceInput;
}
export interface MutationToCreateApiServiceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateApiServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateApiServiceArgs {
  input: IUpdateApiServiceInput;
}
export interface MutationToUpdateApiServiceResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateApiServiceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateFolderArgs {
  input: IFolderInput;
}
export interface MutationToCreateFolderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateFolderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateFolderArgs {
  id: IUUID;
  input: IFolderInput;
}
export interface MutationToUpdateFolderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateFolderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteFolderArgs {
  input: IDeleteFolderMutationInput;
}
export interface MutationToDeleteFolderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteFolderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateFileArgs {
  input: ICreateFileInput;
}
export interface MutationToCreateFileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateFileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateFileArgs {
  input: IUpdateFilesInput;
}
export interface MutationToUpdateFileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateFileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteFileArgs {
  input: IDeleteFileMutationInput;
}
export interface MutationToDeleteFileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteFileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToShareFileArgs {
  input: IShareFileInput;
}
export interface MutationToShareFileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToShareFileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToShareFolderArgs {
  input: IShareFolderInput;
}
export interface MutationToShareFolderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToShareFolderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToStopSharingFolderArgs {
  input: IStopSharingFolderInput;
}
export interface MutationToStopSharingFolderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToStopSharingFolderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToStopSharingFileArgs {
  input: IStopSharingFileInput;
}
export interface MutationToStopSharingFileResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToStopSharingFileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUploadFilePrivateArgs {
  input: IUploadFilePrivateInput;
}
export interface MutationToUploadFilePrivateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUploadFilePrivateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateRoomSessionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteRoomSessionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToStartRoomRecorderArgs {
  input: IRoomRecorderInput;
}
export interface MutationToStartRoomRecorderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToStartRoomRecorderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToStopRoomRecorderArgs {
  input: IRoomRecorderInput;
}
export interface MutationToStopRoomRecorderResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToStopRoomRecorderArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateHiringArgs {
  input: IHiringInput;
}
export interface MutationToCreateHiringResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateHiringArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateHiringArgs {
  id: IUUID;
  input: IHiringInput;
}
export interface MutationToUpdateHiringResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateHiringArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteHiringArgs {
  id: IUUID;
}
export interface MutationToDeleteHiringResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteHiringArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateHiringTypeArgs {
  input: IHiringTypeInput;
}
export interface MutationToCreateHiringTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateHiringTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateHiringTypeArgs {
  id: IUUID;
  input: IHiringTypeInput;
}
export interface MutationToUpdateHiringTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateHiringTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteHiringTypeArgs {
  id: IUUID;
}
export interface MutationToDeleteHiringTypeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteHiringTypeArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateShiftArgs {
  input: IShiftInput;
}
export interface MutationToCreateShiftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateShiftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateShiftArgs {
  id: IUUID;
  input: IShiftInput;
}
export interface MutationToUpdateShiftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateShiftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteShiftArgs {
  id: IUUID;
}
export interface MutationToDeleteShiftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteShiftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentCategoryArgs {
  input: IDocumentCategoryInput;
}
export interface MutationToCreateDocumentCategoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentCategoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentCategoryArgs {
  id: IUUID;
  input: IDocumentCategoryInput;
}
export interface MutationToUpdateDocumentCategoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentCategoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentCategoryArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentCategoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentCategoryArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentCategoryDetailArgs {
  input: IDocumentCategoryDetailInput;
}
export interface MutationToCreateDocumentCategoryDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentCategoryDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentCategoryDetailArgs {
  id: IUUID;
  input: IDocumentCategoryDetailInput;
}
export interface MutationToUpdateDocumentCategoryDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentCategoryDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentCategoryDetailArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentCategoryDetailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentCategoryDetailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentArgs {
  input: IDocumentInput;
}
export interface MutationToCreateDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentArgs {
  id: IUUID;
  input: IDocumentInput;
}
export interface MutationToUpdateDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentTemplateArgs {
  input: IDocumentTemplateInput;
}
export interface MutationToCreateDocumentTemplateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentTemplateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentTemplateArgs {
  id: IUUID;
  input: IDocumentTemplateInput;
}
export interface MutationToUpdateDocumentTemplateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentTemplateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentTemplateArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentTemplateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentTemplateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateTemplatePageArgs {
  input: ITemplatePageInput;
}
export interface MutationToCreateTemplatePageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateTemplatePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateTemplatePageArgs {
  id: IUUID;
  input: ITemplatePageInput;
}
export interface MutationToUpdateTemplatePageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateTemplatePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteTemplatePageArgs {
  id: IUUID;
}
export interface MutationToDeleteTemplatePageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteTemplatePageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentTagArgs {
  input: IDocumentTagInput;
}
export interface MutationToCreateDocumentTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentTagArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentTagArgs {
  id: IUUID;
  input: IDocumentTagInput;
}
export interface MutationToUpdateDocumentTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentTagArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentTagArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentTagArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentScanArgs {
  input: IDocumentScanInput;
}
export interface MutationToCreateDocumentScanResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentScanArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentScanArgs {
  id: IUUID;
  input: IDocumentScanInput;
}
export interface MutationToUpdateDocumentScanResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentScanArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentScanArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentScanResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentScanArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateDocumentReadArgs {
  input: IDocumentReadInput;
}
export interface MutationToCreateDocumentReadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDocumentReadArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateDocumentReadArgs {
  id: IUUID;
  input: IDocumentReadInput;
}
export interface MutationToUpdateDocumentReadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDocumentReadArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteDocumentReadArgs {
  id: IUUID;
}
export interface MutationToDeleteDocumentReadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteDocumentReadArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToReadTextFromImageArgs {
  input: ICreateTemplateInput;
}
export interface MutationToReadTextFromImageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToReadTextFromImageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface ICreateMemberPayloadTypeResolver<TParent = any> {
  accessToken?: CreateMemberPayloadToAccessTokenResolver<TParent>;
  member?: CreateMemberPayloadToMemberResolver<TParent>;
}

export interface CreateMemberPayloadToAccessTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateMemberPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ILoginMemberPayloadTypeResolver<TParent = any> {
  accessToken?: LoginMemberPayloadToAccessTokenResolver<TParent>;
  member?: LoginMemberPayloadToMemberResolver<TParent>;
}

export interface LoginMemberPayloadToAccessTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LoginMemberPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateCompanyPayloadTypeResolver<TParent = any> {
  company?: CreateCompanyPayloadToCompanyResolver<TParent>;
}

export interface CreateCompanyPayloadToCompanyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateProjectPayloadTypeResolver<TParent = any> {
  project?: CreateProjectPayloadToProjectResolver<TParent>;
}

export interface CreateProjectPayloadToProjectResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateNewRolesPayloadTypeResolver<TParent = any> {
  message?: CreateNewRolesPayloadToMessageResolver<TParent>;
}

export interface CreateNewRolesPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateUserPayloadTypeResolver<TParent = any> {
  accessToken?: CreateUserPayloadToAccessTokenResolver<TParent>;
  member?: CreateUserPayloadToMemberResolver<TParent>;
}

export interface CreateUserPayloadToAccessTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateUserPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateProfilePayloadTypeResolver<TParent = any> {
  member?: UpdateProfilePayloadToMemberResolver<TParent>;
}

export interface UpdateProfilePayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdatePasswordPayloadTypeResolver<TParent = any> {
  member?: UpdatePasswordPayloadToMemberResolver<TParent>;
}

export interface UpdatePasswordPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IActiveMemberPayloadTypeResolver<TParent = any> {
  member?: ActiveMemberPayloadToMemberResolver<TParent>;
}

export interface ActiveMemberPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateProjectRolePayloadTypeResolver<TParent = any> {
  projectRole?: CreateProjectRolePayloadToProjectRoleResolver<TParent>;
}

export interface CreateProjectRolePayloadToProjectRoleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUploadPhotoProfilePayloadTypeResolver<TParent = any> {
  member?: UploadPhotoProfilePayloadToMemberResolver<TParent>;
}

export interface UploadPhotoProfilePayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteProjectPayloadTypeResolver<TParent = any> {
  project?: DeleteProjectPayloadToProjectResolver<TParent>;
}

export interface DeleteProjectPayloadToProjectResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateCompanyPayloadTypeResolver<TParent = any> {
  company?: UpdateCompanyPayloadToCompanyResolver<TParent>;
}

export interface UpdateCompanyPayloadToCompanyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRestorePasswordPayloadTypeResolver<TParent = any> {
  member?: RestorePasswordPayloadToMemberResolver<TParent>;
}

export interface RestorePasswordPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRecoverPasswordPayloadTypeResolver<TParent = any> {
  member?: RecoverPasswordPayloadToMemberResolver<TParent>;
}

export interface RecoverPasswordPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IVerifyTokenPayloadTypeResolver<TParent = any> {
  member?: VerifyTokenPayloadToMemberResolver<TParent>;
}

export interface VerifyTokenPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateGroupPayloadTypeResolver<TParent = any> {
  group?: CreateGroupPayloadToGroupResolver<TParent>;
}

export interface CreateGroupPayloadToGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddGroupToMemberPayloadTypeResolver<TParent = any> {
  memberGroup?: AddGroupToMemberPayloadToMemberGroupResolver<TParent>;
}

export interface AddGroupToMemberPayloadToMemberGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMemberGroupTypeResolver<TParent = any> {
  memberId?: MemberGroupToMemberIdResolver<TParent>;
  member?: MemberGroupToMemberResolver<TParent>;
  groupId?: MemberGroupToGroupIdResolver<TParent>;
  group?: MemberGroupToGroupResolver<TParent>;
}

export interface MemberGroupToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberGroupToMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberGroupToGroupIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MemberGroupToGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddGroupToTaxonomyPayloadTypeResolver<TParent = any> {
  groupTaxonomy?: AddGroupToTaxonomyPayloadToGroupTaxonomyResolver<TParent>;
}

export interface AddGroupToTaxonomyPayloadToGroupTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddTaxonomyToMemberPayloadTypeResolver<TParent = any> {
  memberTaxonomy?: AddTaxonomyToMemberPayloadToMemberTaxonomyResolver<TParent>;
}

export interface AddTaxonomyToMemberPayloadToMemberTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteGroupPayloadTypeResolver<TParent = any> {
  member?: DeleteGroupPayloadToMemberResolver<TParent>;
}

export interface DeleteGroupPayloadToMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteGroupTaxonomyPayloadTypeResolver<TParent = any> {
  memberTaxonomy?: DeleteGroupTaxonomyPayloadToMemberTaxonomyResolver<TParent>;
}

export interface DeleteGroupTaxonomyPayloadToMemberTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMemberGroupMutationPayloadTypeResolver<TParent = any> {
  memberGroup?: DeleteMemberGroupMutationPayloadToMemberGroupResolver<TParent>;
}

export interface DeleteMemberGroupMutationPayloadToMemberGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMemberTaxonomyPayloadTypeResolver<TParent = any> {
  memberTaxonomy?: DeleteMemberTaxonomyPayloadToMemberTaxonomyResolver<TParent>;
}

export interface DeleteMemberTaxonomyPayloadToMemberTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteProjectRolePayloadTypeResolver<TParent = any> {
  message?: DeleteProjectRolePayloadToMessageResolver<TParent>;
}

export interface DeleteProjectRolePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateUpdatePermissionPayloadTypeResolver<TParent = any> {
  permission?: CreateUpdatePermissionPayloadToPermissionResolver<TParent>;
}

export interface CreateUpdatePermissionPayloadToPermissionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateProjectPayloadTypeResolver<TParent = any> {
  project?: UpdateProjectPayloadToProjectResolver<TParent>;
}

export interface UpdateProjectPayloadToProjectResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateProjectRolePayloadTypeResolver<TParent = any> {
  projectRole?: UpdateProjectRolePayloadToProjectRoleResolver<TParent>;
}

export interface UpdateProjectRolePayloadToProjectRoleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateGroupPayloadTypeResolver<TParent = any> {
  group?: UpdateGroupPayloadToGroupResolver<TParent>;
}

export interface UpdateGroupPayloadToGroupResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAssociationServiceToProjectPayloadTypeResolver<
  TParent = any
> {
  projectMicroservice?: AssociationServiceToProjectPayloadToProjectMicroserviceResolver<TParent>;
}

export interface AssociationServiceToProjectPayloadToProjectMicroserviceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateArrayFunctionPayloadTypeResolver<TParent = any> {
  service?: CreateArrayFunctionPayloadToServiceResolver<TParent>;
}

export interface CreateArrayFunctionPayloadToServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteArrayFunctionPayloadTypeResolver<TParent = any> {
  service?: DeleteArrayFunctionPayloadToServiceResolver<TParent>;
}

export interface DeleteArrayFunctionPayloadToServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateServiceProjectPayloadTypeResolver<TParent = any> {
  message?: UpdateServiceProjectPayloadToMessageResolver<TParent>;
}

export interface UpdateServiceProjectPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteServiceProjectPayloadTypeResolver<TParent = any> {
  message?: DeleteServiceProjectPayloadToMessageResolver<TParent>;
}

export interface DeleteServiceProjectPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateEventTypePayloadTypeResolver<TParent = any> {
  message?: CreateEventTypePayloadToMessageResolver<TParent>;
}

export interface CreateEventTypePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateSubEventTypePayloadTypeResolver<TParent = any> {
  subEventType?: CreateSubEventTypePayloadToSubEventTypeResolver<TParent>;
}

export interface CreateSubEventTypePayloadToSubEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteSubEventTypePayloadTypeResolver<TParent = any> {
  message?: DeleteSubEventTypePayloadToMessageResolver<TParent>;
}

export interface DeleteSubEventTypePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateSubEventTypePayloadTypeResolver<TParent = any> {
  message?: UpdateSubEventTypePayloadToMessageResolver<TParent>;
}

export interface UpdateSubEventTypePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddSubTypeToEventTypePayloadTypeResolver<TParent = any> {
  message?: AddSubTypeToEventTypePayloadToMessageResolver<TParent>;
}

export interface AddSubTypeToEventTypePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteEventTypePayloadTypeResolver<TParent = any> {
  message?: DeleteEventTypePayloadToMessageResolver<TParent>;
}

export interface DeleteEventTypePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateEventTypePayloadTypeResolver<TParent = any> {
  message?: UpdateEventTypePayloadToMessageResolver<TParent>;
}

export interface UpdateEventTypePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateEventPayloadTypeResolver<TParent = any> {
  eventCalendar?: CreateEventPayloadToEventCalendarResolver<TParent>;
}

export interface CreateEventPayloadToEventCalendarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateEventMemberPayloadTypeResolver<TParent = any> {
  message?: CreateEventMemberPayloadToMessageResolver<TParent>;
}

export interface CreateEventMemberPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateEventPayloadTypeResolver<TParent = any> {
  eventCalendar?: UpdateEventPayloadToEventCalendarResolver<TParent>;
}

export interface UpdateEventPayloadToEventCalendarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteEventPayloadTypeResolver<TParent = any> {
  message?: DeleteEventPayloadToMessageResolver<TParent>;
}

export interface DeleteEventPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateEventSessionPayloadTypeResolver<TParent = any> {
  eventSession?: CreateEventSessionPayloadToEventSessionResolver<TParent>;
}

export interface CreateEventSessionPayloadToEventSessionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateEventSessionPayloadTypeResolver<TParent = any> {
  eventSession?: UpdateEventSessionPayloadToEventSessionResolver<TParent>;
}

export interface UpdateEventSessionPayloadToEventSessionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteEventSessionPayloadTypeResolver<TParent = any> {
  message?: DeleteEventSessionPayloadToMessageResolver<TParent>;
}

export interface DeleteEventSessionPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateSchedulePayloadTypeResolver<TParent = any> {
  message?: CreateSchedulePayloadToMessageResolver<TParent>;
}

export interface CreateSchedulePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAssociationMemberToConsultPayloadTypeResolver<TParent = any> {
  message?: AssociationMemberToConsultPayloadToMessageResolver<TParent>;
}

export interface AssociationMemberToConsultPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICancellationMemberToConsultPayloadTypeResolver<
  TParent = any
> {
  message?: CancellationMemberToConsultPayloadToMessageResolver<TParent>;
}

export interface CancellationMemberToConsultPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddChatMemberPayloadTypeResolver<TParent = any> {
  conversationReplies?: AddChatMemberPayloadToConversationRepliesResolver<TParent>;
}

export interface AddChatMemberPayloadToConversationRepliesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAddChatMemberWsPayloadTypeResolver<TParent = any> {
  conversationReplies?: AddChatMemberWsPayloadToConversationRepliesResolver<TParent>;
}

export interface AddChatMemberWsPayloadToConversationRepliesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IGetConversationIdPayloadTypeResolver<TParent = any> {
  conversationId?: GetConversationIdPayloadToConversationIdResolver<TParent>;
}

export interface GetConversationIdPayloadToConversationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteReplyPayloadTypeResolver<TParent = any> {
  message?: DeleteReplyPayloadToMessageResolver<TParent>;
}

export interface DeleteReplyPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateArticlePayloadTypeResolver<TParent = any> {
  article?: CreateArticlePayloadToArticleResolver<TParent>;
}

export interface CreateArticlePayloadToArticleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateStatusArticlePayloadTypeResolver<TParent = any> {
  article?: UpdateStatusArticlePayloadToArticleResolver<TParent>;
}

export interface UpdateStatusArticlePayloadToArticleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateTaxonomyPayloadTypeResolver<TParent = any> {
  taxonomy?: CreateTaxonomyPayloadToTaxonomyResolver<TParent>;
}

export interface CreateTaxonomyPayloadToTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateArticlePayloadTypeResolver<TParent = any> {
  article?: UpdateArticlePayloadToArticleResolver<TParent>;
}

export interface UpdateArticlePayloadToArticleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateTaxonomyPayloadTypeResolver<TParent = any> {
  taxonomy?: UpdateTaxonomyPayloadToTaxonomyResolver<TParent>;
}

export interface UpdateTaxonomyPayloadToTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteArticlePayloadTypeResolver<TParent = any> {
  article?: DeleteArticlePayloadToArticleResolver<TParent>;
}

export interface DeleteArticlePayloadToArticleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteTaxonomyPayloadTypeResolver<TParent = any> {
  taxonomy?: DeleteTaxonomyPayloadToTaxonomyResolver<TParent>;
}

export interface DeleteTaxonomyPayloadToTaxonomyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface INewSurveyPayloadTypeResolver<TParent = any> {
  survey?: NewSurveyPayloadToSurveyResolver<TParent>;
}

export interface NewSurveyPayloadToSurveyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateSurveyPayloadTypeResolver<TParent = any> {
  survey?: UpdateSurveyPayloadToSurveyResolver<TParent>;
}

export interface UpdateSurveyPayloadToSurveyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteSurveyPayloadTypeResolver<TParent = any> {
  survey?: DeleteSurveyPayloadToSurveyResolver<TParent>;
}

export interface DeleteSurveyPayloadToSurveyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface INewQuestionPayloadTypeResolver<TParent = any> {
  question?: NewQuestionPayloadToQuestionResolver<TParent>;
}

export interface NewQuestionPayloadToQuestionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteQuestionPayloadTypeResolver<TParent = any> {
  question?: DeleteQuestionPayloadToQuestionResolver<TParent>;
}

export interface DeleteQuestionPayloadToQuestionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateQuestionPayloadTypeResolver<TParent = any> {
  question?: UpdateQuestionPayloadToQuestionResolver<TParent>;
}

export interface UpdateQuestionPayloadToQuestionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface INewOptionPayloadTypeResolver<TParent = any> {
  option?: NewOptionPayloadToOptionResolver<TParent>;
}

export interface NewOptionPayloadToOptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteOptionPayloadTypeResolver<TParent = any> {
  option?: DeleteOptionPayloadToOptionResolver<TParent>;
}

export interface DeleteOptionPayloadToOptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateOptionPayloadTypeResolver<TParent = any> {
  option?: UpdateOptionPayloadToOptionResolver<TParent>;
}

export interface UpdateOptionPayloadToOptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAnswerQuestionPayloadTypeResolver<TParent = any> {
  message?: AnswerQuestionPayloadToMessageResolver<TParent>;
}

export interface AnswerQuestionPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateProductPayloadTypeResolver<TParent = any> {
  product?: CreateProductPayloadToProductResolver<TParent>;
}

export interface CreateProductPayloadToProductResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateProductPayloadTypeResolver<TParent = any> {
  product?: UpdateProductPayloadToProductResolver<TParent>;
}

export interface UpdateProductPayloadToProductResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteProductPayloadTypeResolver<TParent = any> {
  product?: DeleteProductPayloadToProductResolver<TParent>;
}

export interface DeleteProductPayloadToProductResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateAddressPayloadTypeResolver<TParent = any> {
  address?: CreateAddressPayloadToAddressResolver<TParent>;
}

export interface CreateAddressPayloadToAddressResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateAddressPayloadTypeResolver<TParent = any> {
  address?: UpdateAddressPayloadToAddressResolver<TParent>;
}

export interface UpdateAddressPayloadToAddressResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteAddressPayloadTypeResolver<TParent = any> {
  address?: DeleteAddressPayloadToAddressResolver<TParent>;
}

export interface DeleteAddressPayloadToAddressResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateUpdateShopPayloadTypeResolver<TParent = any> {
  shop?: CreateUpdateShopPayloadToShopResolver<TParent>;
}

export interface CreateUpdateShopPayloadToShopResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServicePayloadTypeResolver<TParent = any> {
  service?: ServicePayloadToServiceResolver<TParent>;
}

export interface ServicePayloadToServiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IServiceQuizPayloadTypeResolver<TParent = any> {
  serviceQuiz?: ServiceQuizPayloadToServiceQuizResolver<TParent>;
}

export interface ServiceQuizPayloadToServiceQuizResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizPayloadTypeResolver<TParent = any> {
  quiz?: QuizPayloadToQuizResolver<TParent>;
}

export interface QuizPayloadToQuizResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizSectionPayloadTypeResolver<TParent = any> {
  quizSection?: QuizSectionPayloadToQuizSectionResolver<TParent>;
}

export interface QuizSectionPayloadToQuizSectionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizQuestionPayloadTypeResolver<TParent = any> {
  quizQuestion?: QuizQuestionPayloadToQuizQuestionResolver<TParent>;
}

export interface QuizQuestionPayloadToQuizQuestionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizQuestionAnswerPayloadTypeResolver<TParent = any> {
  questionAnswer?: QuizQuestionAnswerPayloadToQuestionAnswerResolver<TParent>;
}

export interface QuizQuestionAnswerPayloadToQuestionAnswerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizAnswerPayloadTypeResolver<TParent = any> {
  quizAnswer?: QuizAnswerPayloadToQuizAnswerResolver<TParent>;
}

export interface QuizAnswerPayloadToQuizAnswerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberPayloadTypeResolver<TParent = any> {
  quizMember?: QuizMemberPayloadToQuizMemberResolver<TParent>;
}

export interface QuizMemberPayloadToQuizMemberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberAnswerPayloadTypeResolver<TParent = any> {
  memberAnswer?: QuizMemberAnswerPayloadToMemberAnswerResolver<TParent>;
}

export interface QuizMemberAnswerPayloadToMemberAnswerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuizMemberDescriptionPayloadTypeResolver<TParent = any> {
  memberDescription?: QuizMemberDescriptionPayloadToMemberDescriptionResolver<TParent>;
}

export interface QuizMemberDescriptionPayloadToMemberDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateUpdateContactEmailPayloadTypeResolver<TParent = any> {
  contactEmail?: CreateUpdateContactEmailPayloadToContactEmailResolver<TParent>;
}

export interface CreateUpdateContactEmailPayloadToContactEmailResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISendEmailPayloadTypeResolver<TParent = any> {
  responseEmail?: SendEmailPayloadToResponseEmailResolver<TParent>;
}

export interface SendEmailPayloadToResponseEmailResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IResponseEmailTypeResolver<TParent = any> {
  message?: ResponseEmailToMessageResolver<TParent>;
}

export interface ResponseEmailToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteContactEmailPayloadTypeResolver<TParent = any> {
  message?: DeleteContactEmailPayloadToMessageResolver<TParent>;
}

export interface DeleteContactEmailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMethodPaymentPayloadTypeResolver<TParent = any> {
  methodPayment?: CreateMethodPaymentPayloadToMethodPaymentResolver<TParent>;
}

export interface CreateMethodPaymentPayloadToMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMethodPaymentPayloadTypeResolver<TParent = any> {
  methodPayment?: UpdateMethodPaymentPayloadToMethodPaymentResolver<TParent>;
}

export interface UpdateMethodPaymentPayloadToMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMethodPaymentPayloadTypeResolver<TParent = any> {
  methodPayment?: DeleteMethodPaymentPayloadToMethodPaymentResolver<TParent>;
}

export interface DeleteMethodPaymentPayloadToMethodPaymentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreatePaymentStripePayloadTypeResolver<TParent = any> {
  transaction?: CreatePaymentStripePayloadToTransactionResolver<TParent>;
}

export interface CreatePaymentStripePayloadToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateSuscriptionStripePayloadTypeResolver<TParent = any> {
  userKey?: CreateSuscriptionStripePayloadToUserKeyResolver<TParent>;
  trans?: CreateSuscriptionStripePayloadToTransResolver<TParent>;
}

export interface CreateSuscriptionStripePayloadToUserKeyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateSuscriptionStripePayloadToTransResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAccountKeyTypeResolver<TParent = any> {
  projectId?: AccountKeyToProjectIdResolver<TParent>;
  memberId?: AccountKeyToMemberIdResolver<TParent>;
  accountServiceId?: AccountKeyToAccountServiceIdResolver<TParent>;
  customerServiceId?: AccountKeyToCustomerServiceIdResolver<TParent>;
  servicePayment?: AccountKeyToServicePaymentResolver<TParent>;
  id?: AccountKeyToIdResolver<TParent>;
  createdAt?: AccountKeyToCreatedAtResolver<TParent>;
  updatedAt?: AccountKeyToUpdatedAtResolver<TParent>;
}

export interface AccountKeyToProjectIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToMemberIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToAccountServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToCustomerServiceIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToServicePaymentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AccountKeyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateStripeAccountPayloadTypeResolver<TParent = any> {
  userKey?: CreateStripeAccountPayloadToUserKeyResolver<TParent>;
}

export interface CreateStripeAccountPayloadToUserKeyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeletePaymentPayloadTypeResolver<TParent = any> {
  transaction?: DeletePaymentPayloadToTransactionResolver<TParent>;
}

export interface DeletePaymentPayloadToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdatePaymentPayloadTypeResolver<TParent = any> {
  transaction?: UpdatePaymentPayloadToTransactionResolver<TParent>;
}

export interface UpdatePaymentPayloadToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateInvoicePayloadTypeResolver<TParent = any> {
  invoice?: CreateInvoicePayloadToInvoiceResolver<TParent>;
}

export interface CreateInvoicePayloadToInvoiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateStatusInvoicePayloadTypeResolver<TParent = any> {
  invoice?: UpdateStatusInvoicePayloadToInvoiceResolver<TParent>;
}

export interface UpdateStatusInvoicePayloadToInvoiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPutConfigPayloadTypeResolver<TParent = any> {
  configuration?: PutConfigPayloadToConfigurationResolver<TParent>;
}

export interface PutConfigPayloadToConfigurationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteConfigPayloadTypeResolver<TParent = any> {
  configuration?: DeleteConfigPayloadToConfigurationResolver<TParent>;
}

export interface DeleteConfigPayloadToConfigurationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateOrderPagesPayloadTypeResolver<TParent = any> {
  items?: UpdateOrderPagesPayloadToItemsResolver<TParent>;
}

export interface UpdateOrderPagesPayloadToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPagesDtoTypeResolver<TParent = any> {
  pageId?: PagesDtoToPageIdResolver<TParent>;
  position?: PagesDtoToPositionResolver<TParent>;
}

export interface PagesDtoToPageIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PagesDtoToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateBatchWewbsiteComponentPayloadTypeResolver<
  TParent = any
> {
  items?: UpdateBatchWewbsiteComponentPayloadToItemsResolver<TParent>;
}

export interface UpdateBatchWewbsiteComponentPayloadToItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IComponentDtoTypeResolver<TParent = any> {
  webSitePageComponentId?: ComponentDtoToWebSitePageComponentIdResolver<TParent>;
  position?: ComponentDtoToPositionResolver<TParent>;
}

export interface ComponentDtoToWebSitePageComponentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentDtoToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateComponentPayloadTypeResolver<TParent = any> {
  message?: CreateComponentPayloadToMessageResolver<TParent>;
}

export interface CreateComponentPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateWebsiteComponentPayloadTypeResolver<TParent = any> {
  message?: CreateWebsiteComponentPayloadToMessageResolver<TParent>;
}

export interface CreateWebsiteComponentPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateWebsitePagePayloadTypeResolver<TParent = any> {
  message?: CreateWebsitePagePayloadToMessageResolver<TParent>;
}

export interface CreateWebsitePagePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateWebsiteSeoPayloadTypeResolver<TParent = any> {
  message?: CreateWebsiteSeoPayloadToMessageResolver<TParent>;
}

export interface CreateWebsiteSeoPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateComponentPayloadTypeResolver<TParent = any> {
  message?: UpdateComponentPayloadToMessageResolver<TParent>;
}

export interface UpdateComponentPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateWebsiteComponentPayloadTypeResolver<TParent = any> {
  message?: UpdateWebsiteComponentPayloadToMessageResolver<TParent>;
}

export interface UpdateWebsiteComponentPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateWebsitePagePayloadTypeResolver<TParent = any> {
  message?: UpdateWebsitePagePayloadToMessageResolver<TParent>;
}

export interface UpdateWebsitePagePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateWebsiteSeoPayloadTypeResolver<TParent = any> {
  message?: UpdateWebsiteSeoPayloadToMessageResolver<TParent>;
}

export interface UpdateWebsiteSeoPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteComponentPayloadTypeResolver<TParent = any> {
  message?: DeleteComponentPayloadToMessageResolver<TParent>;
}

export interface DeleteComponentPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteWebsiteComponentPayloadTypeResolver<TParent = any> {
  message?: DeleteWebsiteComponentPayloadToMessageResolver<TParent>;
}

export interface DeleteWebsiteComponentPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteWebsitePagePayloadTypeResolver<TParent = any> {
  message?: DeleteWebsitePagePayloadToMessageResolver<TParent>;
}

export interface DeleteWebsitePagePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteWebsiteSeoPayloadTypeResolver<TParent = any> {
  message?: DeleteWebsiteSeoPayloadToMessageResolver<TParent>;
}

export interface DeleteWebsiteSeoPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateVideoCallPayloadTypeResolver<TParent = any> {
  videoCall?: CreateVideoCallPayloadToVideoCallResolver<TParent>;
  roomAccessToken?: CreateVideoCallPayloadToRoomAccessTokenResolver<TParent>;
}

export interface CreateVideoCallPayloadToVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateVideoCallPayloadToRoomAccessTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRoomAccessTokenTypeResolver<TParent = any> {
  createdAt?: RoomAccessTokenToCreatedAtResolver<TParent>;
  roomName?: RoomAccessTokenToRoomNameResolver<TParent>;
  token?: RoomAccessTokenToTokenResolver<TParent>;
  participantIdentity?: RoomAccessTokenToParticipantIdentityResolver<TParent>;
}

export interface RoomAccessTokenToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomAccessTokenToRoomNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomAccessTokenToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomAccessTokenToParticipantIdentityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateVideoCallPayloadTypeResolver<TParent = any> {
  videoCall?: UpdateVideoCallPayloadToVideoCallResolver<TParent>;
}

export interface UpdateVideoCallPayloadToVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteVideoCallPayloadTypeResolver<TParent = any> {
  videoCall?: DeleteVideoCallPayloadToVideoCallResolver<TParent>;
}

export interface DeleteVideoCallPayloadToVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateVideoRoomPayloadTypeResolver<TParent = any> {
  videoCall?: CreateVideoRoomPayloadToVideoCallResolver<TParent>;
  roomAccessToken?: CreateVideoRoomPayloadToRoomAccessTokenResolver<TParent>;
}

export interface CreateVideoRoomPayloadToVideoCallResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateVideoRoomPayloadToRoomAccessTokenResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISendNotificationUsersPayloadTypeResolver<TParent = any> {
  message?: SendNotificationUsersPayloadToMessageResolver<TParent>;
}

export interface SendNotificationUsersPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISendEmailDownloadPayloadTypeResolver<TParent = any> {
  message?: SendEmailDownloadPayloadToMessageResolver<TParent>;
}

export interface SendEmailDownloadPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateQuotePayloadTypeResolver<TParent = any> {
  quoteId?: CreateQuotePayloadToQuoteIdResolver<TParent>;
}

export interface CreateQuotePayloadToQuoteIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateNewOfficesPayloadTypeResolver<TParent = any> {
  message?: CreateNewOfficesPayloadToMessageResolver<TParent>;
}

export interface CreateNewOfficesPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateNewProfilesPayloadTypeResolver<TParent = any> {
  message?: CreateNewProfilesPayloadToMessageResolver<TParent>;
}

export interface CreateNewProfilesPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateInsurerPayloadTypeResolver<TParent = any> {
  message?: CreateInsurerPayloadToMessageResolver<TParent>;
}

export interface CreateInsurerPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateOfficePayloadTypeResolver<TParent = any> {
  message?: CreateOfficePayloadToMessageResolver<TParent>;
}

export interface CreateOfficePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateRegistrationPayloadTypeResolver<TParent = any> {
  message?: CreateRegistrationPayloadToMessageResolver<TParent>;
}

export interface CreateRegistrationPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateQuatorProfilePayloadTypeResolver<TParent = any> {
  message?: CreateQuatorProfilePayloadToMessageResolver<TParent>;
}

export interface CreateQuatorProfilePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteInsurerPayloadTypeResolver<TParent = any> {
  message?: DeleteInsurerPayloadToMessageResolver<TParent>;
}

export interface DeleteInsurerPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteOfficePayloadTypeResolver<TParent = any> {
  message?: DeleteOfficePayloadToMessageResolver<TParent>;
}

export interface DeleteOfficePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteQuoterProfilePayloadTypeResolver<TParent = any> {
  message?: DeleteQuoterProfilePayloadToMessageResolver<TParent>;
}

export interface DeleteQuoterProfilePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateInsurerPayloadTypeResolver<TParent = any> {
  message?: UpdateInsurerPayloadToMessageResolver<TParent>;
}

export interface UpdateInsurerPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateOfficePayloadTypeResolver<TParent = any> {
  message?: UpdateOfficePayloadToMessageResolver<TParent>;
}

export interface UpdateOfficePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateQuoterProfilePayloadTypeResolver<TParent = any> {
  message?: UpdateQuoterProfilePayloadToMessageResolver<TParent>;
}

export interface UpdateQuoterProfilePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateCatalogPayloadTypeResolver<TParent = any> {
  message?: CreateCatalogPayloadToMessageResolver<TParent>;
}

export interface CreateCatalogPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPopulateCredentialsPayloadTypeResolver<TParent = any> {
  message?: PopulateCredentialsPayloadToMessageResolver<TParent>;
}

export interface PopulateCredentialsPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPopulateServicesPayloadTypeResolver<TParent = any> {
  message?: PopulateServicesPayloadToMessageResolver<TParent>;
}

export interface PopulateServicesPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRunServicePayloadTypeResolver<TParent = any> {
  quoterResponse?: RunServicePayloadToQuoterResponseResolver<TParent>;
}

export interface RunServicePayloadToQuoterResponseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoterResponseTypeResolver<TParent = any> {
  primaTotal?: QuoterResponseToPrimaTotalResolver<TParent>;
  coverages?: QuoterResponseToCoveragesResolver<TParent>;
  quoteId?: QuoterResponseToQuoteIdResolver<TParent>;
  package?: QuoterResponseToPackageResolver<TParent>;
  product?: QuoterResponseToProductResolver<TParent>;
  quoteFolio?: QuoterResponseToQuoteFolioResolver<TParent>;
  beginDate?: QuoterResponseToBeginDateResolver<TParent>;
  endDate?: QuoterResponseToEndDateResolver<TParent>;
  carCompanyCode?: QuoterResponseToCarCompanyCodeResolver<TParent>;
  parentId?: QuoterResponseToParentIdResolver<TParent>;
  responseQuoter?: QuoterResponseToResponseQuoterResolver<TParent>;
}

export interface QuoterResponseToPrimaTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToCoveragesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToQuoteIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToPackageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToQuoteFolioResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToBeginDateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToEndDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToCarCompanyCodeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToParentIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoterResponseToResponseQuoterResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICoverageServiceTypeResolver<TParent = any> {
  coverageName?: CoverageServiceToCoverageNameResolver<TParent>;
  cobId?: CoverageServiceToCobIdResolver<TParent>;
  coverageSum?: CoverageServiceToCoverageSumResolver<TParent>;
  coverageDeductible?: CoverageServiceToCoverageDeductibleResolver<TParent>;
  total?: CoverageServiceToTotalResolver<TParent>;
}

export interface CoverageServiceToCoverageNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageServiceToCobIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageServiceToCoverageSumResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageServiceToCoverageDeductibleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoverageServiceToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IResponseApiInsurerTypeResolver<TParent = any> {
  id?: ResponseApiInsurerToIdResolver<TParent>;
  parent_car_form?: ResponseApiInsurerToParent_car_formResolver<TParent>;
  prima_total?: ResponseApiInsurerToPrima_totalResolver<TParent>;
  quote_selected?: ResponseApiInsurerToQuote_selectedResolver<TParent>;
  emitido?: ResponseApiInsurerToEmitidoResolver<TParent>;
  url?: ResponseApiInsurerToUrlResolver<TParent>;
  paquete?: ResponseApiInsurerToPaqueteResolver<TParent>;
  frecuencia_pago?: ResponseApiInsurerToFrecuencia_pagoResolver<TParent>;
  dER?: ResponseApiInsurerToDERResolver<TParent>;
  cVE?: ResponseApiInsurerToCVEResolver<TParent>;
  iVA?: ResponseApiInsurerToIVAResolver<TParent>;
  rEC?: ResponseApiInsurerToRECResolver<TParent>;
  car_descr?: ResponseApiInsurerToCar_descrResolver<TParent>;
  folio_quote?: ResponseApiInsurerToFolio_quoteResolver<TParent>;
  fecha_inicio?: ResponseApiInsurerToFecha_inicioResolver<TParent>;
  fecha_fin?: ResponseApiInsurerToFecha_finResolver<TParent>;
  car_company_code?: ResponseApiInsurerToCar_company_codeResolver<TParent>;
  parent_id?: ResponseApiInsurerToParent_idResolver<TParent>;
  service?: ResponseApiInsurerToServiceResolver<TParent>;
  quote_coverages?: ResponseApiInsurerToQuote_coveragesResolver<TParent>;
  quote_pay_frecuency?: ResponseApiInsurerToQuote_pay_frecuencyResolver<TParent>;
  discount_services?: ResponseApiInsurerToDiscount_servicesResolver<TParent>;
}

export interface ResponseApiInsurerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToParent_car_formResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToPrima_totalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToQuote_selectedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToEmitidoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToPaqueteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToFrecuencia_pagoResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToDERResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToCVEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToIVAResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToRECResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToCar_descrResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToFolio_quoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToFecha_inicioResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToFecha_finResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToCar_company_codeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToParent_idResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToQuote_coveragesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToQuote_pay_frecuencyResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseApiInsurerToDiscount_servicesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface Imultiquoter_ServiceTypeResolver<TParent = any> {
  url?: multiquoter_ServiceToUrlResolver<TParent>;
  name?: multiquoter_ServiceToNameResolver<TParent>;
  id?: multiquoter_ServiceToIdResolver<TParent>;
}

export interface multiquoter_ServiceToUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface multiquoter_ServiceToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface multiquoter_ServiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuoteCoverageTypeResolver<TParent = any> {
  coverage_name?: QuoteCoverageToCoverage_nameResolver<TParent>;
  cob_id?: QuoteCoverageToCob_idResolver<TParent>;
  sum_coverage?: QuoteCoverageToSum_coverageResolver<TParent>;
  deductible_coverage?: QuoteCoverageToDeductible_coverageResolver<TParent>;
  total?: QuoteCoverageToTotalResolver<TParent>;
}

export interface QuoteCoverageToCoverage_nameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteCoverageToCob_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteCoverageToSum_coverageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteCoverageToDeductible_coverageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteCoverageToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IQuotePayFrecuencyTypeResolver<TParent = any> {
  id?: QuotePayFrecuencyToIdResolver<TParent>;
  first_pay?: QuotePayFrecuencyToFirst_payResolver<TParent>;
  tipe?: QuotePayFrecuencyToTipeResolver<TParent>;
  second_pay?: QuotePayFrecuencyToSecond_payResolver<TParent>;
  total_amount?: QuotePayFrecuencyToTotal_amountResolver<TParent>;
  fecha_inicio?: QuotePayFrecuencyToFecha_inicioResolver<TParent>;
  fecha_fin?: QuotePayFrecuencyToFecha_finResolver<TParent>;
}

export interface QuotePayFrecuencyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuotePayFrecuencyToFirst_payResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuotePayFrecuencyToTipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuotePayFrecuencyToSecond_payResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuotePayFrecuencyToTotal_amountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuotePayFrecuencyToFecha_inicioResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuotePayFrecuencyToFecha_finResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDiscountServiceTypeResolver<TParent = any> {
  percentage?: DiscountServiceToPercentageResolver<TParent>;
}

export interface DiscountServiceToPercentageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IEmissionCarPayloadTypeResolver<TParent = any> {
  message?: EmissionCarPayloadToMessageResolver<TParent>;
}

export interface EmissionCarPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IStaffQuotePayloadTypeResolver<TParent = any> {
  staffQuote?: StaffQuotePayloadToStaffQuoteResolver<TParent>;
}

export interface StaffQuotePayloadToStaffQuoteResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IProposalPayloadTypeResolver<TParent = any> {
  proposal?: ProposalPayloadToProposalResolver<TParent>;
}

export interface ProposalPayloadToProposalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICollaboratorPayloadTypeResolver<TParent = any> {
  collaborator?: CollaboratorPayloadToCollaboratorResolver<TParent>;
}

export interface CollaboratorPayloadToCollaboratorResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAssociationWithQuoterProfilePayloadTypeResolver<
  TParent = any
> {
  message?: AssociationWithQuoterProfilePayloadToMessageResolver<TParent>;
}

export interface AssociationWithQuoterProfilePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateQuotePayloadTypeResolver<TParent = any> {
  message?: UpdateQuotePayloadToMessageResolver<TParent>;
}

export interface UpdateQuotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateInsurerCredentialPayloadTypeResolver<TParent = any> {
  message?: CreateInsurerCredentialPayloadToMessageResolver<TParent>;
}

export interface CreateInsurerCredentialPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateInsurerCredentialPayloadTypeResolver<TParent = any> {
  message?: UpdateInsurerCredentialPayloadToMessageResolver<TParent>;
}

export interface UpdateInsurerCredentialPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRunJobInsurerMutationPayloadTypeResolver<TParent = any> {
  message?: RunJobInsurerMutationPayloadToMessageResolver<TParent>;
}

export interface RunJobInsurerMutationPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IAssociationRelationCarPayloadTypeResolver<TParent = any> {
  message?: AssociationRelationCarPayloadToMessageResolver<TParent>;
}

export interface AssociationRelationCarPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicCustomMetaPayloadTypeResolver<TParent = any> {
  dynamicCustomMeta?: DynamicCustomMetaPayloadToDynamicCustomMetaResolver<TParent>;
}

export interface DynamicCustomMetaPayloadToDynamicCustomMetaResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicCustomValuePayloadTypeResolver<TParent = any> {
  dynamicCustomValue?: DynamicCustomValuePayloadToDynamicCustomValueResolver<TParent>;
}

export interface DynamicCustomValuePayloadToDynamicCustomValueResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicPagePayloadTypeResolver<TParent = any> {
  dynamicPage?: DynamicPagePayloadToDynamicPageResolver<TParent>;
}

export interface DynamicPagePayloadToDynamicPageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicBlockPayloadTypeResolver<TParent = any> {
  dynamicBlock?: DynamicBlockPayloadToDynamicBlockResolver<TParent>;
}

export interface DynamicBlockPayloadToDynamicBlockResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicSectionPayloadTypeResolver<TParent = any> {
  dynamicSection?: DynamicSectionPayloadToDynamicSectionResolver<TParent>;
}

export interface DynamicSectionPayloadToDynamicSectionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicSectionBlockPayloadTypeResolver<TParent = any> {
  dynamicSectionBlock?: DynamicSectionBlockPayloadToDynamicSectionBlockResolver<TParent>;
}

export interface DynamicSectionBlockPayloadToDynamicSectionBlockResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDynamicTabPayloadTypeResolver<TParent = any> {
  dynamicTab?: DynamicTabPayloadToDynamicTabResolver<TParent>;
}

export interface DynamicTabPayloadToDynamicTabResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateChargePayloadTypeResolver<TParent = any> {
  message?: CreateChargePayloadToMessageResolver<TParent>;
}

export interface CreateChargePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateClinicHistoryPayloadTypeResolver<TParent = any> {
  message?: CreateClinicHistoryPayloadToMessageResolver<TParent>;
}

export interface CreateClinicHistoryPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver<
  TParent = any
> {
  message?: CreateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}

export interface CreateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateEventDetailPayloadTypeResolver<TParent = any> {
  message?: CreateEventDetailPayloadToMessageResolver<TParent>;
}

export interface CreateEventDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateFisicExamPayloadTypeResolver<TParent = any> {
  message?: CreateFisicExamPayloadToMessageResolver<TParent>;
}

export interface CreateFisicExamPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateFormatPayloadTypeResolver<TParent = any> {
  format?: CreateFormatPayloadToFormatResolver<TParent>;
}

export interface CreateFormatPayloadToFormatResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicalBackgroundDetailPayloadTypeResolver<
  TParent = any
> {
  message?: CreateMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}

export interface CreateMedicalBackgroundDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicalBackgroundPayloadTypeResolver<TParent = any> {
  message?: CreateMedicalBackgroundPayloadToMessageResolver<TParent>;
}

export interface CreateMedicalBackgroundPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicalConfigPayloadTypeResolver<TParent = any> {
  message?: CreateMedicalConfigPayloadToMessageResolver<TParent>;
}

export interface CreateMedicalConfigPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicalServicePaylodTypeResolver<TParent = any> {
  message?: CreateMedicalServicePaylodToMessageResolver<TParent>;
}

export interface CreateMedicalServicePaylodToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicinePayloadTypeResolver<TParent = any> {
  message?: CreateMedicinePayloadToMessageResolver<TParent>;
}

export interface CreateMedicinePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateVaccinePayloadTypeResolver<TParent = any> {
  message?: CreateVaccinePayloadToMessageResolver<TParent>;
}

export interface CreateVaccinePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateVitalSignsPayloadTypeResolver<TParent = any> {
  message?: CreateVitalSignsPayloadToMessageResolver<TParent>;
}

export interface CreateVitalSignsPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicRecipePayloadTypeResolver<TParent = any> {
  message?: CreateMedicRecipePayloadToMessageResolver<TParent>;
}

export interface CreateMedicRecipePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateRecipeConfigPaylodTypeResolver<TParent = any> {
  message?: CreateRecipeConfigPaylodToMessageResolver<TParent>;
}

export interface CreateRecipeConfigPaylodToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateRegistSesionPayloadTypeResolver<TParent = any> {
  message?: CreateRegistSesionPayloadToMessageResolver<TParent>;
}

export interface CreateRegistSesionPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreatePacientNotePayloadTypeResolver<TParent = any> {
  message?: CreatePacientNotePayloadToMessageResolver<TParent>;
}

export interface CreatePacientNotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateDiagnosticPayloadTypeResolver<TParent = any> {
  message?: CreateDiagnosticPayloadToMessageResolver<TParent>;
}

export interface CreateDiagnosticPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateConsultNotePayloadTypeResolver<TParent = any> {
  message?: CreateConsultNotePayloadToMessageResolver<TParent>;
}

export interface CreateConsultNotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateMedicalBackgroundSetPayloadTypeResolver<TParent = any> {
  id?: CreateMedicalBackgroundSetPayloadToIdResolver<TParent>;
}

export interface CreateMedicalBackgroundSetPayloadToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreatePacientMedicalBackgroundPaylodTypeResolver<
  TParent = any
> {
  message?: CreatePacientMedicalBackgroundPaylodToMessageResolver<TParent>;
}

export interface CreatePacientMedicalBackgroundPaylodToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreatePatientVitalSignsResponsePayloadTypeResolver<
  TParent = any
> {
  message?: CreatePatientVitalSignsResponsePayloadToMessageResolver<TParent>;
}

export interface CreatePatientVitalSignsResponsePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateChargePayloadTypeResolver<TParent = any> {
  message?: UpdateChargePayloadToMessageResolver<TParent>;
}

export interface UpdateChargePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateClinicHistoryPayloadsTypeResolver<TParent = any> {
  message?: UpdateClinicHistoryPayloadsToMessageResolver<TParent>;
}

export interface UpdateClinicHistoryPayloadsToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver<
  TParent = any
> {
  message?: UpdateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}

export interface UpdateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateEventDetailtPayloadTypeResolver<TParent = any> {
  message?: UpdateEventDetailtPayloadToMessageResolver<TParent>;
}

export interface UpdateEventDetailtPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateFisicExamPayloadTypeResolver<TParent = any> {
  message?: UpdateFisicExamPayloadToMessageResolver<TParent>;
}

export interface UpdateFisicExamPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateFormatPayloadTypeResolver<TParent = any> {
  message?: UpdateFormatPayloadToMessageResolver<TParent>;
}

export interface UpdateFormatPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMedicalBackgroundDetailPayloadTypeResolver<
  TParent = any
> {
  message?: UpdateMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}

export interface UpdateMedicalBackgroundDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMedicalBackgroundPayloadTypeResolver<TParent = any> {
  message?: UpdateMedicalBackgroundPayloadToMessageResolver<TParent>;
}

export interface UpdateMedicalBackgroundPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMedicalConfigPayloadTypeResolver<TParent = any> {
  message?: UpdateMedicalConfigPayloadToMessageResolver<TParent>;
}

export interface UpdateMedicalConfigPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMedicalServicePayloadTypeResolver<TParent = any> {
  message?: UpdateMedicalServicePayloadToMessageResolver<TParent>;
}

export interface UpdateMedicalServicePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMedicinePayloadTypeResolver<TParent = any> {
  message?: UpdateMedicinePayloadToMessageResolver<TParent>;
}

export interface UpdateMedicinePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateVaccinePayloadTypeResolver<TParent = any> {
  message?: UpdateVaccinePayloadToMessageResolver<TParent>;
}

export interface UpdateVaccinePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateVitalSingsPayloadsTypeResolver<TParent = any> {
  message?: UpdateVitalSingsPayloadsToMessageResolver<TParent>;
}

export interface UpdateVitalSingsPayloadsToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateMedicRecipePayloadTypeResolver<TParent = any> {
  message?: UpdateMedicRecipePayloadToMessageResolver<TParent>;
}

export interface UpdateMedicRecipePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateRecipeConfigPayloadTypeResolver<TParent = any> {
  message?: UpdateRecipeConfigPayloadToMessageResolver<TParent>;
}

export interface UpdateRecipeConfigPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateRegistSesionPayloadTypeResolver<TParent = any> {
  message?: UpdateRegistSesionPayloadToMessageResolver<TParent>;
}

export interface UpdateRegistSesionPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdatePacientNotePayloadTypeResolver<TParent = any> {
  message?: UpdatePacientNotePayloadToMessageResolver<TParent>;
}

export interface UpdatePacientNotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateTherapyPayloadTypeResolver<TParent = any> {
  message?: UpdateTherapyPayloadToMessageResolver<TParent>;
}

export interface UpdateTherapyPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateDiagnosticPayloadTypeResolver<TParent = any> {
  message?: UpdateDiagnosticPayloadToMessageResolver<TParent>;
}

export interface UpdateDiagnosticPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateConsultNotePayloadTypeResolver<TParent = any> {
  message?: UpdateConsultNotePayloadToMessageResolver<TParent>;
}

export interface UpdateConsultNotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdatePacientMedicalBackgroundPayloadTypeResolver<
  TParent = any
> {
  message?: UpdatePacientMedicalBackgroundPayloadToMessageResolver<TParent>;
}

export interface UpdatePacientMedicalBackgroundPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateBillingRequestPayloadTypeResolver<TParent = any> {
  message?: UpdateBillingRequestPayloadToMessageResolver<TParent>;
}

export interface UpdateBillingRequestPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateSortFormatPayloadTypeResolver<TParent = any> {
  message?: UpdateSortFormatPayloadToMessageResolver<TParent>;
}

export interface UpdateSortFormatPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdatePatientVitalSignsResponsePayloadsTypeResolver<
  TParent = any
> {
  message?: UpdatePatientVitalSignsResponsePayloadsToMessageResolver<TParent>;
}

export interface UpdatePatientVitalSignsResponsePayloadsToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteChargePayloadTypeResolver<TParent = any> {
  message?: DeleteChargePayloadToMessageResolver<TParent>;
}

export interface DeleteChargePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteClinicHistoryPayloadTypeResolver<TParent = any> {
  message?: DeleteClinicHistoryPayloadToMessageResolver<TParent>;
}

export interface DeleteClinicHistoryPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteClinicHistoryMedicalBackgroundDetailPayloadTypeResolver<
  TParent = any
> {
  message?: DeleteClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}

export interface DeleteClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteConsultPayloadTypeResolver<TParent = any> {
  message?: DeleteConsultPayloadToMessageResolver<TParent>;
}

export interface DeleteConsultPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteFisicalExamPayloadTypeResolver<TParent = any> {
  message?: DeleteFisicalExamPayloadToMessageResolver<TParent>;
}

export interface DeleteFisicalExamPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMedicalBackgroundDetailPayloadTypeResolver<
  TParent = any
> {
  message?: DeleteMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}

export interface DeleteMedicalBackgroundDetailPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMedicalBackgroundPayloadTypeResolver<TParent = any> {
  message?: DeleteMedicalBackgroundPayloadToMessageResolver<TParent>;
}

export interface DeleteMedicalBackgroundPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMedicalConfigPayloadTypeResolver<TParent = any> {
  message?: DeleteMedicalConfigPayloadToMessageResolver<TParent>;
}

export interface DeleteMedicalConfigPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMedicalServicePayloadTypeResolver<TParent = any> {
  message?: DeleteMedicalServicePayloadToMessageResolver<TParent>;
}

export interface DeleteMedicalServicePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMedicinePayloadTypeResolver<TParent = any> {
  message?: DeleteMedicinePayloadToMessageResolver<TParent>;
}

export interface DeleteMedicinePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteVaccinePayloadTypeResolver<TParent = any> {
  message?: DeleteVaccinePayloadToMessageResolver<TParent>;
}

export interface DeleteVaccinePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteVitalSignPayloadTypeResolver<TParent = any> {
  message?: DeleteVitalSignPayloadToMessageResolver<TParent>;
}

export interface DeleteVitalSignPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteMedicRecipePayloadTypeResolver<TParent = any> {
  message?: DeleteMedicRecipePayloadToMessageResolver<TParent>;
}

export interface DeleteMedicRecipePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteRecipeConfigPayloadTypeResolver<TParent = any> {
  message?: DeleteRecipeConfigPayloadToMessageResolver<TParent>;
}

export interface DeleteRecipeConfigPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteRegistSesionPayloadTypeResolver<TParent = any> {
  message?: DeleteRegistSesionPayloadToMessageResolver<TParent>;
}

export interface DeleteRegistSesionPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteTherapyPayloadTypeResolver<TParent = any> {
  message?: DeleteTherapyPayloadToMessageResolver<TParent>;
}

export interface DeleteTherapyPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteDiagnosticPayloadTypeResolver<TParent = any> {
  message?: DeleteDiagnosticPayloadToMessageResolver<TParent>;
}

export interface DeleteDiagnosticPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteConsultNotePayloadTypeResolver<TParent = any> {
  message?: DeleteConsultNotePayloadToMessageResolver<TParent>;
}

export interface DeleteConsultNotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeletePacientNotePayloadTypeResolver<TParent = any> {
  message?: DeletePacientNotePayloadToMessageResolver<TParent>;
}

export interface DeletePacientNotePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeletePacientMedicalBackgroundPayloadTypeResolver<
  TParent = any
> {
  message?: DeletePacientMedicalBackgroundPayloadToMessageResolver<TParent>;
}

export interface DeletePacientMedicalBackgroundPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteBillingRequestPayloadTypeResolver<TParent = any> {
  message?: DeleteBillingRequestPayloadToMessageResolver<TParent>;
}

export interface DeleteBillingRequestPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteFormatPayloadTypeResolver<TParent = any> {
  message?: DeleteFormatPayloadToMessageResolver<TParent>;
}

export interface DeleteFormatPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreatePDFPayloadTypeResolver<TParent = any> {
  message?: CreatePDFPayloadToMessageResolver<TParent>;
}

export interface CreatePDFPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateApiServicePayloadTypeResolver<TParent = any> {
  apiService?: CreateApiServicePayloadToApiServiceResolver<TParent>;
}

export interface CreateApiServicePayloadToApiServiceResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateApiServicePayloadTypeResolver<TParent = any> {
  message?: UpdateApiServicePayloadToMessageResolver<TParent>;
}

export interface UpdateApiServicePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IFolderPayloadTypeResolver<TParent = any> {
  message?: FolderPayloadToMessageResolver<TParent>;
}

export interface FolderPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteFolderPayLoadTypeResolver<TParent = any> {
  message?: DeleteFolderPayLoadToMessageResolver<TParent>;
}

export interface DeleteFolderPayLoadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateFilePayloadTypeResolver<TParent = any> {
  message?: CreateFilePayloadToMessageResolver<TParent>;
}

export interface CreateFilePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUpdateFilesPayloadTypeResolver<TParent = any> {
  message?: UpdateFilesPayloadToMessageResolver<TParent>;
}

export interface UpdateFilesPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeleteFilePayLoadTypeResolver<TParent = any> {
  message?: DeleteFilePayLoadToMessageResolver<TParent>;
}

export interface DeleteFilePayLoadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IShareFilePayloadTypeResolver<TParent = any> {
  sharedFile?: ShareFilePayloadToSharedFileResolver<TParent>;
}

export interface ShareFilePayloadToSharedFileResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IShareFolderPayloadTypeResolver<TParent = any> {
  sharedFolders?: ShareFolderPayloadToSharedFoldersResolver<TParent>;
}

export interface ShareFolderPayloadToSharedFoldersResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IStopSharingFolderPayloadTypeResolver<TParent = any> {
  message?: StopSharingFolderPayloadToMessageResolver<TParent>;
}

export interface StopSharingFolderPayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IStopSharingFilePayloadTypeResolver<TParent = any> {
  message?: StopSharingFilePayloadToMessageResolver<TParent>;
}

export interface StopSharingFilePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUploadFilePrivatePayloadTypeResolver<TParent = any> {
  url?: UploadFilePrivatePayloadToUrlResolver<TParent>;
  message?: UploadFilePrivatePayloadToMessageResolver<TParent>;
}

export interface UploadFilePrivatePayloadToUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFilePrivatePayloadToMessageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IRoomRecorderReturnTypeResolver<TParent = any> {
  name?: RoomRecorderReturnToNameResolver<TParent>;
  url?: RoomRecorderReturnToUrlResolver<TParent>;
  signedUrl?: RoomRecorderReturnToSignedUrlResolver<TParent>;
  size?: RoomRecorderReturnToSizeResolver<TParent>;
}

export interface RoomRecorderReturnToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomRecorderReturnToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomRecorderReturnToSignedUrlResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomRecorderReturnToSizeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IHiringPayloadTypeResolver<TParent = any> {
  hiring?: HiringPayloadToHiringResolver<TParent>;
}

export interface HiringPayloadToHiringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IHiringTypePayloadTypeResolver<TParent = any> {
  hiringType?: HiringTypePayloadToHiringTypeResolver<TParent>;
}

export interface HiringTypePayloadToHiringTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IShiftPayloadTypeResolver<TParent = any> {
  shift?: ShiftPayloadToShiftResolver<TParent>;
}

export interface ShiftPayloadToShiftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentCategoryPayloadTypeResolver<TParent = any> {
  documentCategory?: DocumentCategoryPayloadToDocumentCategoryResolver<TParent>;
}

export interface DocumentCategoryPayloadToDocumentCategoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentCategoryDetailPayloadTypeResolver<TParent = any> {
  document?: DocumentCategoryDetailPayloadToDocumentResolver<TParent>;
}

export interface DocumentCategoryDetailPayloadToDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentPayloadTypeResolver<TParent = any> {
  document?: DocumentPayloadToDocumentResolver<TParent>;
}

export interface DocumentPayloadToDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentTemplatePayloadTypeResolver<TParent = any> {
  document?: DocumentTemplatePayloadToDocumentResolver<TParent>;
}

export interface DocumentTemplatePayloadToDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ITemplatePagePayloadTypeResolver<TParent = any> {
  templatePage?: TemplatePagePayloadToTemplatePageResolver<TParent>;
}

export interface TemplatePagePayloadToTemplatePageResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentTagPayloadTypeResolver<TParent = any> {
  documentTag?: DocumentTagPayloadToDocumentTagResolver<TParent>;
}

export interface DocumentTagPayloadToDocumentTagResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentScanPayloadTypeResolver<TParent = any> {
  documentScan?: DocumentScanPayloadToDocumentScanResolver<TParent>;
}

export interface DocumentScanPayloadToDocumentScanResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDocumentReadPayloadTypeResolver<TParent = any> {
  documentRead?: DocumentReadPayloadToDocumentReadResolver<TParent>;
}

export interface DocumentReadPayloadToDocumentReadResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICreateTemplatePayloadTypeResolver<TParent = any> {
  scans?: CreateTemplatePayloadToScansResolver<TParent>;
}

export interface CreateTemplatePayloadToScansResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISubscriptionTypeResolver<TParent = any> {
  conversationPublished?: SubscriptionToConversationPublishedResolver<TParent>;
}

export interface SubscriptionToConversationPublishedArgs {
  conversationId: string;
}
export interface SubscriptionToConversationPublishedResolver<
  TParent = any,
  TResult = any
> {
  resolve?: (
    parent: TParent,
    args: SubscriptionToConversationPublishedArgs,
    context: any,
    info: GraphQLResolveInfo
  ) => TResult;
  subscribe: (
    parent: TParent,
    args: SubscriptionToConversationPublishedArgs,
    context: any,
    info: GraphQLResolveInfo
  ) => AsyncIterator<TResult>;
}
